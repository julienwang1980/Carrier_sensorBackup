
Mini_VRV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000099c8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c0  08009b78  08009b78  00019b78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f38  08009f38  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08009f38  08009f38  00019f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009f40  08009f40  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f40  08009f40  00019f40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009f44  08009f44  00019f44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08009f48  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          00004da0  20000080  20000080  00020080  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004e20  20004e20  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001da7f  00000000  00000000  000200f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000380f  00000000  00000000  0003db72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001298  00000000  00000000  00041388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000f7a  00000000  00000000  00042620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000271ec  00000000  00000000  0004359a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001cb0a  00000000  00000000  0006a786  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e4ab3  00000000  00000000  00087290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004884  00000000  00000000  0016bd44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000c5af  00000000  00000000  001705c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000091  00000000  00000000  0017cb77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000080 	.word	0x20000080
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009b60 	.word	0x08009b60

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000084 	.word	0x20000084
 80001ec:	08009b60 	.word	0x08009b60

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b970 	b.w	8000f60 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9e08      	ldr	r6, [sp, #32]
 8000c9e:	460d      	mov	r5, r1
 8000ca0:	4604      	mov	r4, r0
 8000ca2:	460f      	mov	r7, r1
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d14a      	bne.n	8000d3e <__udivmoddi4+0xa6>
 8000ca8:	428a      	cmp	r2, r1
 8000caa:	4694      	mov	ip, r2
 8000cac:	d965      	bls.n	8000d7a <__udivmoddi4+0xe2>
 8000cae:	fab2 f382 	clz	r3, r2
 8000cb2:	b143      	cbz	r3, 8000cc6 <__udivmoddi4+0x2e>
 8000cb4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cb8:	f1c3 0220 	rsb	r2, r3, #32
 8000cbc:	409f      	lsls	r7, r3
 8000cbe:	fa20 f202 	lsr.w	r2, r0, r2
 8000cc2:	4317      	orrs	r7, r2
 8000cc4:	409c      	lsls	r4, r3
 8000cc6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cca:	fa1f f58c 	uxth.w	r5, ip
 8000cce:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cd2:	0c22      	lsrs	r2, r4, #16
 8000cd4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cd8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cdc:	fb01 f005 	mul.w	r0, r1, r5
 8000ce0:	4290      	cmp	r0, r2
 8000ce2:	d90a      	bls.n	8000cfa <__udivmoddi4+0x62>
 8000ce4:	eb1c 0202 	adds.w	r2, ip, r2
 8000ce8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cec:	f080 811c 	bcs.w	8000f28 <__udivmoddi4+0x290>
 8000cf0:	4290      	cmp	r0, r2
 8000cf2:	f240 8119 	bls.w	8000f28 <__udivmoddi4+0x290>
 8000cf6:	3902      	subs	r1, #2
 8000cf8:	4462      	add	r2, ip
 8000cfa:	1a12      	subs	r2, r2, r0
 8000cfc:	b2a4      	uxth	r4, r4
 8000cfe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d02:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d06:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0a:	fb00 f505 	mul.w	r5, r0, r5
 8000d0e:	42a5      	cmp	r5, r4
 8000d10:	d90a      	bls.n	8000d28 <__udivmoddi4+0x90>
 8000d12:	eb1c 0404 	adds.w	r4, ip, r4
 8000d16:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1a:	f080 8107 	bcs.w	8000f2c <__udivmoddi4+0x294>
 8000d1e:	42a5      	cmp	r5, r4
 8000d20:	f240 8104 	bls.w	8000f2c <__udivmoddi4+0x294>
 8000d24:	4464      	add	r4, ip
 8000d26:	3802      	subs	r0, #2
 8000d28:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d2c:	1b64      	subs	r4, r4, r5
 8000d2e:	2100      	movs	r1, #0
 8000d30:	b11e      	cbz	r6, 8000d3a <__udivmoddi4+0xa2>
 8000d32:	40dc      	lsrs	r4, r3
 8000d34:	2300      	movs	r3, #0
 8000d36:	e9c6 4300 	strd	r4, r3, [r6]
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0xbc>
 8000d42:	2e00      	cmp	r6, #0
 8000d44:	f000 80ed 	beq.w	8000f22 <__udivmoddi4+0x28a>
 8000d48:	2100      	movs	r1, #0
 8000d4a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d4e:	4608      	mov	r0, r1
 8000d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d54:	fab3 f183 	clz	r1, r3
 8000d58:	2900      	cmp	r1, #0
 8000d5a:	d149      	bne.n	8000df0 <__udivmoddi4+0x158>
 8000d5c:	42ab      	cmp	r3, r5
 8000d5e:	d302      	bcc.n	8000d66 <__udivmoddi4+0xce>
 8000d60:	4282      	cmp	r2, r0
 8000d62:	f200 80f8 	bhi.w	8000f56 <__udivmoddi4+0x2be>
 8000d66:	1a84      	subs	r4, r0, r2
 8000d68:	eb65 0203 	sbc.w	r2, r5, r3
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	4617      	mov	r7, r2
 8000d70:	2e00      	cmp	r6, #0
 8000d72:	d0e2      	beq.n	8000d3a <__udivmoddi4+0xa2>
 8000d74:	e9c6 4700 	strd	r4, r7, [r6]
 8000d78:	e7df      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000d7a:	b902      	cbnz	r2, 8000d7e <__udivmoddi4+0xe6>
 8000d7c:	deff      	udf	#255	; 0xff
 8000d7e:	fab2 f382 	clz	r3, r2
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	f040 8090 	bne.w	8000ea8 <__udivmoddi4+0x210>
 8000d88:	1a8a      	subs	r2, r1, r2
 8000d8a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d8e:	fa1f fe8c 	uxth.w	lr, ip
 8000d92:	2101      	movs	r1, #1
 8000d94:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d98:	fb07 2015 	mls	r0, r7, r5, r2
 8000d9c:	0c22      	lsrs	r2, r4, #16
 8000d9e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000da2:	fb0e f005 	mul.w	r0, lr, r5
 8000da6:	4290      	cmp	r0, r2
 8000da8:	d908      	bls.n	8000dbc <__udivmoddi4+0x124>
 8000daa:	eb1c 0202 	adds.w	r2, ip, r2
 8000dae:	f105 38ff 	add.w	r8, r5, #4294967295
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x122>
 8000db4:	4290      	cmp	r0, r2
 8000db6:	f200 80cb 	bhi.w	8000f50 <__udivmoddi4+0x2b8>
 8000dba:	4645      	mov	r5, r8
 8000dbc:	1a12      	subs	r2, r2, r0
 8000dbe:	b2a4      	uxth	r4, r4
 8000dc0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000dc4:	fb07 2210 	mls	r2, r7, r0, r2
 8000dc8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dcc:	fb0e fe00 	mul.w	lr, lr, r0
 8000dd0:	45a6      	cmp	lr, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x14e>
 8000dd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ddc:	d202      	bcs.n	8000de4 <__udivmoddi4+0x14c>
 8000dde:	45a6      	cmp	lr, r4
 8000de0:	f200 80bb 	bhi.w	8000f5a <__udivmoddi4+0x2c2>
 8000de4:	4610      	mov	r0, r2
 8000de6:	eba4 040e 	sub.w	r4, r4, lr
 8000dea:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dee:	e79f      	b.n	8000d30 <__udivmoddi4+0x98>
 8000df0:	f1c1 0720 	rsb	r7, r1, #32
 8000df4:	408b      	lsls	r3, r1
 8000df6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dfa:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dfe:	fa05 f401 	lsl.w	r4, r5, r1
 8000e02:	fa20 f307 	lsr.w	r3, r0, r7
 8000e06:	40fd      	lsrs	r5, r7
 8000e08:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e0c:	4323      	orrs	r3, r4
 8000e0e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e12:	fa1f fe8c 	uxth.w	lr, ip
 8000e16:	fb09 5518 	mls	r5, r9, r8, r5
 8000e1a:	0c1c      	lsrs	r4, r3, #16
 8000e1c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e20:	fb08 f50e 	mul.w	r5, r8, lr
 8000e24:	42a5      	cmp	r5, r4
 8000e26:	fa02 f201 	lsl.w	r2, r2, r1
 8000e2a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e2e:	d90b      	bls.n	8000e48 <__udivmoddi4+0x1b0>
 8000e30:	eb1c 0404 	adds.w	r4, ip, r4
 8000e34:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e38:	f080 8088 	bcs.w	8000f4c <__udivmoddi4+0x2b4>
 8000e3c:	42a5      	cmp	r5, r4
 8000e3e:	f240 8085 	bls.w	8000f4c <__udivmoddi4+0x2b4>
 8000e42:	f1a8 0802 	sub.w	r8, r8, #2
 8000e46:	4464      	add	r4, ip
 8000e48:	1b64      	subs	r4, r4, r5
 8000e4a:	b29d      	uxth	r5, r3
 8000e4c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e50:	fb09 4413 	mls	r4, r9, r3, r4
 8000e54:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e58:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x1da>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e68:	d26c      	bcs.n	8000f44 <__udivmoddi4+0x2ac>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	d96a      	bls.n	8000f44 <__udivmoddi4+0x2ac>
 8000e6e:	3b02      	subs	r3, #2
 8000e70:	4464      	add	r4, ip
 8000e72:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e76:	fba3 9502 	umull	r9, r5, r3, r2
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	42ac      	cmp	r4, r5
 8000e80:	46c8      	mov	r8, r9
 8000e82:	46ae      	mov	lr, r5
 8000e84:	d356      	bcc.n	8000f34 <__udivmoddi4+0x29c>
 8000e86:	d053      	beq.n	8000f30 <__udivmoddi4+0x298>
 8000e88:	b156      	cbz	r6, 8000ea0 <__udivmoddi4+0x208>
 8000e8a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e8e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e92:	fa04 f707 	lsl.w	r7, r4, r7
 8000e96:	40ca      	lsrs	r2, r1
 8000e98:	40cc      	lsrs	r4, r1
 8000e9a:	4317      	orrs	r7, r2
 8000e9c:	e9c6 7400 	strd	r7, r4, [r6]
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea8:	f1c3 0120 	rsb	r1, r3, #32
 8000eac:	fa02 fc03 	lsl.w	ip, r2, r3
 8000eb0:	fa20 f201 	lsr.w	r2, r0, r1
 8000eb4:	fa25 f101 	lsr.w	r1, r5, r1
 8000eb8:	409d      	lsls	r5, r3
 8000eba:	432a      	orrs	r2, r5
 8000ebc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ec0:	fa1f fe8c 	uxth.w	lr, ip
 8000ec4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ec8:	fb07 1510 	mls	r5, r7, r0, r1
 8000ecc:	0c11      	lsrs	r1, r2, #16
 8000ece:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ed2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ed6:	428d      	cmp	r5, r1
 8000ed8:	fa04 f403 	lsl.w	r4, r4, r3
 8000edc:	d908      	bls.n	8000ef0 <__udivmoddi4+0x258>
 8000ede:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ee6:	d22f      	bcs.n	8000f48 <__udivmoddi4+0x2b0>
 8000ee8:	428d      	cmp	r5, r1
 8000eea:	d92d      	bls.n	8000f48 <__udivmoddi4+0x2b0>
 8000eec:	3802      	subs	r0, #2
 8000eee:	4461      	add	r1, ip
 8000ef0:	1b49      	subs	r1, r1, r5
 8000ef2:	b292      	uxth	r2, r2
 8000ef4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ef8:	fb07 1115 	mls	r1, r7, r5, r1
 8000efc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f00:	fb05 f10e 	mul.w	r1, r5, lr
 8000f04:	4291      	cmp	r1, r2
 8000f06:	d908      	bls.n	8000f1a <__udivmoddi4+0x282>
 8000f08:	eb1c 0202 	adds.w	r2, ip, r2
 8000f0c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f10:	d216      	bcs.n	8000f40 <__udivmoddi4+0x2a8>
 8000f12:	4291      	cmp	r1, r2
 8000f14:	d914      	bls.n	8000f40 <__udivmoddi4+0x2a8>
 8000f16:	3d02      	subs	r5, #2
 8000f18:	4462      	add	r2, ip
 8000f1a:	1a52      	subs	r2, r2, r1
 8000f1c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f20:	e738      	b.n	8000d94 <__udivmoddi4+0xfc>
 8000f22:	4631      	mov	r1, r6
 8000f24:	4630      	mov	r0, r6
 8000f26:	e708      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000f28:	4639      	mov	r1, r7
 8000f2a:	e6e6      	b.n	8000cfa <__udivmoddi4+0x62>
 8000f2c:	4610      	mov	r0, r2
 8000f2e:	e6fb      	b.n	8000d28 <__udivmoddi4+0x90>
 8000f30:	4548      	cmp	r0, r9
 8000f32:	d2a9      	bcs.n	8000e88 <__udivmoddi4+0x1f0>
 8000f34:	ebb9 0802 	subs.w	r8, r9, r2
 8000f38:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f3c:	3b01      	subs	r3, #1
 8000f3e:	e7a3      	b.n	8000e88 <__udivmoddi4+0x1f0>
 8000f40:	4645      	mov	r5, r8
 8000f42:	e7ea      	b.n	8000f1a <__udivmoddi4+0x282>
 8000f44:	462b      	mov	r3, r5
 8000f46:	e794      	b.n	8000e72 <__udivmoddi4+0x1da>
 8000f48:	4640      	mov	r0, r8
 8000f4a:	e7d1      	b.n	8000ef0 <__udivmoddi4+0x258>
 8000f4c:	46d0      	mov	r8, sl
 8000f4e:	e77b      	b.n	8000e48 <__udivmoddi4+0x1b0>
 8000f50:	3d02      	subs	r5, #2
 8000f52:	4462      	add	r2, ip
 8000f54:	e732      	b.n	8000dbc <__udivmoddi4+0x124>
 8000f56:	4608      	mov	r0, r1
 8000f58:	e70a      	b.n	8000d70 <__udivmoddi4+0xd8>
 8000f5a:	4464      	add	r4, ip
 8000f5c:	3802      	subs	r0, #2
 8000f5e:	e742      	b.n	8000de6 <__udivmoddi4+0x14e>

08000f60 <__aeabi_idiv0>:
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop

08000f64 <configureTimerForRunTimeStats>:
/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{

}
 8000f64:	4770      	bx	lr

08000f66 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
return 0;
}
 8000f66:	2000      	movs	r0, #0
 8000f68:	4770      	bx	lr
	...

08000f6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f6c:	b084      	sub	sp, #16
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f6e:	2200      	movs	r2, #0
 8000f70:	9201      	str	r2, [sp, #4]
 8000f72:	4b10      	ldr	r3, [pc, #64]	; (8000fb4 <MX_GPIO_Init+0x48>)
 8000f74:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000f76:	f041 0110 	orr.w	r1, r1, #16
 8000f7a:	6319      	str	r1, [r3, #48]	; 0x30
 8000f7c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000f7e:	f001 0110 	and.w	r1, r1, #16
 8000f82:	9101      	str	r1, [sp, #4]
 8000f84:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f86:	9202      	str	r2, [sp, #8]
 8000f88:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000f8a:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8000f8e:	6319      	str	r1, [r3, #48]	; 0x30
 8000f90:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000f92:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8000f96:	9102      	str	r1, [sp, #8]
 8000f98:	9902      	ldr	r1, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9a:	9203      	str	r2, [sp, #12]
 8000f9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f9e:	f042 0201 	orr.w	r2, r2, #1
 8000fa2:	631a      	str	r2, [r3, #48]	; 0x30
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	f003 0301 	and.w	r3, r3, #1
 8000faa:	9303      	str	r3, [sp, #12]
 8000fac:	9b03      	ldr	r3, [sp, #12]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fae:	b004      	add	sp, #16
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	40023800 	.word	0x40023800

08000fb8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000fb8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000fba:	2001      	movs	r0, #1
 8000fbc:	f001 fa24 	bl	8002408 <osDelay>
  for(;;)
 8000fc0:	e7fb      	b.n	8000fba <StartDefaultTask+0x2>
	...

08000fc4 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000fc4:	b570      	push	{r4, r5, r6, lr}
	float t_dis, p_dis;

  /* Infinite loop */
  for(;;)
  {
	  t = counter;
 8000fc6:	4c12      	ldr	r4, [pc, #72]	; (8001010 <StartTask02+0x4c>)
 8000fc8:	6825      	ldr	r5, [r4, #0]
	  t_dis = pred_Tdis(Ps, ST, Pd, CompSpeed);
 8000fca:	eddf 1a12 	vldr	s3, [pc, #72]	; 8001014 <StartTask02+0x50>
 8000fce:	ed9f 1a12 	vldr	s2, [pc, #72]	; 8001018 <StartTask02+0x54>
 8000fd2:	eddf 0a12 	vldr	s1, [pc, #72]	; 800101c <StartTask02+0x58>
 8000fd6:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8001020 <StartTask02+0x5c>
 8000fda:	f004 fb5d 	bl	8005698 <pred_Tdis>
	  time1 = counter - t;
 8000fde:	6826      	ldr	r6, [r4, #0]
 8000fe0:	1b75      	subs	r5, r6, r5
 8000fe2:	4b10      	ldr	r3, [pc, #64]	; (8001024 <StartTask02+0x60>)
 8000fe4:	601d      	str	r5, [r3, #0]
	  t = counter;
	  p_dis = pred_Pdis(641, -2.23, 56.39, 7080);
 8000fe6:	eddf 1a10 	vldr	s3, [pc, #64]	; 8001028 <StartTask02+0x64>
 8000fea:	ed9f 1a10 	vldr	s2, [pc, #64]	; 800102c <StartTask02+0x68>
 8000fee:	eddf 0a10 	vldr	s1, [pc, #64]	; 8001030 <StartTask02+0x6c>
 8000ff2:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8001034 <StartTask02+0x70>
 8000ff6:	f004 fdc7 	bl	8005b88 <pred_Pdis>
	  time2 = counter - t;
 8000ffa:	6823      	ldr	r3, [r4, #0]
 8000ffc:	1b9b      	subs	r3, r3, r6
 8000ffe:	4a0e      	ldr	r2, [pc, #56]	; (8001038 <StartTask02+0x74>)
 8001000:	6013      	str	r3, [r2, #0]
//	  sensor_pre_test();
	  counter = 0;
 8001002:	2300      	movs	r3, #0
 8001004:	6023      	str	r3, [r4, #0]
	  osDelay(1000);
 8001006:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800100a:	f001 f9fd 	bl	8002408 <osDelay>
  for(;;)
 800100e:	e7da      	b.n	8000fc6 <StartTask02+0x2>
 8001010:	20000230 	.word	0x20000230
 8001014:	44d98000 	.word	0x44d98000
 8001018:	45068971 	.word	0x45068971
 800101c:	41a451ec 	.word	0x41a451ec
 8001020:	44addc29 	.word	0x44addc29
 8001024:	20000284 	.word	0x20000284
 8001028:	45dd4000 	.word	0x45dd4000
 800102c:	42618f5c 	.word	0x42618f5c
 8001030:	c00eb852 	.word	0xc00eb852
 8001034:	44204000 	.word	0x44204000
 8001038:	20000288 	.word	0x20000288

0800103c <startCPU_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startCPU_Task */
void startCPU_Task(void *argument)
{
 800103c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN startCPU_Task */
  /* Infinite loop */
  for(;;)
  {

		memset(CPU_RunInfo,0,400);				//信息缓冲区清�????
 800103e:	4c11      	ldr	r4, [pc, #68]	; (8001084 <startCPU_Task+0x48>)
 8001040:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8001044:	462a      	mov	r2, r5
 8001046:	2100      	movs	r1, #0
 8001048:	4620      	mov	r0, r4
 800104a:	f005 f86b 	bl	8006124 <memset>

		vTaskList((char *)&CPU_RunInfo);  //获取任务运行时间信息
 800104e:	4620      	mov	r0, r4
 8001050:	f002 fbec 	bl	800382c <vTaskList>



		memset(CPU_RunInfo,0,400);				//信息缓冲区清�????
 8001054:	462a      	mov	r2, r5
 8001056:	2100      	movs	r1, #0
 8001058:	4620      	mov	r0, r4
 800105a:	f005 f863 	bl	8006124 <memset>

		vTaskGetRunTimeStats((char *)&CPU_RunInfo);
 800105e:	4620      	mov	r0, r4
 8001060:	f002 fc42 	bl	80038e8 <vTaskGetRunTimeStats>
	    printf("任务�??       运行计数         使用率\r\n");
 8001064:	4808      	ldr	r0, [pc, #32]	; (8001088 <startCPU_Task+0x4c>)
 8001066:	f004 ff5d 	bl	8005f24 <puts>
	    printf("%s", CPU_RunInfo);
 800106a:	4621      	mov	r1, r4
 800106c:	4807      	ldr	r0, [pc, #28]	; (800108c <startCPU_Task+0x50>)
 800106e:	f004 fef3 	bl	8005e58 <iprintf>
	    printf("---------------------------------------------\r\n\n");
 8001072:	4807      	ldr	r0, [pc, #28]	; (8001090 <startCPU_Task+0x54>)
 8001074:	f004 ff56 	bl	8005f24 <puts>
		osDelay(1000);
 8001078:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800107c:	f001 f9c4 	bl	8002408 <osDelay>
  for(;;)
 8001080:	e7dd      	b.n	800103e <startCPU_Task+0x2>
 8001082:	bf00      	nop
 8001084:	2000009c 	.word	0x2000009c
 8001088:	08009b78 	.word	0x08009b78
 800108c:	08009bac 	.word	0x08009bac
 8001090:	08009bb0 	.word	0x08009bb0

08001094 <_write>:
{
 8001094:	4610      	mov	r0, r2
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001096:	f04f 0c00 	mov.w	ip, #0
 800109a:	e00a      	b.n	80010b2 <_write+0x1e>
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
  {
    while (ITM->PORT[0U].u32 == 0UL)
    {
      __NOP();
 800109c:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800109e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d0f9      	beq.n	800109c <_write+0x8>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80010a8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80010ac:	701a      	strb	r2, [r3, #0]
 80010ae:	f10c 0c01 	add.w	ip, ip, #1
 80010b2:	4584      	cmp	ip, r0
 80010b4:	da10      	bge.n	80010d8 <_write+0x44>
		ITM_SendChar(*ptr++);       // 把printf函数重定向到ITM_SendChar
 80010b6:	f811 2b01 	ldrb.w	r2, [r1], #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80010ba:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80010be:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80010c2:	f013 0f01 	tst.w	r3, #1
 80010c6:	d0f2      	beq.n	80010ae <_write+0x1a>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80010c8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80010cc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80010d0:	f013 0f01 	tst.w	r3, #1
 80010d4:	d1e3      	bne.n	800109e <_write+0xa>
 80010d6:	e7ea      	b.n	80010ae <_write+0x1a>
}
 80010d8:	4770      	bx	lr
	...

080010dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010dc:	b510      	push	{r4, lr}
 80010de:	4604      	mov	r4, r0
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 80010e0:	6802      	ldr	r2, [r0, #0]
 80010e2:	4b08      	ldr	r3, [pc, #32]	; (8001104 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d004      	beq.n	80010f2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM4) {
 80010e8:	6822      	ldr	r2, [r4, #0]
 80010ea:	4b07      	ldr	r3, [pc, #28]	; (8001108 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d003      	beq.n	80010f8 <HAL_TIM_PeriodElapsedCallback+0x1c>
	  counter++;
  }

  /* USER CODE END Callback 1 */
}
 80010f0:	bd10      	pop	{r4, pc}
    HAL_IncTick();
 80010f2:	f000 fa19 	bl	8001528 <HAL_IncTick>
 80010f6:	e7f7      	b.n	80010e8 <HAL_TIM_PeriodElapsedCallback+0xc>
	  counter++;
 80010f8:	4a04      	ldr	r2, [pc, #16]	; (800110c <HAL_TIM_PeriodElapsedCallback+0x30>)
 80010fa:	6813      	ldr	r3, [r2, #0]
 80010fc:	3301      	adds	r3, #1
 80010fe:	6013      	str	r3, [r2, #0]
}
 8001100:	e7f6      	b.n	80010f0 <HAL_TIM_PeriodElapsedCallback+0x14>
 8001102:	bf00      	nop
 8001104:	40001400 	.word	0x40001400
 8001108:	40000800 	.word	0x40000800
 800110c:	20000230 	.word	0x20000230

08001110 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001110:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001112:	e7fe      	b.n	8001112 <Error_Handler+0x2>

08001114 <MX_TIM4_Init>:
{
 8001114:	b500      	push	{lr}
 8001116:	b08d      	sub	sp, #52	; 0x34
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001118:	2300      	movs	r3, #0
 800111a:	9308      	str	r3, [sp, #32]
 800111c:	9309      	str	r3, [sp, #36]	; 0x24
 800111e:	930a      	str	r3, [sp, #40]	; 0x28
 8001120:	930b      	str	r3, [sp, #44]	; 0x2c
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001122:	9303      	str	r3, [sp, #12]
 8001124:	9304      	str	r3, [sp, #16]
 8001126:	9305      	str	r3, [sp, #20]
 8001128:	9306      	str	r3, [sp, #24]
 800112a:	9307      	str	r3, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800112c:	9301      	str	r3, [sp, #4]
 800112e:	9302      	str	r3, [sp, #8]
  htim4.Instance = TIM4;
 8001130:	481a      	ldr	r0, [pc, #104]	; (800119c <MX_TIM4_Init+0x88>)
 8001132:	4a1b      	ldr	r2, [pc, #108]	; (80011a0 <MX_TIM4_Init+0x8c>)
 8001134:	6002      	str	r2, [r0, #0]
  htim4.Init.Prescaler = 25-1;
 8001136:	2218      	movs	r2, #24
 8001138:	6042      	str	r2, [r0, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800113a:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 1000-1;
 800113c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001140:	60c2      	str	r2, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001142:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001144:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001146:	f000 ff41 	bl	8001fcc <HAL_TIM_Base_Init>
 800114a:	b9f0      	cbnz	r0, 800118a <MX_TIM4_Init+0x76>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800114c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001150:	9308      	str	r3, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001152:	a908      	add	r1, sp, #32
 8001154:	4811      	ldr	r0, [pc, #68]	; (800119c <MX_TIM4_Init+0x88>)
 8001156:	f000 ff72 	bl	800203e <HAL_TIM_ConfigClockSource>
 800115a:	b9c0      	cbnz	r0, 800118e <MX_TIM4_Init+0x7a>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800115c:	2304      	movs	r3, #4
 800115e:	9303      	str	r3, [sp, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001160:	2300      	movs	r3, #0
 8001162:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8001164:	a903      	add	r1, sp, #12
 8001166:	480d      	ldr	r0, [pc, #52]	; (800119c <MX_TIM4_Init+0x88>)
 8001168:	f001 f844 	bl	80021f4 <HAL_TIM_SlaveConfigSynchro>
 800116c:	b988      	cbnz	r0, 8001192 <MX_TIM4_Init+0x7e>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800116e:	2300      	movs	r3, #0
 8001170:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001172:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001174:	a901      	add	r1, sp, #4
 8001176:	4809      	ldr	r0, [pc, #36]	; (800119c <MX_TIM4_Init+0x88>)
 8001178:	f001 f866 	bl	8002248 <HAL_TIMEx_MasterConfigSynchronization>
 800117c:	b958      	cbnz	r0, 8001196 <MX_TIM4_Init+0x82>
  HAL_TIM_Base_Start_IT(&htim4);
 800117e:	4807      	ldr	r0, [pc, #28]	; (800119c <MX_TIM4_Init+0x88>)
 8001180:	f000 fdba 	bl	8001cf8 <HAL_TIM_Base_Start_IT>
}
 8001184:	b00d      	add	sp, #52	; 0x34
 8001186:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800118a:	f7ff ffc1 	bl	8001110 <Error_Handler>
    Error_Handler();
 800118e:	f7ff ffbf 	bl	8001110 <Error_Handler>
    Error_Handler();
 8001192:	f7ff ffbd 	bl	8001110 <Error_Handler>
    Error_Handler();
 8001196:	f7ff ffbb 	bl	8001110 <Error_Handler>
 800119a:	bf00      	nop
 800119c:	20000238 	.word	0x20000238
 80011a0:	40000800 	.word	0x40000800

080011a4 <SystemClock_Config>:
{
 80011a4:	b500      	push	{lr}
 80011a6:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011a8:	2230      	movs	r2, #48	; 0x30
 80011aa:	2100      	movs	r1, #0
 80011ac:	a808      	add	r0, sp, #32
 80011ae:	f004 ffb9 	bl	8006124 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011b2:	2300      	movs	r3, #0
 80011b4:	9303      	str	r3, [sp, #12]
 80011b6:	9304      	str	r3, [sp, #16]
 80011b8:	9305      	str	r3, [sp, #20]
 80011ba:	9306      	str	r3, [sp, #24]
 80011bc:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011be:	9301      	str	r3, [sp, #4]
 80011c0:	4a20      	ldr	r2, [pc, #128]	; (8001244 <SystemClock_Config+0xa0>)
 80011c2:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80011c4:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80011c8:	6411      	str	r1, [r2, #64]	; 0x40
 80011ca:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80011cc:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80011d0:	9201      	str	r2, [sp, #4]
 80011d2:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80011d4:	9302      	str	r3, [sp, #8]
 80011d6:	491c      	ldr	r1, [pc, #112]	; (8001248 <SystemClock_Config+0xa4>)
 80011d8:	680a      	ldr	r2, [r1, #0]
 80011da:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80011de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80011e2:	600a      	str	r2, [r1, #0]
 80011e4:	680a      	ldr	r2, [r1, #0]
 80011e6:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 80011ea:	9202      	str	r2, [sp, #8]
 80011ec:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011ee:	2202      	movs	r2, #2
 80011f0:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011f2:	2101      	movs	r1, #1
 80011f4:	910b      	str	r1, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011f6:	2110      	movs	r1, #16
 80011f8:	910c      	str	r1, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011fa:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011fc:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80011fe:	2308      	movs	r3, #8
 8001200:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001202:	2364      	movs	r3, #100	; 0x64
 8001204:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001206:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001208:	2304      	movs	r3, #4
 800120a:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800120c:	a808      	add	r0, sp, #32
 800120e:	f000 f9f5 	bl	80015fc <HAL_RCC_OscConfig>
 8001212:	b998      	cbnz	r0, 800123c <SystemClock_Config+0x98>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001214:	230f      	movs	r3, #15
 8001216:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001218:	2302      	movs	r3, #2
 800121a:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800121c:	2300      	movs	r3, #0
 800121e:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001220:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001224:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001226:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800122a:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800122c:	2103      	movs	r1, #3
 800122e:	a803      	add	r0, sp, #12
 8001230:	f000 fc4e 	bl	8001ad0 <HAL_RCC_ClockConfig>
 8001234:	b920      	cbnz	r0, 8001240 <SystemClock_Config+0x9c>
}
 8001236:	b015      	add	sp, #84	; 0x54
 8001238:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800123c:	f7ff ff68 	bl	8001110 <Error_Handler>
    Error_Handler();
 8001240:	f7ff ff66 	bl	8001110 <Error_Handler>
 8001244:	40023800 	.word	0x40023800
 8001248:	40007000 	.word	0x40007000

0800124c <main>:
{
 800124c:	b508      	push	{r3, lr}
  HAL_Init();
 800124e:	f000 f951 	bl	80014f4 <HAL_Init>
  SystemClock_Config();
 8001252:	f7ff ffa7 	bl	80011a4 <SystemClock_Config>
  MX_GPIO_Init();
 8001256:	f7ff fe89 	bl	8000f6c <MX_GPIO_Init>
  MX_TIM4_Init();
 800125a:	f7ff ff5b 	bl	8001114 <MX_TIM4_Init>
  osKernelInitialize();
 800125e:	f001 f847 	bl	80022f0 <osKernelInitialize>
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001262:	4a0c      	ldr	r2, [pc, #48]	; (8001294 <main+0x48>)
 8001264:	2100      	movs	r1, #0
 8001266:	480c      	ldr	r0, [pc, #48]	; (8001298 <main+0x4c>)
 8001268:	f001 f870 	bl	800234c <osThreadNew>
 800126c:	4b0b      	ldr	r3, [pc, #44]	; (800129c <main+0x50>)
 800126e:	6018      	str	r0, [r3, #0]
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8001270:	4a0b      	ldr	r2, [pc, #44]	; (80012a0 <main+0x54>)
 8001272:	2100      	movs	r1, #0
 8001274:	480b      	ldr	r0, [pc, #44]	; (80012a4 <main+0x58>)
 8001276:	f001 f869 	bl	800234c <osThreadNew>
 800127a:	4b0b      	ldr	r3, [pc, #44]	; (80012a8 <main+0x5c>)
 800127c:	6018      	str	r0, [r3, #0]
  CPU_TaskHandle = osThreadNew(startCPU_Task, NULL, &CPU_Task_attributes);
 800127e:	4a0b      	ldr	r2, [pc, #44]	; (80012ac <main+0x60>)
 8001280:	2100      	movs	r1, #0
 8001282:	480b      	ldr	r0, [pc, #44]	; (80012b0 <main+0x64>)
 8001284:	f001 f862 	bl	800234c <osThreadNew>
 8001288:	4b0a      	ldr	r3, [pc, #40]	; (80012b4 <main+0x68>)
 800128a:	6018      	str	r0, [r3, #0]
  osKernelStart();
 800128c:	f001 f842 	bl	8002314 <osKernelStart>
  while (1)
 8001290:	e7fe      	b.n	8001290 <main+0x44>
 8001292:	bf00      	nop
 8001294:	08009c28 	.word	0x08009c28
 8001298:	08000fb9 	.word	0x08000fb9
 800129c:	20000234 	.word	0x20000234
 80012a0:	08009c4c 	.word	0x08009c4c
 80012a4:	08000fc5 	.word	0x08000fc5
 80012a8:	20000280 	.word	0x20000280
 80012ac:	08009c04 	.word	0x08009c04
 80012b0:	0800103d 	.word	0x0800103d
 80012b4:	2000022c 	.word	0x2000022c

080012b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012b8:	b500      	push	{lr}
 80012ba:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012bc:	2200      	movs	r2, #0
 80012be:	9200      	str	r2, [sp, #0]
 80012c0:	4b0d      	ldr	r3, [pc, #52]	; (80012f8 <HAL_MspInit+0x40>)
 80012c2:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80012c4:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80012c8:	6459      	str	r1, [r3, #68]	; 0x44
 80012ca:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80012cc:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 80012d0:	9100      	str	r1, [sp, #0]
 80012d2:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012d4:	9201      	str	r2, [sp, #4]
 80012d6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80012d8:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80012dc:	6419      	str	r1, [r3, #64]	; 0x40
 80012de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012e4:	9301      	str	r3, [sp, #4]
 80012e6:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80012e8:	210f      	movs	r1, #15
 80012ea:	f06f 0001 	mvn.w	r0, #1
 80012ee:	f000 f93f 	bl	8001570 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012f2:	b003      	add	sp, #12
 80012f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80012f8:	40023800 	.word	0x40023800

080012fc <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM4)
 80012fc:	6802      	ldr	r2, [r0, #0]
 80012fe:	4b0e      	ldr	r3, [pc, #56]	; (8001338 <HAL_TIM_Base_MspInit+0x3c>)
 8001300:	429a      	cmp	r2, r3
 8001302:	d000      	beq.n	8001306 <HAL_TIM_Base_MspInit+0xa>
 8001304:	4770      	bx	lr
{
 8001306:	b500      	push	{lr}
 8001308:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800130a:	2200      	movs	r2, #0
 800130c:	9201      	str	r2, [sp, #4]
 800130e:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8001312:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001314:	f041 0104 	orr.w	r1, r1, #4
 8001318:	6419      	str	r1, [r3, #64]	; 0x40
 800131a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131c:	f003 0304 	and.w	r3, r3, #4
 8001320:	9301      	str	r3, [sp, #4]
 8001322:	9b01      	ldr	r3, [sp, #4]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8001324:	2105      	movs	r1, #5
 8001326:	201e      	movs	r0, #30
 8001328:	f000 f922 	bl	8001570 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800132c:	201e      	movs	r0, #30
 800132e:	f000 f957 	bl	80015e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001332:	b003      	add	sp, #12
 8001334:	f85d fb04 	ldr.w	pc, [sp], #4
 8001338:	40000800 	.word	0x40000800

0800133c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800133c:	b530      	push	{r4, r5, lr}
 800133e:	b089      	sub	sp, #36	; 0x24
 8001340:	4604      	mov	r4, r0
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	9301      	str	r3, [sp, #4]
 8001346:	4b21      	ldr	r3, [pc, #132]	; (80013cc <HAL_InitTick+0x90>)
 8001348:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800134a:	f042 0220 	orr.w	r2, r2, #32
 800134e:	641a      	str	r2, [r3, #64]	; 0x40
 8001350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001352:	f003 0320 	and.w	r3, r3, #32
 8001356:	9301      	str	r3, [sp, #4]
 8001358:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800135a:	a902      	add	r1, sp, #8
 800135c:	a803      	add	r0, sp, #12
 800135e:	f000 fc7d 	bl	8001c5c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001362:	9b06      	ldr	r3, [sp, #24]
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001364:	b9cb      	cbnz	r3, 800139a <HAL_InitTick+0x5e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001366:	f000 fc69 	bl	8001c3c <HAL_RCC_GetPCLK1Freq>
 800136a:	4603      	mov	r3, r0
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800136c:	4a18      	ldr	r2, [pc, #96]	; (80013d0 <HAL_InitTick+0x94>)
 800136e:	fba2 2303 	umull	r2, r3, r2, r3
 8001372:	0c9b      	lsrs	r3, r3, #18
 8001374:	3b01      	subs	r3, #1

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8001376:	4817      	ldr	r0, [pc, #92]	; (80013d4 <HAL_InitTick+0x98>)
 8001378:	4a17      	ldr	r2, [pc, #92]	; (80013d8 <HAL_InitTick+0x9c>)
 800137a:	6002      	str	r2, [r0, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 800137c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001380:	60c2      	str	r2, [r0, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8001382:	6043      	str	r3, [r0, #4]
  htim7.Init.ClockDivision = 0;
 8001384:	2300      	movs	r3, #0
 8001386:	6103      	str	r3, [r0, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001388:	6083      	str	r3, [r0, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800138a:	6183      	str	r3, [r0, #24]

  status = HAL_TIM_Base_Init(&htim7);
 800138c:	f000 fe1e 	bl	8001fcc <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 8001390:	4605      	mov	r5, r0
 8001392:	b130      	cbz	r0, 80013a2 <HAL_InitTick+0x66>
    }
  }

 /* Return function status */
  return status;
}
 8001394:	4628      	mov	r0, r5
 8001396:	b009      	add	sp, #36	; 0x24
 8001398:	bd30      	pop	{r4, r5, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800139a:	f000 fc4f 	bl	8001c3c <HAL_RCC_GetPCLK1Freq>
 800139e:	0043      	lsls	r3, r0, #1
 80013a0:	e7e4      	b.n	800136c <HAL_InitTick+0x30>
    status = HAL_TIM_Base_Start_IT(&htim7);
 80013a2:	480c      	ldr	r0, [pc, #48]	; (80013d4 <HAL_InitTick+0x98>)
 80013a4:	f000 fca8 	bl	8001cf8 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 80013a8:	4605      	mov	r5, r0
 80013aa:	2800      	cmp	r0, #0
 80013ac:	d1f2      	bne.n	8001394 <HAL_InitTick+0x58>
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80013ae:	2037      	movs	r0, #55	; 0x37
 80013b0:	f000 f916 	bl	80015e0 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013b4:	2c0f      	cmp	r4, #15
 80013b6:	d901      	bls.n	80013bc <HAL_InitTick+0x80>
        status = HAL_ERROR;
 80013b8:	2501      	movs	r5, #1
 80013ba:	e7eb      	b.n	8001394 <HAL_InitTick+0x58>
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 80013bc:	2200      	movs	r2, #0
 80013be:	4621      	mov	r1, r4
 80013c0:	2037      	movs	r0, #55	; 0x37
 80013c2:	f000 f8d5 	bl	8001570 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013c6:	4b05      	ldr	r3, [pc, #20]	; (80013dc <HAL_InitTick+0xa0>)
 80013c8:	601c      	str	r4, [r3, #0]
 80013ca:	e7e3      	b.n	8001394 <HAL_InitTick+0x58>
 80013cc:	40023800 	.word	0x40023800
 80013d0:	431bde83 	.word	0x431bde83
 80013d4:	2000028c 	.word	0x2000028c
 80013d8:	40001400 	.word	0x40001400
 80013dc:	20000008 	.word	0x20000008

080013e0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013e0:	e7fe      	b.n	80013e0 <NMI_Handler>

080013e2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013e2:	e7fe      	b.n	80013e2 <HardFault_Handler>

080013e4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013e4:	e7fe      	b.n	80013e4 <MemManage_Handler>

080013e6 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013e6:	e7fe      	b.n	80013e6 <BusFault_Handler>

080013e8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013e8:	e7fe      	b.n	80013e8 <UsageFault_Handler>

080013ea <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013ea:	4770      	bx	lr

080013ec <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80013ec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80013ee:	4802      	ldr	r0, [pc, #8]	; (80013f8 <TIM4_IRQHandler+0xc>)
 80013f0:	f000 fcca 	bl	8001d88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80013f4:	bd08      	pop	{r3, pc}
 80013f6:	bf00      	nop
 80013f8:	20000238 	.word	0x20000238

080013fc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80013fc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80013fe:	4802      	ldr	r0, [pc, #8]	; (8001408 <TIM7_IRQHandler+0xc>)
 8001400:	f000 fcc2 	bl	8001d88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001404:	bd08      	pop	{r3, pc}
 8001406:	bf00      	nop
 8001408:	2000028c 	.word	0x2000028c

0800140c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800140c:	b570      	push	{r4, r5, r6, lr}
 800140e:	460c      	mov	r4, r1
 8001410:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001412:	2500      	movs	r5, #0
 8001414:	e006      	b.n	8001424 <_read+0x18>
  {
    *ptr++ = __io_getchar();
 8001416:	f3af 8000 	nop.w
 800141a:	4621      	mov	r1, r4
 800141c:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001420:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 8001422:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001424:	42b5      	cmp	r5, r6
 8001426:	dbf6      	blt.n	8001416 <_read+0xa>
  }

  return len;
}
 8001428:	4630      	mov	r0, r6
 800142a:	bd70      	pop	{r4, r5, r6, pc}

0800142c <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 800142c:	f04f 30ff 	mov.w	r0, #4294967295
 8001430:	4770      	bx	lr

08001432 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8001432:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001436:	604b      	str	r3, [r1, #4]
  return 0;
}
 8001438:	2000      	movs	r0, #0
 800143a:	4770      	bx	lr

0800143c <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 800143c:	2001      	movs	r0, #1
 800143e:	4770      	bx	lr

08001440 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8001440:	2000      	movs	r0, #0
 8001442:	4770      	bx	lr

08001444 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001444:	b510      	push	{r4, lr}
 8001446:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001448:	4a0c      	ldr	r2, [pc, #48]	; (800147c <_sbrk+0x38>)
 800144a:	490d      	ldr	r1, [pc, #52]	; (8001480 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800144c:	480d      	ldr	r0, [pc, #52]	; (8001484 <_sbrk+0x40>)
 800144e:	6800      	ldr	r0, [r0, #0]
 8001450:	b140      	cbz	r0, 8001464 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001452:	480c      	ldr	r0, [pc, #48]	; (8001484 <_sbrk+0x40>)
 8001454:	6800      	ldr	r0, [r0, #0]
 8001456:	4403      	add	r3, r0
 8001458:	1a52      	subs	r2, r2, r1
 800145a:	4293      	cmp	r3, r2
 800145c:	d806      	bhi.n	800146c <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800145e:	4a09      	ldr	r2, [pc, #36]	; (8001484 <_sbrk+0x40>)
 8001460:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8001462:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001464:	4807      	ldr	r0, [pc, #28]	; (8001484 <_sbrk+0x40>)
 8001466:	4c08      	ldr	r4, [pc, #32]	; (8001488 <_sbrk+0x44>)
 8001468:	6004      	str	r4, [r0, #0]
 800146a:	e7f2      	b.n	8001452 <_sbrk+0xe>
    errno = ENOMEM;
 800146c:	f004 fefe 	bl	800626c <__errno>
 8001470:	230c      	movs	r3, #12
 8001472:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001474:	f04f 30ff 	mov.w	r0, #4294967295
 8001478:	e7f3      	b.n	8001462 <_sbrk+0x1e>
 800147a:	bf00      	nop
 800147c:	20030000 	.word	0x20030000
 8001480:	00000400 	.word	0x00000400
 8001484:	200002d4 	.word	0x200002d4
 8001488:	20004e20 	.word	0x20004e20

0800148c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800148c:	4a03      	ldr	r2, [pc, #12]	; (800149c <SystemInit+0x10>)
 800148e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001492:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001496:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800149a:	4770      	bx	lr
 800149c:	e000ed00 	.word	0xe000ed00

080014a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80014a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014d8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014a4:	480d      	ldr	r0, [pc, #52]	; (80014dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014a6:	490e      	ldr	r1, [pc, #56]	; (80014e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014a8:	4a0e      	ldr	r2, [pc, #56]	; (80014e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014ac:	e002      	b.n	80014b4 <LoopCopyDataInit>

080014ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014b2:	3304      	adds	r3, #4

080014b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014b8:	d3f9      	bcc.n	80014ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ba:	4a0b      	ldr	r2, [pc, #44]	; (80014e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014bc:	4c0b      	ldr	r4, [pc, #44]	; (80014ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80014be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014c0:	e001      	b.n	80014c6 <LoopFillZerobss>

080014c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014c4:	3204      	adds	r2, #4

080014c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014c8:	d3fb      	bcc.n	80014c2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014ca:	f7ff ffdf 	bl	800148c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014ce:	f004 fed3 	bl	8006278 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014d2:	f7ff febb 	bl	800124c <main>
  bx  lr    
 80014d6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80014d8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80014dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014e0:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80014e4:	08009f48 	.word	0x08009f48
  ldr r2, =_sbss
 80014e8:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80014ec:	20004e20 	.word	0x20004e20

080014f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014f0:	e7fe      	b.n	80014f0 <ADC_IRQHandler>
	...

080014f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014f4:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014f6:	4b0b      	ldr	r3, [pc, #44]	; (8001524 <HAL_Init+0x30>)
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014fe:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001506:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800150e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001510:	2003      	movs	r0, #3
 8001512:	f000 f81b 	bl	800154c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001516:	200f      	movs	r0, #15
 8001518:	f7ff ff10 	bl	800133c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800151c:	f7ff fecc 	bl	80012b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8001520:	2000      	movs	r0, #0
 8001522:	bd08      	pop	{r3, pc}
 8001524:	40023c00 	.word	0x40023c00

08001528 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001528:	4a03      	ldr	r2, [pc, #12]	; (8001538 <HAL_IncTick+0x10>)
 800152a:	6811      	ldr	r1, [r2, #0]
 800152c:	4b03      	ldr	r3, [pc, #12]	; (800153c <HAL_IncTick+0x14>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	440b      	add	r3, r1
 8001532:	6013      	str	r3, [r2, #0]
}
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	200002d8 	.word	0x200002d8
 800153c:	20000004 	.word	0x20000004

08001540 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001540:	4b01      	ldr	r3, [pc, #4]	; (8001548 <HAL_GetTick+0x8>)
 8001542:	6818      	ldr	r0, [r3, #0]
}
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	200002d8 	.word	0x200002d8

0800154c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800154c:	4a07      	ldr	r2, [pc, #28]	; (800156c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800154e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001550:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001554:	041b      	lsls	r3, r3, #16
 8001556:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001558:	0200      	lsls	r0, r0, #8
 800155a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800155e:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8001560:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001564:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001568:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800156a:	4770      	bx	lr
 800156c:	e000ed00 	.word	0xe000ed00

08001570 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001570:	b500      	push	{lr}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001572:	4b19      	ldr	r3, [pc, #100]	; (80015d8 <HAL_NVIC_SetPriority+0x68>)
 8001574:	68db      	ldr	r3, [r3, #12]
 8001576:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800157a:	f1c3 0c07 	rsb	ip, r3, #7
 800157e:	f1bc 0f04 	cmp.w	ip, #4
 8001582:	bf28      	it	cs
 8001584:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001588:	f103 0e04 	add.w	lr, r3, #4
 800158c:	f1be 0f06 	cmp.w	lr, #6
 8001590:	d918      	bls.n	80015c4 <HAL_NVIC_SetPriority+0x54>
 8001592:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001594:	f04f 3eff 	mov.w	lr, #4294967295
 8001598:	fa0e fc0c 	lsl.w	ip, lr, ip
 800159c:	ea21 010c 	bic.w	r1, r1, ip
 80015a0:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015a2:	fa0e fe03 	lsl.w	lr, lr, r3
 80015a6:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015aa:	430a      	orrs	r2, r1
  if ((int32_t)(IRQn) >= 0)
 80015ac:	2800      	cmp	r0, #0
 80015ae:	db0b      	blt.n	80015c8 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b0:	0112      	lsls	r2, r2, #4
 80015b2:	b2d2      	uxtb	r2, r2
 80015b4:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80015b8:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80015bc:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80015c0:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015c4:	2300      	movs	r3, #0
 80015c6:	e7e5      	b.n	8001594 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015c8:	f000 000f 	and.w	r0, r0, #15
 80015cc:	0112      	lsls	r2, r2, #4
 80015ce:	b2d2      	uxtb	r2, r2
 80015d0:	4b02      	ldr	r3, [pc, #8]	; (80015dc <HAL_NVIC_SetPriority+0x6c>)
 80015d2:	541a      	strb	r2, [r3, r0]
 80015d4:	e7f4      	b.n	80015c0 <HAL_NVIC_SetPriority+0x50>
 80015d6:	bf00      	nop
 80015d8:	e000ed00 	.word	0xe000ed00
 80015dc:	e000ed14 	.word	0xe000ed14

080015e0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80015e0:	2800      	cmp	r0, #0
 80015e2:	db07      	blt.n	80015f4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015e4:	f000 021f 	and.w	r2, r0, #31
 80015e8:	0940      	lsrs	r0, r0, #5
 80015ea:	2301      	movs	r3, #1
 80015ec:	4093      	lsls	r3, r2
 80015ee:	4a02      	ldr	r2, [pc, #8]	; (80015f8 <HAL_NVIC_EnableIRQ+0x18>)
 80015f0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	e000e100 	.word	0xe000e100

080015fc <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015fc:	2800      	cmp	r0, #0
 80015fe:	f000 81e0 	beq.w	80019c2 <HAL_RCC_OscConfig+0x3c6>
{
 8001602:	b570      	push	{r4, r5, r6, lr}
 8001604:	b082      	sub	sp, #8
 8001606:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001608:	6803      	ldr	r3, [r0, #0]
 800160a:	f013 0f01 	tst.w	r3, #1
 800160e:	d03b      	beq.n	8001688 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001610:	4b9f      	ldr	r3, [pc, #636]	; (8001890 <HAL_RCC_OscConfig+0x294>)
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	f003 030c 	and.w	r3, r3, #12
 8001618:	2b04      	cmp	r3, #4
 800161a:	d02c      	beq.n	8001676 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800161c:	4b9c      	ldr	r3, [pc, #624]	; (8001890 <HAL_RCC_OscConfig+0x294>)
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001624:	2b08      	cmp	r3, #8
 8001626:	d021      	beq.n	800166c <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001628:	6863      	ldr	r3, [r4, #4]
 800162a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800162e:	d04f      	beq.n	80016d0 <HAL_RCC_OscConfig+0xd4>
 8001630:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001634:	d052      	beq.n	80016dc <HAL_RCC_OscConfig+0xe0>
 8001636:	4b96      	ldr	r3, [pc, #600]	; (8001890 <HAL_RCC_OscConfig+0x294>)
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001646:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001648:	6863      	ldr	r3, [r4, #4]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d050      	beq.n	80016f0 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800164e:	f7ff ff77 	bl	8001540 <HAL_GetTick>
 8001652:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001654:	4b8e      	ldr	r3, [pc, #568]	; (8001890 <HAL_RCC_OscConfig+0x294>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800165c:	d114      	bne.n	8001688 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800165e:	f7ff ff6f 	bl	8001540 <HAL_GetTick>
 8001662:	1b40      	subs	r0, r0, r5
 8001664:	2864      	cmp	r0, #100	; 0x64
 8001666:	d9f5      	bls.n	8001654 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8001668:	2003      	movs	r0, #3
 800166a:	e1b1      	b.n	80019d0 <HAL_RCC_OscConfig+0x3d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800166c:	4b88      	ldr	r3, [pc, #544]	; (8001890 <HAL_RCC_OscConfig+0x294>)
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001674:	d0d8      	beq.n	8001628 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001676:	4b86      	ldr	r3, [pc, #536]	; (8001890 <HAL_RCC_OscConfig+0x294>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800167e:	d003      	beq.n	8001688 <HAL_RCC_OscConfig+0x8c>
 8001680:	6863      	ldr	r3, [r4, #4]
 8001682:	2b00      	cmp	r3, #0
 8001684:	f000 819f 	beq.w	80019c6 <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001688:	6823      	ldr	r3, [r4, #0]
 800168a:	f013 0f02 	tst.w	r3, #2
 800168e:	d054      	beq.n	800173a <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001690:	4b7f      	ldr	r3, [pc, #508]	; (8001890 <HAL_RCC_OscConfig+0x294>)
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	f013 0f0c 	tst.w	r3, #12
 8001698:	d03e      	beq.n	8001718 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800169a:	4b7d      	ldr	r3, [pc, #500]	; (8001890 <HAL_RCC_OscConfig+0x294>)
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016a2:	2b08      	cmp	r3, #8
 80016a4:	d033      	beq.n	800170e <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80016a6:	68e3      	ldr	r3, [r4, #12]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d068      	beq.n	800177e <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016ac:	4b79      	ldr	r3, [pc, #484]	; (8001894 <HAL_RCC_OscConfig+0x298>)
 80016ae:	2201      	movs	r2, #1
 80016b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016b2:	f7ff ff45 	bl	8001540 <HAL_GetTick>
 80016b6:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016b8:	4b75      	ldr	r3, [pc, #468]	; (8001890 <HAL_RCC_OscConfig+0x294>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f013 0f02 	tst.w	r3, #2
 80016c0:	d154      	bne.n	800176c <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016c2:	f7ff ff3d 	bl	8001540 <HAL_GetTick>
 80016c6:	1b40      	subs	r0, r0, r5
 80016c8:	2802      	cmp	r0, #2
 80016ca:	d9f5      	bls.n	80016b8 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80016cc:	2003      	movs	r0, #3
 80016ce:	e17f      	b.n	80019d0 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016d0:	4a6f      	ldr	r2, [pc, #444]	; (8001890 <HAL_RCC_OscConfig+0x294>)
 80016d2:	6813      	ldr	r3, [r2, #0]
 80016d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016d8:	6013      	str	r3, [r2, #0]
 80016da:	e7b5      	b.n	8001648 <HAL_RCC_OscConfig+0x4c>
 80016dc:	4b6c      	ldr	r3, [pc, #432]	; (8001890 <HAL_RCC_OscConfig+0x294>)
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80016ec:	601a      	str	r2, [r3, #0]
 80016ee:	e7ab      	b.n	8001648 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 80016f0:	f7ff ff26 	bl	8001540 <HAL_GetTick>
 80016f4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016f6:	4b66      	ldr	r3, [pc, #408]	; (8001890 <HAL_RCC_OscConfig+0x294>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80016fe:	d0c3      	beq.n	8001688 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001700:	f7ff ff1e 	bl	8001540 <HAL_GetTick>
 8001704:	1b40      	subs	r0, r0, r5
 8001706:	2864      	cmp	r0, #100	; 0x64
 8001708:	d9f5      	bls.n	80016f6 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 800170a:	2003      	movs	r0, #3
 800170c:	e160      	b.n	80019d0 <HAL_RCC_OscConfig+0x3d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800170e:	4b60      	ldr	r3, [pc, #384]	; (8001890 <HAL_RCC_OscConfig+0x294>)
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001716:	d1c6      	bne.n	80016a6 <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001718:	4b5d      	ldr	r3, [pc, #372]	; (8001890 <HAL_RCC_OscConfig+0x294>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f013 0f02 	tst.w	r3, #2
 8001720:	d003      	beq.n	800172a <HAL_RCC_OscConfig+0x12e>
 8001722:	68e3      	ldr	r3, [r4, #12]
 8001724:	2b01      	cmp	r3, #1
 8001726:	f040 8150 	bne.w	80019ca <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800172a:	4a59      	ldr	r2, [pc, #356]	; (8001890 <HAL_RCC_OscConfig+0x294>)
 800172c:	6813      	ldr	r3, [r2, #0]
 800172e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001732:	6921      	ldr	r1, [r4, #16]
 8001734:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001738:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800173a:	6823      	ldr	r3, [r4, #0]
 800173c:	f013 0f08 	tst.w	r3, #8
 8001740:	d042      	beq.n	80017c8 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001742:	6963      	ldr	r3, [r4, #20]
 8001744:	b36b      	cbz	r3, 80017a2 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001746:	4b53      	ldr	r3, [pc, #332]	; (8001894 <HAL_RCC_OscConfig+0x298>)
 8001748:	2201      	movs	r2, #1
 800174a:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800174e:	f7ff fef7 	bl	8001540 <HAL_GetTick>
 8001752:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001754:	4b4e      	ldr	r3, [pc, #312]	; (8001890 <HAL_RCC_OscConfig+0x294>)
 8001756:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001758:	f013 0f02 	tst.w	r3, #2
 800175c:	d134      	bne.n	80017c8 <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800175e:	f7ff feef 	bl	8001540 <HAL_GetTick>
 8001762:	1b40      	subs	r0, r0, r5
 8001764:	2802      	cmp	r0, #2
 8001766:	d9f5      	bls.n	8001754 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8001768:	2003      	movs	r0, #3
 800176a:	e131      	b.n	80019d0 <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800176c:	4a48      	ldr	r2, [pc, #288]	; (8001890 <HAL_RCC_OscConfig+0x294>)
 800176e:	6813      	ldr	r3, [r2, #0]
 8001770:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001774:	6921      	ldr	r1, [r4, #16]
 8001776:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800177a:	6013      	str	r3, [r2, #0]
 800177c:	e7dd      	b.n	800173a <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 800177e:	4b45      	ldr	r3, [pc, #276]	; (8001894 <HAL_RCC_OscConfig+0x298>)
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001784:	f7ff fedc 	bl	8001540 <HAL_GetTick>
 8001788:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800178a:	4b41      	ldr	r3, [pc, #260]	; (8001890 <HAL_RCC_OscConfig+0x294>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f013 0f02 	tst.w	r3, #2
 8001792:	d0d2      	beq.n	800173a <HAL_RCC_OscConfig+0x13e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001794:	f7ff fed4 	bl	8001540 <HAL_GetTick>
 8001798:	1b40      	subs	r0, r0, r5
 800179a:	2802      	cmp	r0, #2
 800179c:	d9f5      	bls.n	800178a <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 800179e:	2003      	movs	r0, #3
 80017a0:	e116      	b.n	80019d0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017a2:	4b3c      	ldr	r3, [pc, #240]	; (8001894 <HAL_RCC_OscConfig+0x298>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017aa:	f7ff fec9 	bl	8001540 <HAL_GetTick>
 80017ae:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017b0:	4b37      	ldr	r3, [pc, #220]	; (8001890 <HAL_RCC_OscConfig+0x294>)
 80017b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017b4:	f013 0f02 	tst.w	r3, #2
 80017b8:	d006      	beq.n	80017c8 <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017ba:	f7ff fec1 	bl	8001540 <HAL_GetTick>
 80017be:	1b40      	subs	r0, r0, r5
 80017c0:	2802      	cmp	r0, #2
 80017c2:	d9f5      	bls.n	80017b0 <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 80017c4:	2003      	movs	r0, #3
 80017c6:	e103      	b.n	80019d0 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017c8:	6823      	ldr	r3, [r4, #0]
 80017ca:	f013 0f04 	tst.w	r3, #4
 80017ce:	d077      	beq.n	80018c0 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017d0:	4b2f      	ldr	r3, [pc, #188]	; (8001890 <HAL_RCC_OscConfig+0x294>)
 80017d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d4:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80017d8:	d133      	bne.n	8001842 <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	9301      	str	r3, [sp, #4]
 80017de:	4b2c      	ldr	r3, [pc, #176]	; (8001890 <HAL_RCC_OscConfig+0x294>)
 80017e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017e2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80017e6:	641a      	str	r2, [r3, #64]	; 0x40
 80017e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ee:	9301      	str	r3, [sp, #4]
 80017f0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80017f2:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017f4:	4b28      	ldr	r3, [pc, #160]	; (8001898 <HAL_RCC_OscConfig+0x29c>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80017fc:	d023      	beq.n	8001846 <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017fe:	68a3      	ldr	r3, [r4, #8]
 8001800:	2b01      	cmp	r3, #1
 8001802:	d034      	beq.n	800186e <HAL_RCC_OscConfig+0x272>
 8001804:	2b05      	cmp	r3, #5
 8001806:	d038      	beq.n	800187a <HAL_RCC_OscConfig+0x27e>
 8001808:	4b21      	ldr	r3, [pc, #132]	; (8001890 <HAL_RCC_OscConfig+0x294>)
 800180a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800180c:	f022 0201 	bic.w	r2, r2, #1
 8001810:	671a      	str	r2, [r3, #112]	; 0x70
 8001812:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001814:	f022 0204 	bic.w	r2, r2, #4
 8001818:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800181a:	68a3      	ldr	r3, [r4, #8]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d03d      	beq.n	800189c <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001820:	f7ff fe8e 	bl	8001540 <HAL_GetTick>
 8001824:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001826:	4b1a      	ldr	r3, [pc, #104]	; (8001890 <HAL_RCC_OscConfig+0x294>)
 8001828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800182a:	f013 0f02 	tst.w	r3, #2
 800182e:	d146      	bne.n	80018be <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001830:	f7ff fe86 	bl	8001540 <HAL_GetTick>
 8001834:	1b80      	subs	r0, r0, r6
 8001836:	f241 3388 	movw	r3, #5000	; 0x1388
 800183a:	4298      	cmp	r0, r3
 800183c:	d9f3      	bls.n	8001826 <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 800183e:	2003      	movs	r0, #3
 8001840:	e0c6      	b.n	80019d0 <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 8001842:	2500      	movs	r5, #0
 8001844:	e7d6      	b.n	80017f4 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001846:	4a14      	ldr	r2, [pc, #80]	; (8001898 <HAL_RCC_OscConfig+0x29c>)
 8001848:	6813      	ldr	r3, [r2, #0]
 800184a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800184e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001850:	f7ff fe76 	bl	8001540 <HAL_GetTick>
 8001854:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001856:	4b10      	ldr	r3, [pc, #64]	; (8001898 <HAL_RCC_OscConfig+0x29c>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800185e:	d1ce      	bne.n	80017fe <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001860:	f7ff fe6e 	bl	8001540 <HAL_GetTick>
 8001864:	1b80      	subs	r0, r0, r6
 8001866:	2802      	cmp	r0, #2
 8001868:	d9f5      	bls.n	8001856 <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 800186a:	2003      	movs	r0, #3
 800186c:	e0b0      	b.n	80019d0 <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800186e:	4a08      	ldr	r2, [pc, #32]	; (8001890 <HAL_RCC_OscConfig+0x294>)
 8001870:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001872:	f043 0301 	orr.w	r3, r3, #1
 8001876:	6713      	str	r3, [r2, #112]	; 0x70
 8001878:	e7cf      	b.n	800181a <HAL_RCC_OscConfig+0x21e>
 800187a:	4b05      	ldr	r3, [pc, #20]	; (8001890 <HAL_RCC_OscConfig+0x294>)
 800187c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800187e:	f042 0204 	orr.w	r2, r2, #4
 8001882:	671a      	str	r2, [r3, #112]	; 0x70
 8001884:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001886:	f042 0201 	orr.w	r2, r2, #1
 800188a:	671a      	str	r2, [r3, #112]	; 0x70
 800188c:	e7c5      	b.n	800181a <HAL_RCC_OscConfig+0x21e>
 800188e:	bf00      	nop
 8001890:	40023800 	.word	0x40023800
 8001894:	42470000 	.word	0x42470000
 8001898:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800189c:	f7ff fe50 	bl	8001540 <HAL_GetTick>
 80018a0:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018a2:	4b52      	ldr	r3, [pc, #328]	; (80019ec <HAL_RCC_OscConfig+0x3f0>)
 80018a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018a6:	f013 0f02 	tst.w	r3, #2
 80018aa:	d008      	beq.n	80018be <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018ac:	f7ff fe48 	bl	8001540 <HAL_GetTick>
 80018b0:	1b80      	subs	r0, r0, r6
 80018b2:	f241 3388 	movw	r3, #5000	; 0x1388
 80018b6:	4298      	cmp	r0, r3
 80018b8:	d9f3      	bls.n	80018a2 <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 80018ba:	2003      	movs	r0, #3
 80018bc:	e088      	b.n	80019d0 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80018be:	b9ed      	cbnz	r5, 80018fc <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018c0:	69a3      	ldr	r3, [r4, #24]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	f000 8083 	beq.w	80019ce <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80018c8:	4a48      	ldr	r2, [pc, #288]	; (80019ec <HAL_RCC_OscConfig+0x3f0>)
 80018ca:	6892      	ldr	r2, [r2, #8]
 80018cc:	f002 020c 	and.w	r2, r2, #12
 80018d0:	2a08      	cmp	r2, #8
 80018d2:	d051      	beq.n	8001978 <HAL_RCC_OscConfig+0x37c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d017      	beq.n	8001908 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018d8:	4b45      	ldr	r3, [pc, #276]	; (80019f0 <HAL_RCC_OscConfig+0x3f4>)
 80018da:	2200      	movs	r2, #0
 80018dc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018de:	f7ff fe2f 	bl	8001540 <HAL_GetTick>
 80018e2:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018e4:	4b41      	ldr	r3, [pc, #260]	; (80019ec <HAL_RCC_OscConfig+0x3f0>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80018ec:	d042      	beq.n	8001974 <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018ee:	f7ff fe27 	bl	8001540 <HAL_GetTick>
 80018f2:	1b00      	subs	r0, r0, r4
 80018f4:	2802      	cmp	r0, #2
 80018f6:	d9f5      	bls.n	80018e4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80018f8:	2003      	movs	r0, #3
 80018fa:	e069      	b.n	80019d0 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 80018fc:	4a3b      	ldr	r2, [pc, #236]	; (80019ec <HAL_RCC_OscConfig+0x3f0>)
 80018fe:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001900:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001904:	6413      	str	r3, [r2, #64]	; 0x40
 8001906:	e7db      	b.n	80018c0 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 8001908:	4b39      	ldr	r3, [pc, #228]	; (80019f0 <HAL_RCC_OscConfig+0x3f4>)
 800190a:	2200      	movs	r2, #0
 800190c:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 800190e:	f7ff fe17 	bl	8001540 <HAL_GetTick>
 8001912:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001914:	4b35      	ldr	r3, [pc, #212]	; (80019ec <HAL_RCC_OscConfig+0x3f0>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800191c:	d006      	beq.n	800192c <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800191e:	f7ff fe0f 	bl	8001540 <HAL_GetTick>
 8001922:	1b40      	subs	r0, r0, r5
 8001924:	2802      	cmp	r0, #2
 8001926:	d9f5      	bls.n	8001914 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8001928:	2003      	movs	r0, #3
 800192a:	e051      	b.n	80019d0 <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800192c:	69e3      	ldr	r3, [r4, #28]
 800192e:	6a22      	ldr	r2, [r4, #32]
 8001930:	4313      	orrs	r3, r2
 8001932:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001934:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001938:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800193a:	0852      	lsrs	r2, r2, #1
 800193c:	3a01      	subs	r2, #1
 800193e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001942:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001944:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001948:	4a28      	ldr	r2, [pc, #160]	; (80019ec <HAL_RCC_OscConfig+0x3f0>)
 800194a:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 800194c:	4b28      	ldr	r3, [pc, #160]	; (80019f0 <HAL_RCC_OscConfig+0x3f4>)
 800194e:	2201      	movs	r2, #1
 8001950:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8001952:	f7ff fdf5 	bl	8001540 <HAL_GetTick>
 8001956:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001958:	4b24      	ldr	r3, [pc, #144]	; (80019ec <HAL_RCC_OscConfig+0x3f0>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001960:	d106      	bne.n	8001970 <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001962:	f7ff fded 	bl	8001540 <HAL_GetTick>
 8001966:	1b00      	subs	r0, r0, r4
 8001968:	2802      	cmp	r0, #2
 800196a:	d9f5      	bls.n	8001958 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 800196c:	2003      	movs	r0, #3
 800196e:	e02f      	b.n	80019d0 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8001970:	2000      	movs	r0, #0
 8001972:	e02d      	b.n	80019d0 <HAL_RCC_OscConfig+0x3d4>
 8001974:	2000      	movs	r0, #0
 8001976:	e02b      	b.n	80019d0 <HAL_RCC_OscConfig+0x3d4>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001978:	2b01      	cmp	r3, #1
 800197a:	d02b      	beq.n	80019d4 <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 800197c:	4b1b      	ldr	r3, [pc, #108]	; (80019ec <HAL_RCC_OscConfig+0x3f0>)
 800197e:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001980:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 8001984:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001986:	4291      	cmp	r1, r2
 8001988:	d126      	bne.n	80019d8 <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800198a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800198e:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001990:	428a      	cmp	r2, r1
 8001992:	d123      	bne.n	80019dc <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001994:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001996:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 800199a:	401a      	ands	r2, r3
 800199c:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80019a0:	d11e      	bne.n	80019e0 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019a2:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 80019a6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80019a8:	0852      	lsrs	r2, r2, #1
 80019aa:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019ac:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80019b0:	d118      	bne.n	80019e4 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80019b2:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80019b6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019b8:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 80019bc:	d114      	bne.n	80019e8 <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 80019be:	2000      	movs	r0, #0
 80019c0:	e006      	b.n	80019d0 <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 80019c2:	2001      	movs	r0, #1
}
 80019c4:	4770      	bx	lr
        return HAL_ERROR;
 80019c6:	2001      	movs	r0, #1
 80019c8:	e002      	b.n	80019d0 <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 80019ca:	2001      	movs	r0, #1
 80019cc:	e000      	b.n	80019d0 <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 80019ce:	2000      	movs	r0, #0
}
 80019d0:	b002      	add	sp, #8
 80019d2:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80019d4:	2001      	movs	r0, #1
 80019d6:	e7fb      	b.n	80019d0 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 80019d8:	2001      	movs	r0, #1
 80019da:	e7f9      	b.n	80019d0 <HAL_RCC_OscConfig+0x3d4>
 80019dc:	2001      	movs	r0, #1
 80019de:	e7f7      	b.n	80019d0 <HAL_RCC_OscConfig+0x3d4>
 80019e0:	2001      	movs	r0, #1
 80019e2:	e7f5      	b.n	80019d0 <HAL_RCC_OscConfig+0x3d4>
 80019e4:	2001      	movs	r0, #1
 80019e6:	e7f3      	b.n	80019d0 <HAL_RCC_OscConfig+0x3d4>
 80019e8:	2001      	movs	r0, #1
 80019ea:	e7f1      	b.n	80019d0 <HAL_RCC_OscConfig+0x3d4>
 80019ec:	40023800 	.word	0x40023800
 80019f0:	42470000 	.word	0x42470000

080019f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019f4:	b508      	push	{r3, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019f6:	4b33      	ldr	r3, [pc, #204]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0xd0>)
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	f003 030c 	and.w	r3, r3, #12
 80019fe:	2b04      	cmp	r3, #4
 8001a00:	d05b      	beq.n	8001aba <HAL_RCC_GetSysClockFreq+0xc6>
 8001a02:	2b08      	cmp	r3, #8
 8001a04:	d15b      	bne.n	8001abe <HAL_RCC_GetSysClockFreq+0xca>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a06:	4b2f      	ldr	r3, [pc, #188]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001a08:	685a      	ldr	r2, [r3, #4]
 8001a0a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001a14:	d02c      	beq.n	8001a70 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a16:	4b2b      	ldr	r3, [pc, #172]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001a18:	6858      	ldr	r0, [r3, #4]
 8001a1a:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8001a1e:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8001a22:	ebbc 0c00 	subs.w	ip, ip, r0
 8001a26:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8001a2a:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8001a2e:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8001a32:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8001a36:	ebb1 010c 	subs.w	r1, r1, ip
 8001a3a:	eb63 030e 	sbc.w	r3, r3, lr
 8001a3e:	00db      	lsls	r3, r3, #3
 8001a40:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001a44:	00c9      	lsls	r1, r1, #3
 8001a46:	eb11 0c00 	adds.w	ip, r1, r0
 8001a4a:	f143 0300 	adc.w	r3, r3, #0
 8001a4e:	0259      	lsls	r1, r3, #9
 8001a50:	2300      	movs	r3, #0
 8001a52:	ea4f 204c 	mov.w	r0, ip, lsl #9
 8001a56:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 8001a5a:	f7ff f905 	bl	8000c68 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a5e:	4b19      	ldr	r3, [pc, #100]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001a66:	3301      	adds	r3, #1
 8001a68:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8001a6a:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8001a6e:	e027      	b.n	8001ac0 <HAL_RCC_GetSysClockFreq+0xcc>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a70:	4b14      	ldr	r3, [pc, #80]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001a72:	6858      	ldr	r0, [r3, #4]
 8001a74:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8001a78:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8001a7c:	ebbc 0c00 	subs.w	ip, ip, r0
 8001a80:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8001a84:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8001a88:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8001a8c:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8001a90:	ebb1 010c 	subs.w	r1, r1, ip
 8001a94:	eb63 030e 	sbc.w	r3, r3, lr
 8001a98:	00db      	lsls	r3, r3, #3
 8001a9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001a9e:	00c9      	lsls	r1, r1, #3
 8001aa0:	eb11 0c00 	adds.w	ip, r1, r0
 8001aa4:	f143 0300 	adc.w	r3, r3, #0
 8001aa8:	0299      	lsls	r1, r3, #10
 8001aaa:	2300      	movs	r3, #0
 8001aac:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8001ab0:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8001ab4:	f7ff f8d8 	bl	8000c68 <__aeabi_uldivmod>
 8001ab8:	e7d1      	b.n	8001a5e <HAL_RCC_GetSysClockFreq+0x6a>
      sysclockfreq = HSE_VALUE;
 8001aba:	4803      	ldr	r0, [pc, #12]	; (8001ac8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001abc:	e000      	b.n	8001ac0 <HAL_RCC_GetSysClockFreq+0xcc>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001abe:	4803      	ldr	r0, [pc, #12]	; (8001acc <HAL_RCC_GetSysClockFreq+0xd8>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001ac0:	bd08      	pop	{r3, pc}
 8001ac2:	bf00      	nop
 8001ac4:	40023800 	.word	0x40023800
 8001ac8:	007a1200 	.word	0x007a1200
 8001acc:	00f42400 	.word	0x00f42400

08001ad0 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8001ad0:	2800      	cmp	r0, #0
 8001ad2:	f000 809b 	beq.w	8001c0c <HAL_RCC_ClockConfig+0x13c>
{
 8001ad6:	b570      	push	{r4, r5, r6, lr}
 8001ad8:	460d      	mov	r5, r1
 8001ada:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001adc:	4b4f      	ldr	r3, [pc, #316]	; (8001c1c <HAL_RCC_ClockConfig+0x14c>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 030f 	and.w	r3, r3, #15
 8001ae4:	428b      	cmp	r3, r1
 8001ae6:	d208      	bcs.n	8001afa <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ae8:	b2cb      	uxtb	r3, r1
 8001aea:	4a4c      	ldr	r2, [pc, #304]	; (8001c1c <HAL_RCC_ClockConfig+0x14c>)
 8001aec:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aee:	6813      	ldr	r3, [r2, #0]
 8001af0:	f003 030f 	and.w	r3, r3, #15
 8001af4:	428b      	cmp	r3, r1
 8001af6:	f040 808b 	bne.w	8001c10 <HAL_RCC_ClockConfig+0x140>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001afa:	6823      	ldr	r3, [r4, #0]
 8001afc:	f013 0f02 	tst.w	r3, #2
 8001b00:	d017      	beq.n	8001b32 <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b02:	f013 0f04 	tst.w	r3, #4
 8001b06:	d004      	beq.n	8001b12 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b08:	4a45      	ldr	r2, [pc, #276]	; (8001c20 <HAL_RCC_ClockConfig+0x150>)
 8001b0a:	6893      	ldr	r3, [r2, #8]
 8001b0c:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b10:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b12:	6823      	ldr	r3, [r4, #0]
 8001b14:	f013 0f08 	tst.w	r3, #8
 8001b18:	d004      	beq.n	8001b24 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b1a:	4a41      	ldr	r2, [pc, #260]	; (8001c20 <HAL_RCC_ClockConfig+0x150>)
 8001b1c:	6893      	ldr	r3, [r2, #8]
 8001b1e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b22:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b24:	4a3e      	ldr	r2, [pc, #248]	; (8001c20 <HAL_RCC_ClockConfig+0x150>)
 8001b26:	6893      	ldr	r3, [r2, #8]
 8001b28:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b2c:	68a1      	ldr	r1, [r4, #8]
 8001b2e:	430b      	orrs	r3, r1
 8001b30:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b32:	6823      	ldr	r3, [r4, #0]
 8001b34:	f013 0f01 	tst.w	r3, #1
 8001b38:	d032      	beq.n	8001ba0 <HAL_RCC_ClockConfig+0xd0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b3a:	6863      	ldr	r3, [r4, #4]
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d021      	beq.n	8001b84 <HAL_RCC_ClockConfig+0xb4>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b40:	1e9a      	subs	r2, r3, #2
 8001b42:	2a01      	cmp	r2, #1
 8001b44:	d925      	bls.n	8001b92 <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b46:	4a36      	ldr	r2, [pc, #216]	; (8001c20 <HAL_RCC_ClockConfig+0x150>)
 8001b48:	6812      	ldr	r2, [r2, #0]
 8001b4a:	f012 0f02 	tst.w	r2, #2
 8001b4e:	d061      	beq.n	8001c14 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b50:	4933      	ldr	r1, [pc, #204]	; (8001c20 <HAL_RCC_ClockConfig+0x150>)
 8001b52:	688a      	ldr	r2, [r1, #8]
 8001b54:	f022 0203 	bic.w	r2, r2, #3
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8001b5c:	f7ff fcf0 	bl	8001540 <HAL_GetTick>
 8001b60:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b62:	4b2f      	ldr	r3, [pc, #188]	; (8001c20 <HAL_RCC_ClockConfig+0x150>)
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	f003 030c 	and.w	r3, r3, #12
 8001b6a:	6862      	ldr	r2, [r4, #4]
 8001b6c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001b70:	d016      	beq.n	8001ba0 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b72:	f7ff fce5 	bl	8001540 <HAL_GetTick>
 8001b76:	1b80      	subs	r0, r0, r6
 8001b78:	f241 3388 	movw	r3, #5000	; 0x1388
 8001b7c:	4298      	cmp	r0, r3
 8001b7e:	d9f0      	bls.n	8001b62 <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8001b80:	2003      	movs	r0, #3
 8001b82:	e042      	b.n	8001c0a <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b84:	4a26      	ldr	r2, [pc, #152]	; (8001c20 <HAL_RCC_ClockConfig+0x150>)
 8001b86:	6812      	ldr	r2, [r2, #0]
 8001b88:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8001b8c:	d1e0      	bne.n	8001b50 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8001b8e:	2001      	movs	r0, #1
 8001b90:	e03b      	b.n	8001c0a <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b92:	4a23      	ldr	r2, [pc, #140]	; (8001c20 <HAL_RCC_ClockConfig+0x150>)
 8001b94:	6812      	ldr	r2, [r2, #0]
 8001b96:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001b9a:	d1d9      	bne.n	8001b50 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8001b9c:	2001      	movs	r0, #1
 8001b9e:	e034      	b.n	8001c0a <HAL_RCC_ClockConfig+0x13a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ba0:	4b1e      	ldr	r3, [pc, #120]	; (8001c1c <HAL_RCC_ClockConfig+0x14c>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 030f 	and.w	r3, r3, #15
 8001ba8:	42ab      	cmp	r3, r5
 8001baa:	d907      	bls.n	8001bbc <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bac:	b2ea      	uxtb	r2, r5
 8001bae:	4b1b      	ldr	r3, [pc, #108]	; (8001c1c <HAL_RCC_ClockConfig+0x14c>)
 8001bb0:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 030f 	and.w	r3, r3, #15
 8001bb8:	42ab      	cmp	r3, r5
 8001bba:	d12d      	bne.n	8001c18 <HAL_RCC_ClockConfig+0x148>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bbc:	6823      	ldr	r3, [r4, #0]
 8001bbe:	f013 0f04 	tst.w	r3, #4
 8001bc2:	d006      	beq.n	8001bd2 <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bc4:	4a16      	ldr	r2, [pc, #88]	; (8001c20 <HAL_RCC_ClockConfig+0x150>)
 8001bc6:	6893      	ldr	r3, [r2, #8]
 8001bc8:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001bcc:	68e1      	ldr	r1, [r4, #12]
 8001bce:	430b      	orrs	r3, r1
 8001bd0:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bd2:	6823      	ldr	r3, [r4, #0]
 8001bd4:	f013 0f08 	tst.w	r3, #8
 8001bd8:	d007      	beq.n	8001bea <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bda:	4a11      	ldr	r2, [pc, #68]	; (8001c20 <HAL_RCC_ClockConfig+0x150>)
 8001bdc:	6893      	ldr	r3, [r2, #8]
 8001bde:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001be2:	6921      	ldr	r1, [r4, #16]
 8001be4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001be8:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001bea:	f7ff ff03 	bl	80019f4 <HAL_RCC_GetSysClockFreq>
 8001bee:	4b0c      	ldr	r3, [pc, #48]	; (8001c20 <HAL_RCC_ClockConfig+0x150>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001bf6:	4a0b      	ldr	r2, [pc, #44]	; (8001c24 <HAL_RCC_ClockConfig+0x154>)
 8001bf8:	5cd3      	ldrb	r3, [r2, r3]
 8001bfa:	40d8      	lsrs	r0, r3
 8001bfc:	4b0a      	ldr	r3, [pc, #40]	; (8001c28 <HAL_RCC_ClockConfig+0x158>)
 8001bfe:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8001c00:	4b0a      	ldr	r3, [pc, #40]	; (8001c2c <HAL_RCC_ClockConfig+0x15c>)
 8001c02:	6818      	ldr	r0, [r3, #0]
 8001c04:	f7ff fb9a 	bl	800133c <HAL_InitTick>
  return HAL_OK;
 8001c08:	2000      	movs	r0, #0
}
 8001c0a:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001c0c:	2001      	movs	r0, #1
}
 8001c0e:	4770      	bx	lr
      return HAL_ERROR;
 8001c10:	2001      	movs	r0, #1
 8001c12:	e7fa      	b.n	8001c0a <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8001c14:	2001      	movs	r0, #1
 8001c16:	e7f8      	b.n	8001c0a <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8001c18:	2001      	movs	r0, #1
 8001c1a:	e7f6      	b.n	8001c0a <HAL_RCC_ClockConfig+0x13a>
 8001c1c:	40023c00 	.word	0x40023c00
 8001c20:	40023800 	.word	0x40023800
 8001c24:	08009c70 	.word	0x08009c70
 8001c28:	20000000 	.word	0x20000000
 8001c2c:	20000008 	.word	0x20000008

08001c30 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001c30:	4b01      	ldr	r3, [pc, #4]	; (8001c38 <HAL_RCC_GetHCLKFreq+0x8>)
 8001c32:	6818      	ldr	r0, [r3, #0]
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	20000000 	.word	0x20000000

08001c3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c3c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c3e:	f7ff fff7 	bl	8001c30 <HAL_RCC_GetHCLKFreq>
 8001c42:	4b04      	ldr	r3, [pc, #16]	; (8001c54 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001c4a:	4a03      	ldr	r2, [pc, #12]	; (8001c58 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001c4c:	5cd3      	ldrb	r3, [r2, r3]
}
 8001c4e:	40d8      	lsrs	r0, r3
 8001c50:	bd08      	pop	{r3, pc}
 8001c52:	bf00      	nop
 8001c54:	40023800 	.word	0x40023800
 8001c58:	08009c80 	.word	0x08009c80

08001c5c <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c5c:	230f      	movs	r3, #15
 8001c5e:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c60:	4b0b      	ldr	r3, [pc, #44]	; (8001c90 <HAL_RCC_GetClockConfig+0x34>)
 8001c62:	689a      	ldr	r2, [r3, #8]
 8001c64:	f002 0203 	and.w	r2, r2, #3
 8001c68:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c6a:	689a      	ldr	r2, [r3, #8]
 8001c6c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8001c70:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c72:	689a      	ldr	r2, [r3, #8]
 8001c74:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8001c78:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	08db      	lsrs	r3, r3, #3
 8001c7e:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001c82:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001c84:	4b03      	ldr	r3, [pc, #12]	; (8001c94 <HAL_RCC_GetClockConfig+0x38>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 030f 	and.w	r3, r3, #15
 8001c8c:	600b      	str	r3, [r1, #0]
}
 8001c8e:	4770      	bx	lr
 8001c90:	40023800 	.word	0x40023800
 8001c94:	40023c00 	.word	0x40023c00

08001c98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001c98:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001c9a:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c9c:	6a04      	ldr	r4, [r0, #32]
 8001c9e:	f024 0401 	bic.w	r4, r4, #1
 8001ca2:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001ca4:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001ca6:	f024 0cf0 	bic.w	ip, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001caa:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001cae:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8001cb2:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001cb4:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001cb6:	6203      	str	r3, [r0, #32]
}
 8001cb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001cbc:	4770      	bx	lr

08001cbe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001cbe:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001cc0:	6a03      	ldr	r3, [r0, #32]
 8001cc2:	f023 0310 	bic.w	r3, r3, #16
 8001cc6:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001cc8:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8001cca:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001ccc:	f424 4c70 	bic.w	ip, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001cd0:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001cd4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001cd8:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001cdc:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001cde:	6203      	str	r3, [r0, #32]
}
 8001ce0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001ce4:	4770      	bx	lr

08001ce6 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001ce6:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001ce8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001cec:	430b      	orrs	r3, r1
 8001cee:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001cf2:	6083      	str	r3, [r0, #8]
}
 8001cf4:	4770      	bx	lr
	...

08001cf8 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8001cf8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d137      	bne.n	8001d72 <HAL_TIM_Base_Start_IT+0x7a>
  htim->State = HAL_TIM_STATE_BUSY;
 8001d02:	2302      	movs	r3, #2
 8001d04:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d08:	6802      	ldr	r2, [r0, #0]
 8001d0a:	68d3      	ldr	r3, [r2, #12]
 8001d0c:	f043 0301 	orr.w	r3, r3, #1
 8001d10:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d12:	6803      	ldr	r3, [r0, #0]
 8001d14:	4a19      	ldr	r2, [pc, #100]	; (8001d7c <HAL_TIM_Base_Start_IT+0x84>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d020      	beq.n	8001d5c <HAL_TIM_Base_Start_IT+0x64>
 8001d1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d1e:	d01d      	beq.n	8001d5c <HAL_TIM_Base_Start_IT+0x64>
 8001d20:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d019      	beq.n	8001d5c <HAL_TIM_Base_Start_IT+0x64>
 8001d28:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d015      	beq.n	8001d5c <HAL_TIM_Base_Start_IT+0x64>
 8001d30:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d011      	beq.n	8001d5c <HAL_TIM_Base_Start_IT+0x64>
 8001d38:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d00d      	beq.n	8001d5c <HAL_TIM_Base_Start_IT+0x64>
 8001d40:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d009      	beq.n	8001d5c <HAL_TIM_Base_Start_IT+0x64>
 8001d48:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d005      	beq.n	8001d5c <HAL_TIM_Base_Start_IT+0x64>
    __HAL_TIM_ENABLE(htim);
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	f042 0201 	orr.w	r2, r2, #1
 8001d56:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8001d58:	2000      	movs	r0, #0
 8001d5a:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d5c:	689a      	ldr	r2, [r3, #8]
 8001d5e:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d62:	2a06      	cmp	r2, #6
 8001d64:	d007      	beq.n	8001d76 <HAL_TIM_Base_Start_IT+0x7e>
      __HAL_TIM_ENABLE(htim);
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	f042 0201 	orr.w	r2, r2, #1
 8001d6c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8001d6e:	2000      	movs	r0, #0
 8001d70:	4770      	bx	lr
    return HAL_ERROR;
 8001d72:	2001      	movs	r0, #1
 8001d74:	4770      	bx	lr
  return HAL_OK;
 8001d76:	2000      	movs	r0, #0
}
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	40010000 	.word	0x40010000

08001d80 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8001d80:	4770      	bx	lr

08001d82 <HAL_TIM_IC_CaptureCallback>:
}
 8001d82:	4770      	bx	lr

08001d84 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8001d84:	4770      	bx	lr

08001d86 <HAL_TIM_TriggerCallback>:
}
 8001d86:	4770      	bx	lr

08001d88 <HAL_TIM_IRQHandler>:
{
 8001d88:	b510      	push	{r4, lr}
 8001d8a:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d8c:	6803      	ldr	r3, [r0, #0]
 8001d8e:	691a      	ldr	r2, [r3, #16]
 8001d90:	f012 0f02 	tst.w	r2, #2
 8001d94:	d011      	beq.n	8001dba <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d96:	68da      	ldr	r2, [r3, #12]
 8001d98:	f012 0f02 	tst.w	r2, #2
 8001d9c:	d00d      	beq.n	8001dba <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d9e:	f06f 0202 	mvn.w	r2, #2
 8001da2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001da4:	2301      	movs	r3, #1
 8001da6:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001da8:	6803      	ldr	r3, [r0, #0]
 8001daa:	699b      	ldr	r3, [r3, #24]
 8001dac:	f013 0f03 	tst.w	r3, #3
 8001db0:	d070      	beq.n	8001e94 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8001db2:	f7ff ffe6 	bl	8001d82 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001db6:	2300      	movs	r3, #0
 8001db8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001dba:	6823      	ldr	r3, [r4, #0]
 8001dbc:	691a      	ldr	r2, [r3, #16]
 8001dbe:	f012 0f04 	tst.w	r2, #4
 8001dc2:	d012      	beq.n	8001dea <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001dc4:	68da      	ldr	r2, [r3, #12]
 8001dc6:	f012 0f04 	tst.w	r2, #4
 8001dca:	d00e      	beq.n	8001dea <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001dcc:	f06f 0204 	mvn.w	r2, #4
 8001dd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001dd6:	6823      	ldr	r3, [r4, #0]
 8001dd8:	699b      	ldr	r3, [r3, #24]
 8001dda:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001dde:	d05f      	beq.n	8001ea0 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8001de0:	4620      	mov	r0, r4
 8001de2:	f7ff ffce 	bl	8001d82 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001de6:	2300      	movs	r3, #0
 8001de8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001dea:	6823      	ldr	r3, [r4, #0]
 8001dec:	691a      	ldr	r2, [r3, #16]
 8001dee:	f012 0f08 	tst.w	r2, #8
 8001df2:	d012      	beq.n	8001e1a <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001df4:	68da      	ldr	r2, [r3, #12]
 8001df6:	f012 0f08 	tst.w	r2, #8
 8001dfa:	d00e      	beq.n	8001e1a <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001dfc:	f06f 0208 	mvn.w	r2, #8
 8001e00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e02:	2304      	movs	r3, #4
 8001e04:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e06:	6823      	ldr	r3, [r4, #0]
 8001e08:	69db      	ldr	r3, [r3, #28]
 8001e0a:	f013 0f03 	tst.w	r3, #3
 8001e0e:	d04e      	beq.n	8001eae <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8001e10:	4620      	mov	r0, r4
 8001e12:	f7ff ffb6 	bl	8001d82 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e16:	2300      	movs	r3, #0
 8001e18:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e1a:	6823      	ldr	r3, [r4, #0]
 8001e1c:	691a      	ldr	r2, [r3, #16]
 8001e1e:	f012 0f10 	tst.w	r2, #16
 8001e22:	d012      	beq.n	8001e4a <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e24:	68da      	ldr	r2, [r3, #12]
 8001e26:	f012 0f10 	tst.w	r2, #16
 8001e2a:	d00e      	beq.n	8001e4a <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e2c:	f06f 0210 	mvn.w	r2, #16
 8001e30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e32:	2308      	movs	r3, #8
 8001e34:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e36:	6823      	ldr	r3, [r4, #0]
 8001e38:	69db      	ldr	r3, [r3, #28]
 8001e3a:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001e3e:	d03d      	beq.n	8001ebc <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8001e40:	4620      	mov	r0, r4
 8001e42:	f7ff ff9e 	bl	8001d82 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e46:	2300      	movs	r3, #0
 8001e48:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e4a:	6823      	ldr	r3, [r4, #0]
 8001e4c:	691a      	ldr	r2, [r3, #16]
 8001e4e:	f012 0f01 	tst.w	r2, #1
 8001e52:	d003      	beq.n	8001e5c <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e54:	68da      	ldr	r2, [r3, #12]
 8001e56:	f012 0f01 	tst.w	r2, #1
 8001e5a:	d136      	bne.n	8001eca <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e5c:	6823      	ldr	r3, [r4, #0]
 8001e5e:	691a      	ldr	r2, [r3, #16]
 8001e60:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001e64:	d003      	beq.n	8001e6e <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e66:	68da      	ldr	r2, [r3, #12]
 8001e68:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001e6c:	d134      	bne.n	8001ed8 <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e6e:	6823      	ldr	r3, [r4, #0]
 8001e70:	691a      	ldr	r2, [r3, #16]
 8001e72:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001e76:	d003      	beq.n	8001e80 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e78:	68da      	ldr	r2, [r3, #12]
 8001e7a:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001e7e:	d132      	bne.n	8001ee6 <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e80:	6823      	ldr	r3, [r4, #0]
 8001e82:	691a      	ldr	r2, [r3, #16]
 8001e84:	f012 0f20 	tst.w	r2, #32
 8001e88:	d003      	beq.n	8001e92 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e8a:	68da      	ldr	r2, [r3, #12]
 8001e8c:	f012 0f20 	tst.w	r2, #32
 8001e90:	d130      	bne.n	8001ef4 <HAL_TIM_IRQHandler+0x16c>
}
 8001e92:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e94:	f7ff ff74 	bl	8001d80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e98:	4620      	mov	r0, r4
 8001e9a:	f7ff ff73 	bl	8001d84 <HAL_TIM_PWM_PulseFinishedCallback>
 8001e9e:	e78a      	b.n	8001db6 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ea0:	4620      	mov	r0, r4
 8001ea2:	f7ff ff6d 	bl	8001d80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ea6:	4620      	mov	r0, r4
 8001ea8:	f7ff ff6c 	bl	8001d84 <HAL_TIM_PWM_PulseFinishedCallback>
 8001eac:	e79b      	b.n	8001de6 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eae:	4620      	mov	r0, r4
 8001eb0:	f7ff ff66 	bl	8001d80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eb4:	4620      	mov	r0, r4
 8001eb6:	f7ff ff65 	bl	8001d84 <HAL_TIM_PWM_PulseFinishedCallback>
 8001eba:	e7ac      	b.n	8001e16 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ebc:	4620      	mov	r0, r4
 8001ebe:	f7ff ff5f 	bl	8001d80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ec2:	4620      	mov	r0, r4
 8001ec4:	f7ff ff5e 	bl	8001d84 <HAL_TIM_PWM_PulseFinishedCallback>
 8001ec8:	e7bd      	b.n	8001e46 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001eca:	f06f 0201 	mvn.w	r2, #1
 8001ece:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ed0:	4620      	mov	r0, r4
 8001ed2:	f7ff f903 	bl	80010dc <HAL_TIM_PeriodElapsedCallback>
 8001ed6:	e7c1      	b.n	8001e5c <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001ed8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001edc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001ede:	4620      	mov	r0, r4
 8001ee0:	f000 f9f9 	bl	80022d6 <HAL_TIMEx_BreakCallback>
 8001ee4:	e7c3      	b.n	8001e6e <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001ee6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001eea:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001eec:	4620      	mov	r0, r4
 8001eee:	f7ff ff4a 	bl	8001d86 <HAL_TIM_TriggerCallback>
 8001ef2:	e7c5      	b.n	8001e80 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001ef4:	f06f 0220 	mvn.w	r2, #32
 8001ef8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8001efa:	4620      	mov	r0, r4
 8001efc:	f000 f9ea 	bl	80022d4 <HAL_TIMEx_CommutCallback>
}
 8001f00:	e7c7      	b.n	8001e92 <HAL_TIM_IRQHandler+0x10a>
	...

08001f04 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8001f04:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f06:	4a30      	ldr	r2, [pc, #192]	; (8001fc8 <TIM_Base_SetConfig+0xc4>)
 8001f08:	4290      	cmp	r0, r2
 8001f0a:	d012      	beq.n	8001f32 <TIM_Base_SetConfig+0x2e>
 8001f0c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001f10:	d00f      	beq.n	8001f32 <TIM_Base_SetConfig+0x2e>
 8001f12:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001f16:	4290      	cmp	r0, r2
 8001f18:	d00b      	beq.n	8001f32 <TIM_Base_SetConfig+0x2e>
 8001f1a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f1e:	4290      	cmp	r0, r2
 8001f20:	d007      	beq.n	8001f32 <TIM_Base_SetConfig+0x2e>
 8001f22:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f26:	4290      	cmp	r0, r2
 8001f28:	d003      	beq.n	8001f32 <TIM_Base_SetConfig+0x2e>
 8001f2a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001f2e:	4290      	cmp	r0, r2
 8001f30:	d103      	bne.n	8001f3a <TIM_Base_SetConfig+0x36>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001f36:	684a      	ldr	r2, [r1, #4]
 8001f38:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f3a:	4a23      	ldr	r2, [pc, #140]	; (8001fc8 <TIM_Base_SetConfig+0xc4>)
 8001f3c:	4290      	cmp	r0, r2
 8001f3e:	d02a      	beq.n	8001f96 <TIM_Base_SetConfig+0x92>
 8001f40:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001f44:	d027      	beq.n	8001f96 <TIM_Base_SetConfig+0x92>
 8001f46:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001f4a:	4290      	cmp	r0, r2
 8001f4c:	d023      	beq.n	8001f96 <TIM_Base_SetConfig+0x92>
 8001f4e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f52:	4290      	cmp	r0, r2
 8001f54:	d01f      	beq.n	8001f96 <TIM_Base_SetConfig+0x92>
 8001f56:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f5a:	4290      	cmp	r0, r2
 8001f5c:	d01b      	beq.n	8001f96 <TIM_Base_SetConfig+0x92>
 8001f5e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001f62:	4290      	cmp	r0, r2
 8001f64:	d017      	beq.n	8001f96 <TIM_Base_SetConfig+0x92>
 8001f66:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8001f6a:	4290      	cmp	r0, r2
 8001f6c:	d013      	beq.n	8001f96 <TIM_Base_SetConfig+0x92>
 8001f6e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f72:	4290      	cmp	r0, r2
 8001f74:	d00f      	beq.n	8001f96 <TIM_Base_SetConfig+0x92>
 8001f76:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f7a:	4290      	cmp	r0, r2
 8001f7c:	d00b      	beq.n	8001f96 <TIM_Base_SetConfig+0x92>
 8001f7e:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001f82:	4290      	cmp	r0, r2
 8001f84:	d007      	beq.n	8001f96 <TIM_Base_SetConfig+0x92>
 8001f86:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f8a:	4290      	cmp	r0, r2
 8001f8c:	d003      	beq.n	8001f96 <TIM_Base_SetConfig+0x92>
 8001f8e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f92:	4290      	cmp	r0, r2
 8001f94:	d103      	bne.n	8001f9e <TIM_Base_SetConfig+0x9a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f9a:	68ca      	ldr	r2, [r1, #12]
 8001f9c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001fa2:	694a      	ldr	r2, [r1, #20]
 8001fa4:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001fa6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fa8:	688b      	ldr	r3, [r1, #8]
 8001faa:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001fac:	680b      	ldr	r3, [r1, #0]
 8001fae:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fb0:	4b05      	ldr	r3, [pc, #20]	; (8001fc8 <TIM_Base_SetConfig+0xc4>)
 8001fb2:	4298      	cmp	r0, r3
 8001fb4:	d003      	beq.n	8001fbe <TIM_Base_SetConfig+0xba>
 8001fb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001fba:	4298      	cmp	r0, r3
 8001fbc:	d101      	bne.n	8001fc2 <TIM_Base_SetConfig+0xbe>
    TIMx->RCR = Structure->RepetitionCounter;
 8001fbe:	690b      	ldr	r3, [r1, #16]
 8001fc0:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	6143      	str	r3, [r0, #20]
}
 8001fc6:	4770      	bx	lr
 8001fc8:	40010000 	.word	0x40010000

08001fcc <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8001fcc:	b340      	cbz	r0, 8002020 <HAL_TIM_Base_Init+0x54>
{
 8001fce:	b510      	push	{r4, lr}
 8001fd0:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8001fd2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001fd6:	b1f3      	cbz	r3, 8002016 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8001fd8:	2302      	movs	r3, #2
 8001fda:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fde:	4621      	mov	r1, r4
 8001fe0:	f851 0b04 	ldr.w	r0, [r1], #4
 8001fe4:	f7ff ff8e 	bl	8001f04 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fee:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8001ff2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8001ff6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8001ffa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ffe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002002:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002006:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800200a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800200e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002012:	2000      	movs	r0, #0
}
 8002014:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002016:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800201a:	f7ff f96f 	bl	80012fc <HAL_TIM_Base_MspInit>
 800201e:	e7db      	b.n	8001fd8 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8002020:	2001      	movs	r0, #1
}
 8002022:	4770      	bx	lr

08002024 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002024:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002026:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002028:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800202c:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8002030:	430a      	orrs	r2, r1
 8002032:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002036:	6082      	str	r2, [r0, #8]
}
 8002038:	f85d 4b04 	ldr.w	r4, [sp], #4
 800203c:	4770      	bx	lr

0800203e <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800203e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002042:	2b01      	cmp	r3, #1
 8002044:	d078      	beq.n	8002138 <HAL_TIM_ConfigClockSource+0xfa>
{
 8002046:	b510      	push	{r4, lr}
 8002048:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800204a:	2301      	movs	r3, #1
 800204c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8002050:	2302      	movs	r3, #2
 8002052:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8002056:	6802      	ldr	r2, [r0, #0]
 8002058:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800205a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800205e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8002062:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8002064:	680b      	ldr	r3, [r1, #0]
 8002066:	2b60      	cmp	r3, #96	; 0x60
 8002068:	d04c      	beq.n	8002104 <HAL_TIM_ConfigClockSource+0xc6>
 800206a:	d829      	bhi.n	80020c0 <HAL_TIM_ConfigClockSource+0x82>
 800206c:	2b40      	cmp	r3, #64	; 0x40
 800206e:	d054      	beq.n	800211a <HAL_TIM_ConfigClockSource+0xdc>
 8002070:	d90c      	bls.n	800208c <HAL_TIM_ConfigClockSource+0x4e>
 8002072:	2b50      	cmp	r3, #80	; 0x50
 8002074:	d122      	bne.n	80020bc <HAL_TIM_ConfigClockSource+0x7e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002076:	68ca      	ldr	r2, [r1, #12]
 8002078:	6849      	ldr	r1, [r1, #4]
 800207a:	6800      	ldr	r0, [r0, #0]
 800207c:	f7ff fe0c 	bl	8001c98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002080:	2150      	movs	r1, #80	; 0x50
 8002082:	6820      	ldr	r0, [r4, #0]
 8002084:	f7ff fe2f 	bl	8001ce6 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002088:	2000      	movs	r0, #0
      break;
 800208a:	e005      	b.n	8002098 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 800208c:	2b20      	cmp	r3, #32
 800208e:	d00d      	beq.n	80020ac <HAL_TIM_ConfigClockSource+0x6e>
 8002090:	d909      	bls.n	80020a6 <HAL_TIM_ConfigClockSource+0x68>
 8002092:	2b30      	cmp	r3, #48	; 0x30
 8002094:	d00a      	beq.n	80020ac <HAL_TIM_ConfigClockSource+0x6e>
      status = HAL_ERROR;
 8002096:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 8002098:	2301      	movs	r3, #1
 800209a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800209e:	2300      	movs	r3, #0
 80020a0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80020a4:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 80020a6:	b10b      	cbz	r3, 80020ac <HAL_TIM_ConfigClockSource+0x6e>
 80020a8:	2b10      	cmp	r3, #16
 80020aa:	d105      	bne.n	80020b8 <HAL_TIM_ConfigClockSource+0x7a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80020ac:	4619      	mov	r1, r3
 80020ae:	6820      	ldr	r0, [r4, #0]
 80020b0:	f7ff fe19 	bl	8001ce6 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80020b4:	2000      	movs	r0, #0
      break;
 80020b6:	e7ef      	b.n	8002098 <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 80020b8:	2001      	movs	r0, #1
 80020ba:	e7ed      	b.n	8002098 <HAL_TIM_ConfigClockSource+0x5a>
 80020bc:	2001      	movs	r0, #1
 80020be:	e7eb      	b.n	8002098 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 80020c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020c4:	d034      	beq.n	8002130 <HAL_TIM_ConfigClockSource+0xf2>
 80020c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020ca:	d10c      	bne.n	80020e6 <HAL_TIM_ConfigClockSource+0xa8>
      TIM_ETR_SetConfig(htim->Instance,
 80020cc:	68cb      	ldr	r3, [r1, #12]
 80020ce:	684a      	ldr	r2, [r1, #4]
 80020d0:	6889      	ldr	r1, [r1, #8]
 80020d2:	6800      	ldr	r0, [r0, #0]
 80020d4:	f7ff ffa6 	bl	8002024 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80020d8:	6822      	ldr	r2, [r4, #0]
 80020da:	6893      	ldr	r3, [r2, #8]
 80020dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020e0:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80020e2:	2000      	movs	r0, #0
      break;
 80020e4:	e7d8      	b.n	8002098 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 80020e6:	2b70      	cmp	r3, #112	; 0x70
 80020e8:	d124      	bne.n	8002134 <HAL_TIM_ConfigClockSource+0xf6>
      TIM_ETR_SetConfig(htim->Instance,
 80020ea:	68cb      	ldr	r3, [r1, #12]
 80020ec:	684a      	ldr	r2, [r1, #4]
 80020ee:	6889      	ldr	r1, [r1, #8]
 80020f0:	6800      	ldr	r0, [r0, #0]
 80020f2:	f7ff ff97 	bl	8002024 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80020f6:	6822      	ldr	r2, [r4, #0]
 80020f8:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80020fa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 80020fe:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002100:	2000      	movs	r0, #0
      break;
 8002102:	e7c9      	b.n	8002098 <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002104:	68ca      	ldr	r2, [r1, #12]
 8002106:	6849      	ldr	r1, [r1, #4]
 8002108:	6800      	ldr	r0, [r0, #0]
 800210a:	f7ff fdd8 	bl	8001cbe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800210e:	2160      	movs	r1, #96	; 0x60
 8002110:	6820      	ldr	r0, [r4, #0]
 8002112:	f7ff fde8 	bl	8001ce6 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002116:	2000      	movs	r0, #0
      break;
 8002118:	e7be      	b.n	8002098 <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800211a:	68ca      	ldr	r2, [r1, #12]
 800211c:	6849      	ldr	r1, [r1, #4]
 800211e:	6800      	ldr	r0, [r0, #0]
 8002120:	f7ff fdba 	bl	8001c98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002124:	2140      	movs	r1, #64	; 0x40
 8002126:	6820      	ldr	r0, [r4, #0]
 8002128:	f7ff fddd 	bl	8001ce6 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800212c:	2000      	movs	r0, #0
      break;
 800212e:	e7b3      	b.n	8002098 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8002130:	2000      	movs	r0, #0
 8002132:	e7b1      	b.n	8002098 <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 8002134:	2001      	movs	r0, #1
 8002136:	e7af      	b.n	8002098 <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 8002138:	2002      	movs	r0, #2
}
 800213a:	4770      	bx	lr

0800213c <TIM_SlaveTimer_SetConfig>:
{
 800213c:	b510      	push	{r4, lr}
  tmpsmcr = htim->Instance->SMCR;
 800213e:	6804      	ldr	r4, [r0, #0]
 8002140:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002142:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8002146:	684b      	ldr	r3, [r1, #4]
 8002148:	4313      	orrs	r3, r2
  tmpsmcr &= ~TIM_SMCR_SMS;
 800214a:	f023 0307 	bic.w	r3, r3, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800214e:	680a      	ldr	r2, [r1, #0]
 8002150:	431a      	orrs	r2, r3
  htim->Instance->SMCR = tmpsmcr;
 8002152:	60a2      	str	r2, [r4, #8]
  switch (sSlaveConfig->InputTrigger)
 8002154:	684b      	ldr	r3, [r1, #4]
 8002156:	2b50      	cmp	r3, #80	; 0x50
 8002158:	d032      	beq.n	80021c0 <TIM_SlaveTimer_SetConfig+0x84>
 800215a:	d90b      	bls.n	8002174 <TIM_SlaveTimer_SetConfig+0x38>
 800215c:	2b60      	cmp	r3, #96	; 0x60
 800215e:	d036      	beq.n	80021ce <TIM_SlaveTimer_SetConfig+0x92>
 8002160:	2b70      	cmp	r3, #112	; 0x70
 8002162:	d143      	bne.n	80021ec <TIM_SlaveTimer_SetConfig+0xb0>
      TIM_ETR_SetConfig(htim->Instance,
 8002164:	690b      	ldr	r3, [r1, #16]
 8002166:	688a      	ldr	r2, [r1, #8]
 8002168:	68c9      	ldr	r1, [r1, #12]
 800216a:	6800      	ldr	r0, [r0, #0]
 800216c:	f7ff ff5a 	bl	8002024 <TIM_ETR_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002170:	2000      	movs	r0, #0
      break;
 8002172:	e00f      	b.n	8002194 <TIM_SlaveTimer_SetConfig+0x58>
  switch (sSlaveConfig->InputTrigger)
 8002174:	2b40      	cmp	r3, #64	; 0x40
 8002176:	d00e      	beq.n	8002196 <TIM_SlaveTimer_SetConfig+0x5a>
 8002178:	d901      	bls.n	800217e <TIM_SlaveTimer_SetConfig+0x42>
      status = HAL_ERROR;
 800217a:	2001      	movs	r0, #1
 800217c:	e00a      	b.n	8002194 <TIM_SlaveTimer_SetConfig+0x58>
  switch (sSlaveConfig->InputTrigger)
 800217e:	2b20      	cmp	r3, #32
 8002180:	d02c      	beq.n	80021dc <TIM_SlaveTimer_SetConfig+0xa0>
 8002182:	d903      	bls.n	800218c <TIM_SlaveTimer_SetConfig+0x50>
 8002184:	2b30      	cmp	r3, #48	; 0x30
 8002186:	d12f      	bne.n	80021e8 <TIM_SlaveTimer_SetConfig+0xac>
 8002188:	2000      	movs	r0, #0
 800218a:	e003      	b.n	8002194 <TIM_SlaveTimer_SetConfig+0x58>
 800218c:	b343      	cbz	r3, 80021e0 <TIM_SlaveTimer_SetConfig+0xa4>
 800218e:	2b10      	cmp	r3, #16
 8002190:	d128      	bne.n	80021e4 <TIM_SlaveTimer_SetConfig+0xa8>
 8002192:	2000      	movs	r0, #0
}
 8002194:	bd10      	pop	{r4, pc}
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8002196:	680b      	ldr	r3, [r1, #0]
 8002198:	2b05      	cmp	r3, #5
 800219a:	d029      	beq.n	80021f0 <TIM_SlaveTimer_SetConfig+0xb4>
      tmpccer = htim->Instance->CCER;
 800219c:	6803      	ldr	r3, [r0, #0]
 800219e:	6a1c      	ldr	r4, [r3, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80021a0:	6a1a      	ldr	r2, [r3, #32]
 80021a2:	f022 0201 	bic.w	r2, r2, #1
 80021a6:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80021a8:	6802      	ldr	r2, [r0, #0]
 80021aa:	6993      	ldr	r3, [r2, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80021ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80021b0:	6909      	ldr	r1, [r1, #16]
 80021b2:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 80021b6:	6193      	str	r3, [r2, #24]
      htim->Instance->CCER = tmpccer;
 80021b8:	6803      	ldr	r3, [r0, #0]
 80021ba:	621c      	str	r4, [r3, #32]
  HAL_StatusTypeDef status = HAL_OK;
 80021bc:	2000      	movs	r0, #0
      break;
 80021be:	e7e9      	b.n	8002194 <TIM_SlaveTimer_SetConfig+0x58>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80021c0:	690a      	ldr	r2, [r1, #16]
 80021c2:	6889      	ldr	r1, [r1, #8]
 80021c4:	6800      	ldr	r0, [r0, #0]
 80021c6:	f7ff fd67 	bl	8001c98 <TIM_TI1_ConfigInputStage>
  HAL_StatusTypeDef status = HAL_OK;
 80021ca:	2000      	movs	r0, #0
      break;
 80021cc:	e7e2      	b.n	8002194 <TIM_SlaveTimer_SetConfig+0x58>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80021ce:	690a      	ldr	r2, [r1, #16]
 80021d0:	6889      	ldr	r1, [r1, #8]
 80021d2:	6800      	ldr	r0, [r0, #0]
 80021d4:	f7ff fd73 	bl	8001cbe <TIM_TI2_ConfigInputStage>
  HAL_StatusTypeDef status = HAL_OK;
 80021d8:	2000      	movs	r0, #0
      break;
 80021da:	e7db      	b.n	8002194 <TIM_SlaveTimer_SetConfig+0x58>
  switch (sSlaveConfig->InputTrigger)
 80021dc:	2000      	movs	r0, #0
 80021de:	e7d9      	b.n	8002194 <TIM_SlaveTimer_SetConfig+0x58>
 80021e0:	2000      	movs	r0, #0
 80021e2:	e7d7      	b.n	8002194 <TIM_SlaveTimer_SetConfig+0x58>
      status = HAL_ERROR;
 80021e4:	2001      	movs	r0, #1
 80021e6:	e7d5      	b.n	8002194 <TIM_SlaveTimer_SetConfig+0x58>
 80021e8:	2001      	movs	r0, #1
 80021ea:	e7d3      	b.n	8002194 <TIM_SlaveTimer_SetConfig+0x58>
 80021ec:	2001      	movs	r0, #1
 80021ee:	e7d1      	b.n	8002194 <TIM_SlaveTimer_SetConfig+0x58>
        return HAL_ERROR;
 80021f0:	2001      	movs	r0, #1
 80021f2:	e7cf      	b.n	8002194 <TIM_SlaveTimer_SetConfig+0x58>

080021f4 <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 80021f4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d022      	beq.n	8002242 <HAL_TIM_SlaveConfigSynchro+0x4e>
{
 80021fc:	b510      	push	{r4, lr}
 80021fe:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8002200:	2301      	movs	r3, #1
 8002202:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8002206:	2302      	movs	r3, #2
 8002208:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800220c:	f7ff ff96 	bl	800213c <TIM_SlaveTimer_SetConfig>
 8002210:	b980      	cbnz	r0, 8002234 <HAL_TIM_SlaveConfigSynchro+0x40>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8002212:	6822      	ldr	r2, [r4, #0]
 8002214:	68d3      	ldr	r3, [r2, #12]
 8002216:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800221a:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800221c:	6822      	ldr	r2, [r4, #0]
 800221e:	68d3      	ldr	r3, [r2, #12]
 8002220:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002224:	60d3      	str	r3, [r2, #12]
  htim->State = HAL_TIM_STATE_READY;
 8002226:	2301      	movs	r3, #1
 8002228:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800222c:	2300      	movs	r3, #0
 800222e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8002232:	bd10      	pop	{r4, pc}
    htim->State = HAL_TIM_STATE_READY;
 8002234:	2001      	movs	r0, #1
 8002236:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800223a:	2300      	movs	r3, #0
 800223c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 8002240:	e7f7      	b.n	8002232 <HAL_TIM_SlaveConfigSynchro+0x3e>
  __HAL_LOCK(htim);
 8002242:	2002      	movs	r0, #2
}
 8002244:	4770      	bx	lr
	...

08002248 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002248:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 800224c:	2a01      	cmp	r2, #1
 800224e:	d03d      	beq.n	80022cc <HAL_TIMEx_MasterConfigSynchronization+0x84>
{
 8002250:	b410      	push	{r4}
 8002252:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8002254:	2201      	movs	r2, #1
 8002256:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800225a:	2202      	movs	r2, #2
 800225c:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002260:	6802      	ldr	r2, [r0, #0]
 8002262:	6850      	ldr	r0, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002264:	6894      	ldr	r4, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002266:	f020 0c70 	bic.w	ip, r0, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800226a:	6808      	ldr	r0, [r1, #0]
 800226c:	ea40 000c 	orr.w	r0, r0, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002270:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	4816      	ldr	r0, [pc, #88]	; (80022d0 <HAL_TIMEx_MasterConfigSynchronization+0x88>)
 8002276:	4282      	cmp	r2, r0
 8002278:	d01a      	beq.n	80022b0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 800227a:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800227e:	d017      	beq.n	80022b0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8002280:	f5a0 407c 	sub.w	r0, r0, #64512	; 0xfc00
 8002284:	4282      	cmp	r2, r0
 8002286:	d013      	beq.n	80022b0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8002288:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800228c:	4282      	cmp	r2, r0
 800228e:	d00f      	beq.n	80022b0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8002290:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8002294:	4282      	cmp	r2, r0
 8002296:	d00b      	beq.n	80022b0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8002298:	f500 4078 	add.w	r0, r0, #63488	; 0xf800
 800229c:	4282      	cmp	r2, r0
 800229e:	d007      	beq.n	80022b0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 80022a0:	f500 5070 	add.w	r0, r0, #15360	; 0x3c00
 80022a4:	4282      	cmp	r2, r0
 80022a6:	d003      	beq.n	80022b0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 80022a8:	f5a0 3094 	sub.w	r0, r0, #75776	; 0x12800
 80022ac:	4282      	cmp	r2, r0
 80022ae:	d104      	bne.n	80022ba <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80022b0:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80022b4:	6849      	ldr	r1, [r1, #4]
 80022b6:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80022b8:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80022ba:	2201      	movs	r2, #1
 80022bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80022c0:	2000      	movs	r0, #0
 80022c2:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c

  return HAL_OK;
}
 80022c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80022ca:	4770      	bx	lr
  __HAL_LOCK(htim);
 80022cc:	2002      	movs	r0, #2
}
 80022ce:	4770      	bx	lr
 80022d0:	40010000 	.word	0x40010000

080022d4 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80022d4:	4770      	bx	lr

080022d6 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80022d6:	4770      	bx	lr

080022d8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80022d8:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 80022da:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80022de:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80022e0:	f001 fa4c 	bl	800377c <xTaskGetSchedulerState>
 80022e4:	2801      	cmp	r0, #1
 80022e6:	d100      	bne.n	80022ea <SysTick_Handler+0x12>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 80022e8:	bd08      	pop	{r3, pc}
    xPortSysTickHandler();
 80022ea:	f001 fe4b 	bl	8003f84 <xPortSysTickHandler>
}
 80022ee:	e7fb      	b.n	80022e8 <SysTick_Handler+0x10>

080022f0 <osKernelInitialize>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80022f0:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 80022f4:	b92b      	cbnz	r3, 8002302 <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 80022f6:	4b06      	ldr	r3, [pc, #24]	; (8002310 <osKernelInitialize+0x20>)
 80022f8:	6818      	ldr	r0, [r3, #0]
 80022fa:	b928      	cbnz	r0, 8002308 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80022fc:	2201      	movs	r2, #1
 80022fe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002300:	4770      	bx	lr
    stat = osErrorISR;
 8002302:	f06f 0005 	mvn.w	r0, #5
 8002306:	4770      	bx	lr
    } else {
      stat = osError;
 8002308:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	20000588 	.word	0x20000588

08002314 <osKernelStart>:
 8002314:	f3ef 8305 	mrs	r3, IPSR
}

osStatus_t osKernelStart (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8002318:	b973      	cbnz	r3, 8002338 <osKernelStart+0x24>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 800231a:	4b0a      	ldr	r3, [pc, #40]	; (8002344 <osKernelStart+0x30>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2b01      	cmp	r3, #1
 8002320:	d10d      	bne.n	800233e <osKernelStart+0x2a>
osStatus_t osKernelStart (void) {
 8002322:	b510      	push	{r4, lr}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002324:	2400      	movs	r4, #0
 8002326:	4b08      	ldr	r3, [pc, #32]	; (8002348 <osKernelStart+0x34>)
 8002328:	77dc      	strb	r4, [r3, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800232a:	4b06      	ldr	r3, [pc, #24]	; (8002344 <osKernelStart+0x30>)
 800232c:	2202      	movs	r2, #2
 800232e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002330:	f000 fe98 	bl	8003064 <vTaskStartScheduler>
      stat = osOK;
 8002334:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 8002336:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8002338:	f06f 0005 	mvn.w	r0, #5
 800233c:	4770      	bx	lr
      stat = osError;
 800233e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002342:	4770      	bx	lr
 8002344:	20000588 	.word	0x20000588
 8002348:	e000ed00 	.word	0xe000ed00

0800234c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800234c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800234e:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002350:	2400      	movs	r4, #0
 8002352:	9405      	str	r4, [sp, #20]
 8002354:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8002358:	bb74      	cbnz	r4, 80023b8 <osThreadNew+0x6c>
 800235a:	b368      	cbz	r0, 80023b8 <osThreadNew+0x6c>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 800235c:	b322      	cbz	r2, 80023a8 <osThreadNew+0x5c>
      if (attr->name != NULL) {
 800235e:	6815      	ldr	r5, [r2, #0]
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8002360:	6993      	ldr	r3, [r2, #24]
 8002362:	b903      	cbnz	r3, 8002366 <osThreadNew+0x1a>
    prio  = (UBaseType_t)osPriorityNormal;
 8002364:	2318      	movs	r3, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002366:	1e5c      	subs	r4, r3, #1
 8002368:	2c37      	cmp	r4, #55	; 0x37
 800236a:	d849      	bhi.n	8002400 <osThreadNew+0xb4>
 800236c:	6854      	ldr	r4, [r2, #4]
 800236e:	f014 0f01 	tst.w	r4, #1
 8002372:	d147      	bne.n	8002404 <osThreadNew+0xb8>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 8002374:	6956      	ldr	r6, [r2, #20]
 8002376:	b16e      	cbz	r6, 8002394 <osThreadNew+0x48>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002378:	ea4f 0c96 	mov.w	ip, r6, lsr #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800237c:	6894      	ldr	r4, [r2, #8]
 800237e:	b12c      	cbz	r4, 800238c <osThreadNew+0x40>
 8002380:	68d7      	ldr	r7, [r2, #12]
 8002382:	2fab      	cmp	r7, #171	; 0xab
 8002384:	d902      	bls.n	800238c <osThreadNew+0x40>
 8002386:	6917      	ldr	r7, [r2, #16]
 8002388:	b107      	cbz	r7, 800238c <osThreadNew+0x40>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800238a:	b9c6      	cbnz	r6, 80023be <osThreadNew+0x72>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800238c:	b12c      	cbz	r4, 800239a <osThreadNew+0x4e>
    mem  = -1;
 800238e:	f04f 34ff 	mov.w	r4, #4294967295
 8002392:	e00e      	b.n	80023b2 <osThreadNew+0x66>
    stack = configMINIMAL_STACK_SIZE;
 8002394:	f04f 0c80 	mov.w	ip, #128	; 0x80
 8002398:	e7f0      	b.n	800237c <osThreadNew+0x30>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800239a:	68d4      	ldr	r4, [r2, #12]
 800239c:	b98c      	cbnz	r4, 80023c2 <osThreadNew+0x76>
 800239e:	6914      	ldr	r4, [r2, #16]
 80023a0:	b194      	cbz	r4, 80023c8 <osThreadNew+0x7c>
    mem  = -1;
 80023a2:	f04f 34ff 	mov.w	r4, #4294967295
 80023a6:	e004      	b.n	80023b2 <osThreadNew+0x66>
    name = NULL;
 80023a8:	4615      	mov	r5, r2
          mem = 0;
        }
      }
    }
    else {
      mem = 0;
 80023aa:	2400      	movs	r4, #0
    prio  = (UBaseType_t)osPriorityNormal;
 80023ac:	2318      	movs	r3, #24
    stack = configMINIMAL_STACK_SIZE;
 80023ae:	f04f 0c80 	mov.w	ip, #128	; 0x80
    }

    if (mem == 1) {
 80023b2:	2c01      	cmp	r4, #1
 80023b4:	d00a      	beq.n	80023cc <osThreadNew+0x80>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
                                                                                      (StaticTask_t *)attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 80023b6:	b1ac      	cbz	r4, 80023e4 <osThreadNew+0x98>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80023b8:	9805      	ldr	r0, [sp, #20]
}
 80023ba:	b007      	add	sp, #28
 80023bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mem = 1;
 80023be:	2401      	movs	r4, #1
 80023c0:	e7f7      	b.n	80023b2 <osThreadNew+0x66>
    mem  = -1;
 80023c2:	f04f 34ff 	mov.w	r4, #4294967295
 80023c6:	e7f4      	b.n	80023b2 <osThreadNew+0x66>
          mem = 0;
 80023c8:	2400      	movs	r4, #0
 80023ca:	e7f2      	b.n	80023b2 <osThreadNew+0x66>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80023cc:	6914      	ldr	r4, [r2, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80023ce:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80023d0:	9202      	str	r2, [sp, #8]
 80023d2:	9401      	str	r4, [sp, #4]
 80023d4:	9300      	str	r3, [sp, #0]
 80023d6:	460b      	mov	r3, r1
 80023d8:	4662      	mov	r2, ip
 80023da:	4629      	mov	r1, r5
 80023dc:	f000 fd8b 	bl	8002ef6 <xTaskCreateStatic>
 80023e0:	9005      	str	r0, [sp, #20]
 80023e2:	e7e9      	b.n	80023b8 <osThreadNew+0x6c>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80023e4:	aa05      	add	r2, sp, #20
 80023e6:	9201      	str	r2, [sp, #4]
 80023e8:	9300      	str	r3, [sp, #0]
 80023ea:	460b      	mov	r3, r1
 80023ec:	fa1f f28c 	uxth.w	r2, ip
 80023f0:	4629      	mov	r1, r5
 80023f2:	f000 fdbb 	bl	8002f6c <xTaskCreate>
 80023f6:	2801      	cmp	r0, #1
 80023f8:	d0de      	beq.n	80023b8 <osThreadNew+0x6c>
            hTask = NULL;
 80023fa:	2300      	movs	r3, #0
 80023fc:	9305      	str	r3, [sp, #20]
 80023fe:	e7db      	b.n	80023b8 <osThreadNew+0x6c>
        return (NULL);
 8002400:	2000      	movs	r0, #0
 8002402:	e7da      	b.n	80023ba <osThreadNew+0x6e>
 8002404:	2000      	movs	r0, #0
 8002406:	e7d8      	b.n	80023ba <osThreadNew+0x6e>

08002408 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002408:	b508      	push	{r3, lr}
 800240a:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800240e:	b933      	cbnz	r3, 800241e <osDelay+0x16>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 8002410:	b908      	cbnz	r0, 8002416 <osDelay+0xe>
    stat = osOK;
 8002412:	2000      	movs	r0, #0
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 8002414:	bd08      	pop	{r3, pc}
      vTaskDelay(ticks);
 8002416:	f000 ff93 	bl	8003340 <vTaskDelay>
    stat = osOK;
 800241a:	2000      	movs	r0, #0
 800241c:	e7fa      	b.n	8002414 <osDelay+0xc>
    stat = osErrorISR;
 800241e:	f06f 0005 	mvn.w	r0, #5
 8002422:	e7f7      	b.n	8002414 <osDelay+0xc>

08002424 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002424:	4b03      	ldr	r3, [pc, #12]	; (8002434 <vApplicationGetIdleTaskMemory+0x10>)
 8002426:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002428:	4b03      	ldr	r3, [pc, #12]	; (8002438 <vApplicationGetIdleTaskMemory+0x14>)
 800242a:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800242c:	2380      	movs	r3, #128	; 0x80
 800242e:	6013      	str	r3, [r2, #0]
}
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	200004dc 	.word	0x200004dc
 8002438:	200002dc 	.word	0x200002dc

0800243c <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800243c:	4b03      	ldr	r3, [pc, #12]	; (800244c <vApplicationGetTimerTaskMemory+0x10>)
 800243e:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002440:	4b03      	ldr	r3, [pc, #12]	; (8002450 <vApplicationGetTimerTaskMemory+0x14>)
 8002442:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002444:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002448:	6013      	str	r3, [r2, #0]
}
 800244a:	4770      	bx	lr
 800244c:	2000098c 	.word	0x2000098c
 8002450:	2000058c 	.word	0x2000058c

08002454 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002454:	f100 0308 	add.w	r3, r0, #8
 8002458:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800245a:	f04f 32ff 	mov.w	r2, #4294967295
 800245e:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002460:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002462:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002464:	2300      	movs	r3, #0
 8002466:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002468:	4770      	bx	lr

0800246a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800246a:	2300      	movs	r3, #0
 800246c:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800246e:	4770      	bx	lr

08002470 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8002470:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002472:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002474:	689a      	ldr	r2, [r3, #8]
 8002476:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002478:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800247a:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800247c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800247e:	6803      	ldr	r3, [r0, #0]
 8002480:	3301      	adds	r3, #1
 8002482:	6003      	str	r3, [r0, #0]
}
 8002484:	4770      	bx	lr

08002486 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002486:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002488:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800248a:	f1b5 3fff 	cmp.w	r5, #4294967295
 800248e:	d011      	beq.n	80024b4 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002490:	f100 0308 	add.w	r3, r0, #8
 8002494:	461c      	mov	r4, r3
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	42aa      	cmp	r2, r5
 800249c:	d9fa      	bls.n	8002494 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800249e:	6863      	ldr	r3, [r4, #4]
 80024a0:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80024a2:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80024a4:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80024a6:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80024a8:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80024aa:	6803      	ldr	r3, [r0, #0]
 80024ac:	3301      	adds	r3, #1
 80024ae:	6003      	str	r3, [r0, #0]
}
 80024b0:	bc30      	pop	{r4, r5}
 80024b2:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 80024b4:	6904      	ldr	r4, [r0, #16]
 80024b6:	e7f2      	b.n	800249e <vListInsert+0x18>

080024b8 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80024b8:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80024ba:	6841      	ldr	r1, [r0, #4]
 80024bc:	6882      	ldr	r2, [r0, #8]
 80024be:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80024c0:	6841      	ldr	r1, [r0, #4]
 80024c2:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80024c4:	685a      	ldr	r2, [r3, #4]
 80024c6:	4282      	cmp	r2, r0
 80024c8:	d006      	beq.n	80024d8 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80024ca:	2200      	movs	r2, #0
 80024cc:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	3a01      	subs	r2, #1
 80024d2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80024d4:	6818      	ldr	r0, [r3, #0]
}
 80024d6:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80024d8:	6882      	ldr	r2, [r0, #8]
 80024da:	605a      	str	r2, [r3, #4]
 80024dc:	e7f5      	b.n	80024ca <uxListRemove+0x12>

080024de <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80024de:	b510      	push	{r4, lr}
 80024e0:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80024e2:	f001 fcdf 	bl	8003ea4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80024e6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80024e8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d004      	beq.n	80024f8 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 80024ee:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 80024f0:	f001 fcfa 	bl	8003ee8 <vPortExitCritical>

	return xReturn;
}
 80024f4:	4620      	mov	r0, r4
 80024f6:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 80024f8:	2401      	movs	r4, #1
 80024fa:	e7f9      	b.n	80024f0 <prvIsQueueFull+0x12>

080024fc <prvIsQueueEmpty>:
{
 80024fc:	b510      	push	{r4, lr}
 80024fe:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8002500:	f001 fcd0 	bl	8003ea4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002504:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002506:	b923      	cbnz	r3, 8002512 <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 8002508:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 800250a:	f001 fced 	bl	8003ee8 <vPortExitCritical>
}
 800250e:	4620      	mov	r0, r4
 8002510:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 8002512:	2400      	movs	r4, #0
 8002514:	e7f9      	b.n	800250a <prvIsQueueEmpty+0xe>

08002516 <prvCopyDataToQueue>:
{
 8002516:	b570      	push	{r4, r5, r6, lr}
 8002518:	4604      	mov	r4, r0
 800251a:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800251c:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800251e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8002520:	b95a      	cbnz	r2, 800253a <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002522:	6803      	ldr	r3, [r0, #0]
 8002524:	b11b      	cbz	r3, 800252e <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 8002526:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002528:	3601      	adds	r6, #1
 800252a:	63a6      	str	r6, [r4, #56]	; 0x38
}
 800252c:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800252e:	6880      	ldr	r0, [r0, #8]
 8002530:	f001 f934 	bl	800379c <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002534:	2300      	movs	r3, #0
 8002536:	60a3      	str	r3, [r4, #8]
 8002538:	e7f6      	b.n	8002528 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 800253a:	b96d      	cbnz	r5, 8002558 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800253c:	6840      	ldr	r0, [r0, #4]
 800253e:	f003 fec9 	bl	80062d4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002542:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002544:	6863      	ldr	r3, [r4, #4]
 8002546:	4413      	add	r3, r2
 8002548:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800254a:	68a2      	ldr	r2, [r4, #8]
 800254c:	4293      	cmp	r3, r2
 800254e:	d319      	bcc.n	8002584 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002550:	6823      	ldr	r3, [r4, #0]
 8002552:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 8002554:	4628      	mov	r0, r5
 8002556:	e7e7      	b.n	8002528 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002558:	68c0      	ldr	r0, [r0, #12]
 800255a:	f003 febb 	bl	80062d4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800255e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002560:	4251      	negs	r1, r2
 8002562:	68e3      	ldr	r3, [r4, #12]
 8002564:	1a9b      	subs	r3, r3, r2
 8002566:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002568:	6822      	ldr	r2, [r4, #0]
 800256a:	4293      	cmp	r3, r2
 800256c:	d202      	bcs.n	8002574 <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800256e:	68a3      	ldr	r3, [r4, #8]
 8002570:	440b      	add	r3, r1
 8002572:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8002574:	2d02      	cmp	r5, #2
 8002576:	d001      	beq.n	800257c <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 8002578:	2000      	movs	r0, #0
 800257a:	e7d5      	b.n	8002528 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800257c:	b126      	cbz	r6, 8002588 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 800257e:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8002580:	2000      	movs	r0, #0
 8002582:	e7d1      	b.n	8002528 <prvCopyDataToQueue+0x12>
 8002584:	4628      	mov	r0, r5
 8002586:	e7cf      	b.n	8002528 <prvCopyDataToQueue+0x12>
 8002588:	2000      	movs	r0, #0
 800258a:	e7cd      	b.n	8002528 <prvCopyDataToQueue+0x12>

0800258c <prvCopyDataFromQueue>:
{
 800258c:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800258e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8002590:	b16a      	cbz	r2, 80025ae <prvCopyDataFromQueue+0x22>
{
 8002592:	b510      	push	{r4, lr}
 8002594:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002596:	68d9      	ldr	r1, [r3, #12]
 8002598:	4411      	add	r1, r2
 800259a:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800259c:	689c      	ldr	r4, [r3, #8]
 800259e:	42a1      	cmp	r1, r4
 80025a0:	d301      	bcc.n	80025a6 <prvCopyDataFromQueue+0x1a>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80025a2:	6819      	ldr	r1, [r3, #0]
 80025a4:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80025a6:	68d9      	ldr	r1, [r3, #12]
 80025a8:	f003 fe94 	bl	80062d4 <memcpy>
}
 80025ac:	bd10      	pop	{r4, pc}
 80025ae:	4770      	bx	lr

080025b0 <prvUnlockQueue>:
{
 80025b0:	b538      	push	{r3, r4, r5, lr}
 80025b2:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 80025b4:	f001 fc76 	bl	8003ea4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80025b8:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 80025bc:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80025be:	e001      	b.n	80025c4 <prvUnlockQueue+0x14>
			--cTxLock;
 80025c0:	3c01      	subs	r4, #1
 80025c2:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80025c4:	2c00      	cmp	r4, #0
 80025c6:	dd0a      	ble.n	80025de <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80025c8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80025ca:	b143      	cbz	r3, 80025de <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80025cc:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80025d0:	f000 ff76 	bl	80034c0 <xTaskRemoveFromEventList>
 80025d4:	2800      	cmp	r0, #0
 80025d6:	d0f3      	beq.n	80025c0 <prvUnlockQueue+0x10>
						vTaskMissedYield();
 80025d8:	f001 f806 	bl	80035e8 <vTaskMissedYield>
 80025dc:	e7f0      	b.n	80025c0 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 80025de:	23ff      	movs	r3, #255	; 0xff
 80025e0:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 80025e4:	f001 fc80 	bl	8003ee8 <vPortExitCritical>
	taskENTER_CRITICAL();
 80025e8:	f001 fc5c 	bl	8003ea4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80025ec:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 80025f0:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80025f2:	e001      	b.n	80025f8 <prvUnlockQueue+0x48>
				--cRxLock;
 80025f4:	3c01      	subs	r4, #1
 80025f6:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80025f8:	2c00      	cmp	r4, #0
 80025fa:	dd0a      	ble.n	8002612 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80025fc:	692b      	ldr	r3, [r5, #16]
 80025fe:	b143      	cbz	r3, 8002612 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002600:	f105 0010 	add.w	r0, r5, #16
 8002604:	f000 ff5c 	bl	80034c0 <xTaskRemoveFromEventList>
 8002608:	2800      	cmp	r0, #0
 800260a:	d0f3      	beq.n	80025f4 <prvUnlockQueue+0x44>
					vTaskMissedYield();
 800260c:	f000 ffec 	bl	80035e8 <vTaskMissedYield>
 8002610:	e7f0      	b.n	80025f4 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 8002612:	23ff      	movs	r3, #255	; 0xff
 8002614:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 8002618:	f001 fc66 	bl	8003ee8 <vPortExitCritical>
}
 800261c:	bd38      	pop	{r3, r4, r5, pc}

0800261e <xQueueGenericReset>:
{
 800261e:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8002620:	b1e0      	cbz	r0, 800265c <xQueueGenericReset+0x3e>
 8002622:	460d      	mov	r5, r1
 8002624:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8002626:	f001 fc3d 	bl	8003ea4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800262a:	6823      	ldr	r3, [r4, #0]
 800262c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800262e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002630:	fb01 3002 	mla	r0, r1, r2, r3
 8002634:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002636:	2000      	movs	r0, #0
 8002638:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800263a:	6063      	str	r3, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800263c:	3a01      	subs	r2, #1
 800263e:	fb02 3301 	mla	r3, r2, r1, r3
 8002642:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002644:	23ff      	movs	r3, #255	; 0xff
 8002646:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800264a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 800264e:	b9fd      	cbnz	r5, 8002690 <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002650:	6923      	ldr	r3, [r4, #16]
 8002652:	b963      	cbnz	r3, 800266e <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 8002654:	f001 fc48 	bl	8003ee8 <vPortExitCritical>
}
 8002658:	2001      	movs	r0, #1
 800265a:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800265c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002660:	f383 8811 	msr	BASEPRI, r3
 8002664:	f3bf 8f6f 	isb	sy
 8002668:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800266c:	e7fe      	b.n	800266c <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800266e:	f104 0010 	add.w	r0, r4, #16
 8002672:	f000 ff25 	bl	80034c0 <xTaskRemoveFromEventList>
 8002676:	2800      	cmp	r0, #0
 8002678:	d0ec      	beq.n	8002654 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 800267a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800267e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002682:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8002686:	f3bf 8f4f 	dsb	sy
 800268a:	f3bf 8f6f 	isb	sy
 800268e:	e7e1      	b.n	8002654 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002690:	f104 0010 	add.w	r0, r4, #16
 8002694:	f7ff fede 	bl	8002454 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002698:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800269c:	f7ff feda 	bl	8002454 <vListInitialise>
 80026a0:	e7d8      	b.n	8002654 <xQueueGenericReset+0x36>

080026a2 <prvInitialiseNewQueue>:
{
 80026a2:	b538      	push	{r3, r4, r5, lr}
 80026a4:	461d      	mov	r5, r3
 80026a6:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 80026a8:	460b      	mov	r3, r1
 80026aa:	b949      	cbnz	r1, 80026c0 <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80026ac:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 80026ae:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80026b0:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80026b2:	2101      	movs	r1, #1
 80026b4:	4620      	mov	r0, r4
 80026b6:	f7ff ffb2 	bl	800261e <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 80026ba:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
 80026be:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80026c0:	6022      	str	r2, [r4, #0]
 80026c2:	e7f4      	b.n	80026ae <prvInitialiseNewQueue+0xc>

080026c4 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80026c4:	b940      	cbnz	r0, 80026d8 <xQueueGenericCreateStatic+0x14>
 80026c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026ca:	f383 8811 	msr	BASEPRI, r3
 80026ce:	f3bf 8f6f 	isb	sy
 80026d2:	f3bf 8f4f 	dsb	sy
 80026d6:	e7fe      	b.n	80026d6 <xQueueGenericCreateStatic+0x12>
	{
 80026d8:	b510      	push	{r4, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	461c      	mov	r4, r3
 80026de:	4684      	mov	ip, r0
		configASSERT( pxStaticQueue != NULL );
 80026e0:	b153      	cbz	r3, 80026f8 <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80026e2:	b192      	cbz	r2, 800270a <xQueueGenericCreateStatic+0x46>
 80026e4:	b989      	cbnz	r1, 800270a <xQueueGenericCreateStatic+0x46>
 80026e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026ea:	f383 8811 	msr	BASEPRI, r3
 80026ee:	f3bf 8f6f 	isb	sy
 80026f2:	f3bf 8f4f 	dsb	sy
 80026f6:	e7fe      	b.n	80026f6 <xQueueGenericCreateStatic+0x32>
 80026f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026fc:	f383 8811 	msr	BASEPRI, r3
 8002700:	f3bf 8f6f 	isb	sy
 8002704:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8002708:	e7fe      	b.n	8002708 <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800270a:	b16a      	cbz	r2, 8002728 <xQueueGenericCreateStatic+0x64>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800270c:	2350      	movs	r3, #80	; 0x50
 800270e:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002710:	9b03      	ldr	r3, [sp, #12]
 8002712:	2b50      	cmp	r3, #80	; 0x50
 8002714:	d013      	beq.n	800273e <xQueueGenericCreateStatic+0x7a>
 8002716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800271a:	f383 8811 	msr	BASEPRI, r3
 800271e:	f3bf 8f6f 	isb	sy
 8002722:	f3bf 8f4f 	dsb	sy
 8002726:	e7fe      	b.n	8002726 <xQueueGenericCreateStatic+0x62>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002728:	2900      	cmp	r1, #0
 800272a:	d0ef      	beq.n	800270c <xQueueGenericCreateStatic+0x48>
 800272c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002730:	f383 8811 	msr	BASEPRI, r3
 8002734:	f3bf 8f6f 	isb	sy
 8002738:	f3bf 8f4f 	dsb	sy
 800273c:	e7fe      	b.n	800273c <xQueueGenericCreateStatic+0x78>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800273e:	9b03      	ldr	r3, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002740:	2301      	movs	r3, #1
 8002742:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002746:	9400      	str	r4, [sp, #0]
 8002748:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800274c:	4660      	mov	r0, ip
 800274e:	f7ff ffa8 	bl	80026a2 <prvInitialiseNewQueue>
	}
 8002752:	4620      	mov	r0, r4
 8002754:	b004      	add	sp, #16
 8002756:	bd10      	pop	{r4, pc}

08002758 <xQueueGenericSend>:
{
 8002758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800275a:	b085      	sub	sp, #20
 800275c:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800275e:	b188      	cbz	r0, 8002784 <xQueueGenericSend+0x2c>
 8002760:	460f      	mov	r7, r1
 8002762:	461d      	mov	r5, r3
 8002764:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002766:	b1b1      	cbz	r1, 8002796 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002768:	2d02      	cmp	r5, #2
 800276a:	d120      	bne.n	80027ae <xQueueGenericSend+0x56>
 800276c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800276e:	2b01      	cmp	r3, #1
 8002770:	d01d      	beq.n	80027ae <xQueueGenericSend+0x56>
 8002772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002776:	f383 8811 	msr	BASEPRI, r3
 800277a:	f3bf 8f6f 	isb	sy
 800277e:	f3bf 8f4f 	dsb	sy
 8002782:	e7fe      	b.n	8002782 <xQueueGenericSend+0x2a>
 8002784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002788:	f383 8811 	msr	BASEPRI, r3
 800278c:	f3bf 8f6f 	isb	sy
 8002790:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8002794:	e7fe      	b.n	8002794 <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002796:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002798:	2b00      	cmp	r3, #0
 800279a:	d0e5      	beq.n	8002768 <xQueueGenericSend+0x10>
 800279c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027a0:	f383 8811 	msr	BASEPRI, r3
 80027a4:	f3bf 8f6f 	isb	sy
 80027a8:	f3bf 8f4f 	dsb	sy
 80027ac:	e7fe      	b.n	80027ac <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80027ae:	f000 ffe5 	bl	800377c <xTaskGetSchedulerState>
 80027b2:	4606      	mov	r6, r0
 80027b4:	b958      	cbnz	r0, 80027ce <xQueueGenericSend+0x76>
 80027b6:	9b01      	ldr	r3, [sp, #4]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d048      	beq.n	800284e <xQueueGenericSend+0xf6>
 80027bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027c0:	f383 8811 	msr	BASEPRI, r3
 80027c4:	f3bf 8f6f 	isb	sy
 80027c8:	f3bf 8f4f 	dsb	sy
 80027cc:	e7fe      	b.n	80027cc <xQueueGenericSend+0x74>
 80027ce:	2600      	movs	r6, #0
 80027d0:	e03d      	b.n	800284e <xQueueGenericSend+0xf6>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80027d2:	462a      	mov	r2, r5
 80027d4:	4639      	mov	r1, r7
 80027d6:	4620      	mov	r0, r4
 80027d8:	f7ff fe9d 	bl	8002516 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80027dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80027de:	b97b      	cbnz	r3, 8002800 <xQueueGenericSend+0xa8>
					else if( xYieldRequired != pdFALSE )
 80027e0:	b148      	cbz	r0, 80027f6 <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 80027e2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80027e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027ea:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80027ee:	f3bf 8f4f 	dsb	sy
 80027f2:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80027f6:	f001 fb77 	bl	8003ee8 <vPortExitCritical>
				return pdPASS;
 80027fa:	2001      	movs	r0, #1
}
 80027fc:	b005      	add	sp, #20
 80027fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002800:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002804:	f000 fe5c 	bl	80034c0 <xTaskRemoveFromEventList>
 8002808:	2800      	cmp	r0, #0
 800280a:	d0f4      	beq.n	80027f6 <xQueueGenericSend+0x9e>
							queueYIELD_IF_USING_PREEMPTION();
 800280c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002810:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002814:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8002818:	f3bf 8f4f 	dsb	sy
 800281c:	f3bf 8f6f 	isb	sy
 8002820:	e7e9      	b.n	80027f6 <xQueueGenericSend+0x9e>
					taskEXIT_CRITICAL();
 8002822:	f001 fb61 	bl	8003ee8 <vPortExitCritical>
					return errQUEUE_FULL;
 8002826:	2000      	movs	r0, #0
 8002828:	e7e8      	b.n	80027fc <xQueueGenericSend+0xa4>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800282a:	a802      	add	r0, sp, #8
 800282c:	f000 fe8e 	bl	800354c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002830:	2601      	movs	r6, #1
 8002832:	e019      	b.n	8002868 <xQueueGenericSend+0x110>
		prvLockQueue( pxQueue );
 8002834:	2300      	movs	r3, #0
 8002836:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800283a:	e021      	b.n	8002880 <xQueueGenericSend+0x128>
 800283c:	2300      	movs	r3, #0
 800283e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002842:	e023      	b.n	800288c <xQueueGenericSend+0x134>
				prvUnlockQueue( pxQueue );
 8002844:	4620      	mov	r0, r4
 8002846:	f7ff feb3 	bl	80025b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800284a:	f000 fcfd 	bl	8003248 <xTaskResumeAll>
		taskENTER_CRITICAL();
 800284e:	f001 fb29 	bl	8003ea4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002852:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002854:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002856:	429a      	cmp	r2, r3
 8002858:	d3bb      	bcc.n	80027d2 <xQueueGenericSend+0x7a>
 800285a:	2d02      	cmp	r5, #2
 800285c:	d0b9      	beq.n	80027d2 <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
 800285e:	9b01      	ldr	r3, [sp, #4]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d0de      	beq.n	8002822 <xQueueGenericSend+0xca>
				else if( xEntryTimeSet == pdFALSE )
 8002864:	2e00      	cmp	r6, #0
 8002866:	d0e0      	beq.n	800282a <xQueueGenericSend+0xd2>
		taskEXIT_CRITICAL();
 8002868:	f001 fb3e 	bl	8003ee8 <vPortExitCritical>
		vTaskSuspendAll();
 800286c:	f000 fc52 	bl	8003114 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002870:	f001 fb18 	bl	8003ea4 <vPortEnterCritical>
 8002874:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 8002878:	b252      	sxtb	r2, r2
 800287a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800287e:	d0d9      	beq.n	8002834 <xQueueGenericSend+0xdc>
 8002880:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 8002884:	b252      	sxtb	r2, r2
 8002886:	f1b2 3fff 	cmp.w	r2, #4294967295
 800288a:	d0d7      	beq.n	800283c <xQueueGenericSend+0xe4>
 800288c:	f001 fb2c 	bl	8003ee8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002890:	a901      	add	r1, sp, #4
 8002892:	a802      	add	r0, sp, #8
 8002894:	f000 fe66 	bl	8003564 <xTaskCheckForTimeOut>
 8002898:	b9d8      	cbnz	r0, 80028d2 <xQueueGenericSend+0x17a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800289a:	4620      	mov	r0, r4
 800289c:	f7ff fe1f 	bl	80024de <prvIsQueueFull>
 80028a0:	2800      	cmp	r0, #0
 80028a2:	d0cf      	beq.n	8002844 <xQueueGenericSend+0xec>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80028a4:	9901      	ldr	r1, [sp, #4]
 80028a6:	f104 0010 	add.w	r0, r4, #16
 80028aa:	f000 fdd5 	bl	8003458 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80028ae:	4620      	mov	r0, r4
 80028b0:	f7ff fe7e 	bl	80025b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80028b4:	f000 fcc8 	bl	8003248 <xTaskResumeAll>
 80028b8:	2800      	cmp	r0, #0
 80028ba:	d1c8      	bne.n	800284e <xQueueGenericSend+0xf6>
					portYIELD_WITHIN_API();
 80028bc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80028c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028c4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80028c8:	f3bf 8f4f 	dsb	sy
 80028cc:	f3bf 8f6f 	isb	sy
 80028d0:	e7bd      	b.n	800284e <xQueueGenericSend+0xf6>
			prvUnlockQueue( pxQueue );
 80028d2:	4620      	mov	r0, r4
 80028d4:	f7ff fe6c 	bl	80025b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80028d8:	f000 fcb6 	bl	8003248 <xTaskResumeAll>
			return errQUEUE_FULL;
 80028dc:	2000      	movs	r0, #0
 80028de:	e78d      	b.n	80027fc <xQueueGenericSend+0xa4>

080028e0 <xQueueGenericSendFromISR>:
{
 80028e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 80028e4:	b190      	cbz	r0, 800290c <xQueueGenericSendFromISR+0x2c>
 80028e6:	460f      	mov	r7, r1
 80028e8:	4616      	mov	r6, r2
 80028ea:	461c      	mov	r4, r3
 80028ec:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80028ee:	b1b1      	cbz	r1, 800291e <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80028f0:	2c02      	cmp	r4, #2
 80028f2:	d120      	bne.n	8002936 <xQueueGenericSendFromISR+0x56>
 80028f4:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d01d      	beq.n	8002936 <xQueueGenericSendFromISR+0x56>
 80028fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028fe:	f383 8811 	msr	BASEPRI, r3
 8002902:	f3bf 8f6f 	isb	sy
 8002906:	f3bf 8f4f 	dsb	sy
 800290a:	e7fe      	b.n	800290a <xQueueGenericSendFromISR+0x2a>
 800290c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002910:	f383 8811 	msr	BASEPRI, r3
 8002914:	f3bf 8f6f 	isb	sy
 8002918:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800291c:	e7fe      	b.n	800291c <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800291e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002920:	2b00      	cmp	r3, #0
 8002922:	d0e5      	beq.n	80028f0 <xQueueGenericSendFromISR+0x10>
 8002924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002928:	f383 8811 	msr	BASEPRI, r3
 800292c:	f3bf 8f6f 	isb	sy
 8002930:	f3bf 8f4f 	dsb	sy
 8002934:	e7fe      	b.n	8002934 <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002936:	f001 fbdb 	bl	80040f0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800293a:	f3ef 8811 	mrs	r8, BASEPRI
 800293e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002942:	f383 8811 	msr	BASEPRI, r3
 8002946:	f3bf 8f6f 	isb	sy
 800294a:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800294e:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8002950:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8002952:	429a      	cmp	r2, r3
 8002954:	d306      	bcc.n	8002964 <xQueueGenericSendFromISR+0x84>
 8002956:	2c02      	cmp	r4, #2
 8002958:	d004      	beq.n	8002964 <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 800295a:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800295c:	f388 8811 	msr	BASEPRI, r8
}
 8002960:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 8002964:	f895 9045 	ldrb.w	r9, [r5, #69]	; 0x45
 8002968:	fa4f f989 	sxtb.w	r9, r9
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800296c:	6bab      	ldr	r3, [r5, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800296e:	4622      	mov	r2, r4
 8002970:	4639      	mov	r1, r7
 8002972:	4628      	mov	r0, r5
 8002974:	f7ff fdcf 	bl	8002516 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8002978:	f1b9 3fff 	cmp.w	r9, #4294967295
 800297c:	d006      	beq.n	800298c <xQueueGenericSendFromISR+0xac>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800297e:	f109 0301 	add.w	r3, r9, #1
 8002982:	b25b      	sxtb	r3, r3
 8002984:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			xReturn = pdPASS;
 8002988:	2001      	movs	r0, #1
 800298a:	e7e7      	b.n	800295c <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800298c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800298e:	b90b      	cbnz	r3, 8002994 <xQueueGenericSendFromISR+0xb4>
			xReturn = pdPASS;
 8002990:	2001      	movs	r0, #1
 8002992:	e7e3      	b.n	800295c <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002994:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8002998:	f000 fd92 	bl	80034c0 <xTaskRemoveFromEventList>
 800299c:	b118      	cbz	r0, 80029a6 <xQueueGenericSendFromISR+0xc6>
							if( pxHigherPriorityTaskWoken != NULL )
 800299e:	b126      	cbz	r6, 80029aa <xQueueGenericSendFromISR+0xca>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80029a0:	2001      	movs	r0, #1
 80029a2:	6030      	str	r0, [r6, #0]
 80029a4:	e7da      	b.n	800295c <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 80029a6:	2001      	movs	r0, #1
 80029a8:	e7d8      	b.n	800295c <xQueueGenericSendFromISR+0x7c>
 80029aa:	2001      	movs	r0, #1
 80029ac:	e7d6      	b.n	800295c <xQueueGenericSendFromISR+0x7c>

080029ae <xQueueReceive>:
{
 80029ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029b0:	b085      	sub	sp, #20
 80029b2:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 80029b4:	b190      	cbz	r0, 80029dc <xQueueReceive+0x2e>
 80029b6:	460f      	mov	r7, r1
 80029b8:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80029ba:	b1c1      	cbz	r1, 80029ee <xQueueReceive+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80029bc:	f000 fede 	bl	800377c <xTaskGetSchedulerState>
 80029c0:	4606      	mov	r6, r0
 80029c2:	bb00      	cbnz	r0, 8002a06 <xQueueReceive+0x58>
 80029c4:	9b01      	ldr	r3, [sp, #4]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d05e      	beq.n	8002a88 <xQueueReceive+0xda>
	__asm volatile
 80029ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029ce:	f383 8811 	msr	BASEPRI, r3
 80029d2:	f3bf 8f6f 	isb	sy
 80029d6:	f3bf 8f4f 	dsb	sy
 80029da:	e7fe      	b.n	80029da <xQueueReceive+0x2c>
 80029dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029e0:	f383 8811 	msr	BASEPRI, r3
 80029e4:	f3bf 8f6f 	isb	sy
 80029e8:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 80029ec:	e7fe      	b.n	80029ec <xQueueReceive+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80029ee:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d0e3      	beq.n	80029bc <xQueueReceive+0xe>
 80029f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029f8:	f383 8811 	msr	BASEPRI, r3
 80029fc:	f3bf 8f6f 	isb	sy
 8002a00:	f3bf 8f4f 	dsb	sy
 8002a04:	e7fe      	b.n	8002a04 <xQueueReceive+0x56>
 8002a06:	2600      	movs	r6, #0
 8002a08:	e03e      	b.n	8002a88 <xQueueReceive+0xda>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002a0a:	4639      	mov	r1, r7
 8002a0c:	4620      	mov	r0, r4
 8002a0e:	f7ff fdbd 	bl	800258c <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002a12:	3d01      	subs	r5, #1
 8002a14:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a16:	6923      	ldr	r3, [r4, #16]
 8002a18:	b923      	cbnz	r3, 8002a24 <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
 8002a1a:	f001 fa65 	bl	8003ee8 <vPortExitCritical>
				return pdPASS;
 8002a1e:	2001      	movs	r0, #1
}
 8002a20:	b005      	add	sp, #20
 8002a22:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a24:	f104 0010 	add.w	r0, r4, #16
 8002a28:	f000 fd4a 	bl	80034c0 <xTaskRemoveFromEventList>
 8002a2c:	2800      	cmp	r0, #0
 8002a2e:	d0f4      	beq.n	8002a1a <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 8002a30:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002a34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a38:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8002a3c:	f3bf 8f4f 	dsb	sy
 8002a40:	f3bf 8f6f 	isb	sy
 8002a44:	e7e9      	b.n	8002a1a <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
 8002a46:	f001 fa4f 	bl	8003ee8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8002a4a:	2000      	movs	r0, #0
 8002a4c:	e7e8      	b.n	8002a20 <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002a4e:	a802      	add	r0, sp, #8
 8002a50:	f000 fd7c 	bl	800354c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002a54:	2601      	movs	r6, #1
 8002a56:	e021      	b.n	8002a9c <xQueueReceive+0xee>
		prvLockQueue( pxQueue );
 8002a58:	2300      	movs	r3, #0
 8002a5a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8002a5e:	e029      	b.n	8002ab4 <xQueueReceive+0x106>
 8002a60:	2300      	movs	r3, #0
 8002a62:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002a66:	e02b      	b.n	8002ac0 <xQueueReceive+0x112>
				prvUnlockQueue( pxQueue );
 8002a68:	4620      	mov	r0, r4
 8002a6a:	f7ff fda1 	bl	80025b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002a6e:	f000 fbeb 	bl	8003248 <xTaskResumeAll>
 8002a72:	e009      	b.n	8002a88 <xQueueReceive+0xda>
			prvUnlockQueue( pxQueue );
 8002a74:	4620      	mov	r0, r4
 8002a76:	f7ff fd9b 	bl	80025b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002a7a:	f000 fbe5 	bl	8003248 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002a7e:	4620      	mov	r0, r4
 8002a80:	f7ff fd3c 	bl	80024fc <prvIsQueueEmpty>
 8002a84:	2800      	cmp	r0, #0
 8002a86:	d13f      	bne.n	8002b08 <xQueueReceive+0x15a>
		taskENTER_CRITICAL();
 8002a88:	f001 fa0c 	bl	8003ea4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a8c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002a8e:	2d00      	cmp	r5, #0
 8002a90:	d1bb      	bne.n	8002a0a <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8002a92:	9b01      	ldr	r3, [sp, #4]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d0d6      	beq.n	8002a46 <xQueueReceive+0x98>
				else if( xEntryTimeSet == pdFALSE )
 8002a98:	2e00      	cmp	r6, #0
 8002a9a:	d0d8      	beq.n	8002a4e <xQueueReceive+0xa0>
		taskEXIT_CRITICAL();
 8002a9c:	f001 fa24 	bl	8003ee8 <vPortExitCritical>
		vTaskSuspendAll();
 8002aa0:	f000 fb38 	bl	8003114 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002aa4:	f001 f9fe 	bl	8003ea4 <vPortEnterCritical>
 8002aa8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002aac:	b25b      	sxtb	r3, r3
 8002aae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ab2:	d0d1      	beq.n	8002a58 <xQueueReceive+0xaa>
 8002ab4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002ab8:	b25b      	sxtb	r3, r3
 8002aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002abe:	d0cf      	beq.n	8002a60 <xQueueReceive+0xb2>
 8002ac0:	f001 fa12 	bl	8003ee8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002ac4:	a901      	add	r1, sp, #4
 8002ac6:	a802      	add	r0, sp, #8
 8002ac8:	f000 fd4c 	bl	8003564 <xTaskCheckForTimeOut>
 8002acc:	2800      	cmp	r0, #0
 8002ace:	d1d1      	bne.n	8002a74 <xQueueReceive+0xc6>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002ad0:	4620      	mov	r0, r4
 8002ad2:	f7ff fd13 	bl	80024fc <prvIsQueueEmpty>
 8002ad6:	2800      	cmp	r0, #0
 8002ad8:	d0c6      	beq.n	8002a68 <xQueueReceive+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002ada:	9901      	ldr	r1, [sp, #4]
 8002adc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002ae0:	f000 fcba 	bl	8003458 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002ae4:	4620      	mov	r0, r4
 8002ae6:	f7ff fd63 	bl	80025b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002aea:	f000 fbad 	bl	8003248 <xTaskResumeAll>
 8002aee:	2800      	cmp	r0, #0
 8002af0:	d1ca      	bne.n	8002a88 <xQueueReceive+0xda>
					portYIELD_WITHIN_API();
 8002af2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002af6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002afa:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8002afe:	f3bf 8f4f 	dsb	sy
 8002b02:	f3bf 8f6f 	isb	sy
 8002b06:	e7bf      	b.n	8002a88 <xQueueReceive+0xda>
				return errQUEUE_EMPTY;
 8002b08:	2000      	movs	r0, #0
 8002b0a:	e789      	b.n	8002a20 <xQueueReceive+0x72>

08002b0c <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	2b07      	cmp	r3, #7
 8002b10:	d80c      	bhi.n	8002b2c <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002b12:	4a07      	ldr	r2, [pc, #28]	; (8002b30 <vQueueAddToRegistry+0x24>)
 8002b14:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8002b18:	b10a      	cbz	r2, 8002b1e <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	e7f7      	b.n	8002b0e <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002b1e:	4a04      	ldr	r2, [pc, #16]	; (8002b30 <vQueueAddToRegistry+0x24>)
 8002b20:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002b24:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8002b28:	6050      	str	r0, [r2, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002b2a:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	20000a38 	.word	0x20000a38

08002b34 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002b34:	b570      	push	{r4, r5, r6, lr}
 8002b36:	4604      	mov	r4, r0
 8002b38:	460d      	mov	r5, r1
 8002b3a:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002b3c:	f001 f9b2 	bl	8003ea4 <vPortEnterCritical>
 8002b40:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002b44:	b25b      	sxtb	r3, r3
 8002b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b4a:	d00d      	beq.n	8002b68 <vQueueWaitForMessageRestricted+0x34>
 8002b4c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002b50:	b25b      	sxtb	r3, r3
 8002b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b56:	d00b      	beq.n	8002b70 <vQueueWaitForMessageRestricted+0x3c>
 8002b58:	f001 f9c6 	bl	8003ee8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002b5c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002b5e:	b15b      	cbz	r3, 8002b78 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002b60:	4620      	mov	r0, r4
 8002b62:	f7ff fd25 	bl	80025b0 <prvUnlockQueue>
	}
 8002b66:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 8002b68:	2300      	movs	r3, #0
 8002b6a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8002b6e:	e7ed      	b.n	8002b4c <vQueueWaitForMessageRestricted+0x18>
 8002b70:	2300      	movs	r3, #0
 8002b72:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002b76:	e7ef      	b.n	8002b58 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002b78:	4632      	mov	r2, r6
 8002b7a:	4629      	mov	r1, r5
 8002b7c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002b80:	f000 fc82 	bl	8003488 <vTaskPlaceOnEventListRestricted>
 8002b84:	e7ec      	b.n	8002b60 <vQueueWaitForMessageRestricted+0x2c>

08002b86 <prvTaskCheckFreeStackSpace>:

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;
 8002b86:	2300      	movs	r3, #0

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8002b88:	e001      	b.n	8002b8e <prvTaskCheckFreeStackSpace+0x8>
		{
			pucStackByte -= portSTACK_GROWTH;
 8002b8a:	3001      	adds	r0, #1
			ulCount++;
 8002b8c:	3301      	adds	r3, #1
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8002b8e:	7802      	ldrb	r2, [r0, #0]
 8002b90:	2aa5      	cmp	r2, #165	; 0xa5
 8002b92:	d0fa      	beq.n	8002b8a <prvTaskCheckFreeStackSpace+0x4>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */

		return ( configSTACK_DEPTH_TYPE ) ulCount;
	}
 8002b94:	f3c3 008f 	ubfx	r0, r3, #2, #16
 8002b98:	4770      	bx	lr
	...

08002b9c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b9c:	4b08      	ldr	r3, [pc, #32]	; (8002bc0 <prvResetNextTaskUnblockTime+0x24>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	b923      	cbnz	r3, 8002bae <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002ba4:	4b07      	ldr	r3, [pc, #28]	; (8002bc4 <prvResetNextTaskUnblockTime+0x28>)
 8002ba6:	f04f 32ff 	mov.w	r2, #4294967295
 8002baa:	601a      	str	r2, [r3, #0]
 8002bac:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002bae:	4b04      	ldr	r3, [pc, #16]	; (8002bc0 <prvResetNextTaskUnblockTime+0x24>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002bb6:	685a      	ldr	r2, [r3, #4]
 8002bb8:	4b02      	ldr	r3, [pc, #8]	; (8002bc4 <prvResetNextTaskUnblockTime+0x28>)
 8002bba:	601a      	str	r2, [r3, #0]
	}
}
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	20000a7c 	.word	0x20000a7c
 8002bc4:	20000f2c 	.word	0x20000f2c

08002bc8 <prvInitialiseNewTask>:
{
 8002bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002bcc:	4680      	mov	r8, r0
 8002bce:	460d      	mov	r5, r1
 8002bd0:	4617      	mov	r7, r2
 8002bd2:	4699      	mov	r9, r3
 8002bd4:	9e08      	ldr	r6, [sp, #32]
 8002bd6:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8002bda:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002bdc:	0092      	lsls	r2, r2, #2
 8002bde:	21a5      	movs	r1, #165	; 0xa5
 8002be0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002be2:	f003 fa9f 	bl	8006124 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002be6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002be8:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
 8002bec:	3a01      	subs	r2, #1
 8002bee:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002bf2:	f027 0707 	bic.w	r7, r7, #7
	if( pcName != NULL )
 8002bf6:	2d00      	cmp	r5, #0
 8002bf8:	d043      	beq.n	8002c82 <prvInitialiseNewTask+0xba>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002bfa:	f04f 0c00 	mov.w	ip, #0
 8002bfe:	f1bc 0f0f 	cmp.w	ip, #15
 8002c02:	d809      	bhi.n	8002c18 <prvInitialiseNewTask+0x50>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002c04:	f815 300c 	ldrb.w	r3, [r5, ip]
 8002c08:	eb04 020c 	add.w	r2, r4, ip
 8002c0c:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 8002c10:	b113      	cbz	r3, 8002c18 <prvInitialiseNewTask+0x50>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002c12:	f10c 0c01 	add.w	ip, ip, #1
 8002c16:	e7f2      	b.n	8002bfe <prvInitialiseNewTask+0x36>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002c18:	2300      	movs	r3, #0
 8002c1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002c1e:	2e37      	cmp	r6, #55	; 0x37
 8002c20:	d900      	bls.n	8002c24 <prvInitialiseNewTask+0x5c>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002c22:	2637      	movs	r6, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 8002c24:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8002c26:	64e6      	str	r6, [r4, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002c28:	2500      	movs	r5, #0
 8002c2a:	6525      	str	r5, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002c2c:	1d20      	adds	r0, r4, #4
 8002c2e:	f7ff fc1c 	bl	800246a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002c32:	f104 0018 	add.w	r0, r4, #24
 8002c36:	f7ff fc18 	bl	800246a <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002c3a:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c3c:	f1c6 0638 	rsb	r6, r6, #56	; 0x38
 8002c40:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002c42:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulRunTimeCounter = 0UL;
 8002c44:	6565      	str	r5, [r4, #84]	; 0x54
		pxNewTCB->ulNotifiedValue = 0;
 8002c46:	f8c4 50a4 	str.w	r5, [r4, #164]	; 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002c4a:	f884 50a8 	strb.w	r5, [r4, #168]	; 0xa8
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002c4e:	224c      	movs	r2, #76	; 0x4c
 8002c50:	4629      	mov	r1, r5
 8002c52:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002c56:	f003 fa65 	bl	8006124 <memset>
 8002c5a:	4b0c      	ldr	r3, [pc, #48]	; (8002c8c <prvInitialiseNewTask+0xc4>)
 8002c5c:	65e3      	str	r3, [r4, #92]	; 0x5c
 8002c5e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8002c62:	6622      	str	r2, [r4, #96]	; 0x60
 8002c64:	33d0      	adds	r3, #208	; 0xd0
 8002c66:	6663      	str	r3, [r4, #100]	; 0x64
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002c68:	464a      	mov	r2, r9
 8002c6a:	4641      	mov	r1, r8
 8002c6c:	4638      	mov	r0, r7
 8002c6e:	f001 f8f1 	bl	8003e54 <pxPortInitialiseStack>
 8002c72:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8002c74:	f1ba 0f00 	cmp.w	sl, #0
 8002c78:	d001      	beq.n	8002c7e <prvInitialiseNewTask+0xb6>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002c7a:	f8ca 4000 	str.w	r4, [sl]
}
 8002c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002c82:	2300      	movs	r3, #0
 8002c84:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8002c88:	e7c9      	b.n	8002c1e <prvInitialiseNewTask+0x56>
 8002c8a:	bf00      	nop
 8002c8c:	20004cd4 	.word	0x20004cd4

08002c90 <prvInitialiseTaskLists>:
{
 8002c90:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002c92:	2400      	movs	r4, #0
 8002c94:	e007      	b.n	8002ca6 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002c96:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8002c9a:	0093      	lsls	r3, r2, #2
 8002c9c:	480e      	ldr	r0, [pc, #56]	; (8002cd8 <prvInitialiseTaskLists+0x48>)
 8002c9e:	4418      	add	r0, r3
 8002ca0:	f7ff fbd8 	bl	8002454 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002ca4:	3401      	adds	r4, #1
 8002ca6:	2c37      	cmp	r4, #55	; 0x37
 8002ca8:	d9f5      	bls.n	8002c96 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8002caa:	4d0c      	ldr	r5, [pc, #48]	; (8002cdc <prvInitialiseTaskLists+0x4c>)
 8002cac:	4628      	mov	r0, r5
 8002cae:	f7ff fbd1 	bl	8002454 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002cb2:	4c0b      	ldr	r4, [pc, #44]	; (8002ce0 <prvInitialiseTaskLists+0x50>)
 8002cb4:	4620      	mov	r0, r4
 8002cb6:	f7ff fbcd 	bl	8002454 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002cba:	480a      	ldr	r0, [pc, #40]	; (8002ce4 <prvInitialiseTaskLists+0x54>)
 8002cbc:	f7ff fbca 	bl	8002454 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8002cc0:	4809      	ldr	r0, [pc, #36]	; (8002ce8 <prvInitialiseTaskLists+0x58>)
 8002cc2:	f7ff fbc7 	bl	8002454 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8002cc6:	4809      	ldr	r0, [pc, #36]	; (8002cec <prvInitialiseTaskLists+0x5c>)
 8002cc8:	f7ff fbc4 	bl	8002454 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8002ccc:	4b08      	ldr	r3, [pc, #32]	; (8002cf0 <prvInitialiseTaskLists+0x60>)
 8002cce:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002cd0:	4b08      	ldr	r3, [pc, #32]	; (8002cf4 <prvInitialiseTaskLists+0x64>)
 8002cd2:	601c      	str	r4, [r3, #0]
}
 8002cd4:	bd38      	pop	{r3, r4, r5, pc}
 8002cd6:	bf00      	nop
 8002cd8:	20000a84 	.word	0x20000a84
 8002cdc:	20000f00 	.word	0x20000f00
 8002ce0:	20000f14 	.word	0x20000f14
 8002ce4:	20000f38 	.word	0x20000f38
 8002ce8:	20000f64 	.word	0x20000f64
 8002cec:	20000f50 	.word	0x20000f50
 8002cf0:	20000a7c 	.word	0x20000a7c
 8002cf4:	20000a80 	.word	0x20000a80

08002cf8 <prvAddNewTaskToReadyList>:
{
 8002cf8:	b510      	push	{r4, lr}
 8002cfa:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8002cfc:	f001 f8d2 	bl	8003ea4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8002d00:	4a22      	ldr	r2, [pc, #136]	; (8002d8c <prvAddNewTaskToReadyList+0x94>)
 8002d02:	6813      	ldr	r3, [r2, #0]
 8002d04:	3301      	adds	r3, #1
 8002d06:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002d08:	4b21      	ldr	r3, [pc, #132]	; (8002d90 <prvAddNewTaskToReadyList+0x98>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	b15b      	cbz	r3, 8002d26 <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 8002d0e:	4b21      	ldr	r3, [pc, #132]	; (8002d94 <prvAddNewTaskToReadyList+0x9c>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	b96b      	cbnz	r3, 8002d30 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002d14:	4b1e      	ldr	r3, [pc, #120]	; (8002d90 <prvAddNewTaskToReadyList+0x98>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d1a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d807      	bhi.n	8002d30 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 8002d20:	4b1b      	ldr	r3, [pc, #108]	; (8002d90 <prvAddNewTaskToReadyList+0x98>)
 8002d22:	601c      	str	r4, [r3, #0]
 8002d24:	e004      	b.n	8002d30 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 8002d26:	4b1a      	ldr	r3, [pc, #104]	; (8002d90 <prvAddNewTaskToReadyList+0x98>)
 8002d28:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002d2a:	6813      	ldr	r3, [r2, #0]
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d029      	beq.n	8002d84 <prvAddNewTaskToReadyList+0x8c>
		uxTaskNumber++;
 8002d30:	4a19      	ldr	r2, [pc, #100]	; (8002d98 <prvAddNewTaskToReadyList+0xa0>)
 8002d32:	6813      	ldr	r3, [r2, #0]
 8002d34:	3301      	adds	r3, #1
 8002d36:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002d38:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8002d3a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002d3c:	4b17      	ldr	r3, [pc, #92]	; (8002d9c <prvAddNewTaskToReadyList+0xa4>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4298      	cmp	r0, r3
 8002d42:	d901      	bls.n	8002d48 <prvAddNewTaskToReadyList+0x50>
 8002d44:	4b15      	ldr	r3, [pc, #84]	; (8002d9c <prvAddNewTaskToReadyList+0xa4>)
 8002d46:	6018      	str	r0, [r3, #0]
 8002d48:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002d4c:	1d21      	adds	r1, r4, #4
 8002d4e:	4b14      	ldr	r3, [pc, #80]	; (8002da0 <prvAddNewTaskToReadyList+0xa8>)
 8002d50:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002d54:	f7ff fb8c 	bl	8002470 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8002d58:	f001 f8c6 	bl	8003ee8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8002d5c:	4b0d      	ldr	r3, [pc, #52]	; (8002d94 <prvAddNewTaskToReadyList+0x9c>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	b17b      	cbz	r3, 8002d82 <prvAddNewTaskToReadyList+0x8a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002d62:	4b0b      	ldr	r3, [pc, #44]	; (8002d90 <prvAddNewTaskToReadyList+0x98>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d68:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d209      	bcs.n	8002d82 <prvAddNewTaskToReadyList+0x8a>
			taskYIELD_IF_USING_PREEMPTION();
 8002d6e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002d72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d76:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8002d7a:	f3bf 8f4f 	dsb	sy
 8002d7e:	f3bf 8f6f 	isb	sy
}
 8002d82:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 8002d84:	f7ff ff84 	bl	8002c90 <prvInitialiseTaskLists>
 8002d88:	e7d2      	b.n	8002d30 <prvAddNewTaskToReadyList+0x38>
 8002d8a:	bf00      	nop
 8002d8c:	20000eec 	.word	0x20000eec
 8002d90:	20000a78 	.word	0x20000a78
 8002d94:	20000f4c 	.word	0x20000f4c
 8002d98:	20000ef8 	.word	0x20000ef8
 8002d9c:	20000efc 	.word	0x20000efc
 8002da0:	20000a84 	.word	0x20000a84

08002da4 <prvDeleteTCB>:
	{
 8002da4:	b510      	push	{r4, lr}
 8002da6:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8002da8:	3058      	adds	r0, #88	; 0x58
 8002daa:	f003 f9d3 	bl	8006154 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002dae:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
 8002db2:	b163      	cbz	r3, 8002dce <prvDeleteTCB+0x2a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d011      	beq.n	8002ddc <prvDeleteTCB+0x38>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d00e      	beq.n	8002dda <prvDeleteTCB+0x36>
 8002dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dc0:	f383 8811 	msr	BASEPRI, r3
 8002dc4:	f3bf 8f6f 	isb	sy
 8002dc8:	f3bf 8f4f 	dsb	sy
 8002dcc:	e7fe      	b.n	8002dcc <prvDeleteTCB+0x28>
				vPortFree( pxTCB->pxStack );
 8002dce:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002dd0:	f001 fa9e 	bl	8004310 <vPortFree>
				vPortFree( pxTCB );
 8002dd4:	4620      	mov	r0, r4
 8002dd6:	f001 fa9b 	bl	8004310 <vPortFree>
	}
 8002dda:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 8002ddc:	4620      	mov	r0, r4
 8002dde:	f001 fa97 	bl	8004310 <vPortFree>
 8002de2:	e7fa      	b.n	8002dda <prvDeleteTCB+0x36>

08002de4 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002de4:	4b0f      	ldr	r3, [pc, #60]	; (8002e24 <prvCheckTasksWaitingTermination+0x40>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	b1d3      	cbz	r3, 8002e20 <prvCheckTasksWaitingTermination+0x3c>
{
 8002dea:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 8002dec:	f001 f85a 	bl	8003ea4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002df0:	4b0d      	ldr	r3, [pc, #52]	; (8002e28 <prvCheckTasksWaitingTermination+0x44>)
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002df6:	1d20      	adds	r0, r4, #4
 8002df8:	f7ff fb5e 	bl	80024b8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002dfc:	4a0b      	ldr	r2, [pc, #44]	; (8002e2c <prvCheckTasksWaitingTermination+0x48>)
 8002dfe:	6813      	ldr	r3, [r2, #0]
 8002e00:	3b01      	subs	r3, #1
 8002e02:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002e04:	4a07      	ldr	r2, [pc, #28]	; (8002e24 <prvCheckTasksWaitingTermination+0x40>)
 8002e06:	6813      	ldr	r3, [r2, #0]
 8002e08:	3b01      	subs	r3, #1
 8002e0a:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 8002e0c:	f001 f86c 	bl	8003ee8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8002e10:	4620      	mov	r0, r4
 8002e12:	f7ff ffc7 	bl	8002da4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002e16:	4b03      	ldr	r3, [pc, #12]	; (8002e24 <prvCheckTasksWaitingTermination+0x40>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d1e6      	bne.n	8002dec <prvCheckTasksWaitingTermination+0x8>
}
 8002e1e:	bd10      	pop	{r4, pc}
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	20000ef0 	.word	0x20000ef0
 8002e28:	20000f64 	.word	0x20000f64
 8002e2c:	20000eec 	.word	0x20000eec

08002e30 <prvIdleTask>:
{
 8002e30:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 8002e32:	f7ff ffd7 	bl	8002de4 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002e36:	4b07      	ldr	r3, [pc, #28]	; (8002e54 <prvIdleTask+0x24>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d9f9      	bls.n	8002e32 <prvIdleTask+0x2>
				taskYIELD();
 8002e3e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002e42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e46:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8002e4a:	f3bf 8f4f 	dsb	sy
 8002e4e:	f3bf 8f6f 	isb	sy
 8002e52:	e7ee      	b.n	8002e32 <prvIdleTask+0x2>
 8002e54:	20000a84 	.word	0x20000a84

08002e58 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002e58:	b570      	push	{r4, r5, r6, lr}
 8002e5a:	4604      	mov	r4, r0
 8002e5c:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002e5e:	4b17      	ldr	r3, [pc, #92]	; (8002ebc <prvAddCurrentTaskToDelayedList+0x64>)
 8002e60:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002e62:	4b17      	ldr	r3, [pc, #92]	; (8002ec0 <prvAddCurrentTaskToDelayedList+0x68>)
 8002e64:	6818      	ldr	r0, [r3, #0]
 8002e66:	3004      	adds	r0, #4
 8002e68:	f7ff fb26 	bl	80024b8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002e6c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002e70:	d00d      	beq.n	8002e8e <prvAddCurrentTaskToDelayedList+0x36>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002e72:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002e74:	4b12      	ldr	r3, [pc, #72]	; (8002ec0 <prvAddCurrentTaskToDelayedList+0x68>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8002e7a:	42a6      	cmp	r6, r4
 8002e7c:	d910      	bls.n	8002ea0 <prvAddCurrentTaskToDelayedList+0x48>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002e7e:	4b11      	ldr	r3, [pc, #68]	; (8002ec4 <prvAddCurrentTaskToDelayedList+0x6c>)
 8002e80:	6818      	ldr	r0, [r3, #0]
 8002e82:	4b0f      	ldr	r3, [pc, #60]	; (8002ec0 <prvAddCurrentTaskToDelayedList+0x68>)
 8002e84:	6819      	ldr	r1, [r3, #0]
 8002e86:	3104      	adds	r1, #4
 8002e88:	f7ff fafd 	bl	8002486 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002e8c:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002e8e:	2d00      	cmp	r5, #0
 8002e90:	d0ef      	beq.n	8002e72 <prvAddCurrentTaskToDelayedList+0x1a>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002e92:	4b0b      	ldr	r3, [pc, #44]	; (8002ec0 <prvAddCurrentTaskToDelayedList+0x68>)
 8002e94:	6819      	ldr	r1, [r3, #0]
 8002e96:	3104      	adds	r1, #4
 8002e98:	480b      	ldr	r0, [pc, #44]	; (8002ec8 <prvAddCurrentTaskToDelayedList+0x70>)
 8002e9a:	f7ff fae9 	bl	8002470 <vListInsertEnd>
 8002e9e:	e7f5      	b.n	8002e8c <prvAddCurrentTaskToDelayedList+0x34>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002ea0:	4b0a      	ldr	r3, [pc, #40]	; (8002ecc <prvAddCurrentTaskToDelayedList+0x74>)
 8002ea2:	6818      	ldr	r0, [r3, #0]
 8002ea4:	4b06      	ldr	r3, [pc, #24]	; (8002ec0 <prvAddCurrentTaskToDelayedList+0x68>)
 8002ea6:	6819      	ldr	r1, [r3, #0]
 8002ea8:	3104      	adds	r1, #4
 8002eaa:	f7ff faec 	bl	8002486 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002eae:	4b08      	ldr	r3, [pc, #32]	; (8002ed0 <prvAddCurrentTaskToDelayedList+0x78>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	42a3      	cmp	r3, r4
 8002eb4:	d9ea      	bls.n	8002e8c <prvAddCurrentTaskToDelayedList+0x34>
					xNextTaskUnblockTime = xTimeToWake;
 8002eb6:	4b06      	ldr	r3, [pc, #24]	; (8002ed0 <prvAddCurrentTaskToDelayedList+0x78>)
 8002eb8:	601c      	str	r4, [r3, #0]
}
 8002eba:	e7e7      	b.n	8002e8c <prvAddCurrentTaskToDelayedList+0x34>
 8002ebc:	20000f78 	.word	0x20000f78
 8002ec0:	20000a78 	.word	0x20000a78
 8002ec4:	20000a80 	.word	0x20000a80
 8002ec8:	20000f50 	.word	0x20000f50
 8002ecc:	20000a7c 	.word	0x20000a7c
 8002ed0:	20000f2c 	.word	0x20000f2c

08002ed4 <prvWriteNameToBuffer>:
	{
 8002ed4:	b510      	push	{r4, lr}
 8002ed6:	4604      	mov	r4, r0
		strcpy( pcBuffer, pcTaskName );
 8002ed8:	f003 f9f4 	bl	80062c4 <strcpy>
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 8002edc:	4620      	mov	r0, r4
 8002ede:	f7fd f987 	bl	80001f0 <strlen>
 8002ee2:	e002      	b.n	8002eea <prvWriteNameToBuffer+0x16>
			pcBuffer[ x ] = ' ';
 8002ee4:	2320      	movs	r3, #32
 8002ee6:	5423      	strb	r3, [r4, r0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 8002ee8:	3001      	adds	r0, #1
 8002eea:	280e      	cmp	r0, #14
 8002eec:	d9fa      	bls.n	8002ee4 <prvWriteNameToBuffer+0x10>
		pcBuffer[ x ] = ( char ) 0x00;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	5423      	strb	r3, [r4, r0]
	}
 8002ef2:	4420      	add	r0, r4
 8002ef4:	bd10      	pop	{r4, pc}

08002ef6 <xTaskCreateStatic>:
	{
 8002ef6:	b530      	push	{r4, r5, lr}
 8002ef8:	b087      	sub	sp, #28
 8002efa:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 8002efc:	b17c      	cbz	r4, 8002f1e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002efe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002f00:	b1b5      	cbz	r5, 8002f30 <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 8002f02:	25ac      	movs	r5, #172	; 0xac
 8002f04:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002f06:	9d04      	ldr	r5, [sp, #16]
 8002f08:	2dac      	cmp	r5, #172	; 0xac
 8002f0a:	d01a      	beq.n	8002f42 <xTaskCreateStatic+0x4c>
 8002f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f10:	f383 8811 	msr	BASEPRI, r3
 8002f14:	f3bf 8f6f 	isb	sy
 8002f18:	f3bf 8f4f 	dsb	sy
 8002f1c:	e7fe      	b.n	8002f1c <xTaskCreateStatic+0x26>
 8002f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f22:	f383 8811 	msr	BASEPRI, r3
 8002f26:	f3bf 8f6f 	isb	sy
 8002f2a:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8002f2e:	e7fe      	b.n	8002f2e <xTaskCreateStatic+0x38>
 8002f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f34:	f383 8811 	msr	BASEPRI, r3
 8002f38:	f3bf 8f6f 	isb	sy
 8002f3c:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8002f40:	e7fe      	b.n	8002f40 <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002f42:	9d04      	ldr	r5, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002f44:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002f46:	632c      	str	r4, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002f48:	2402      	movs	r4, #2
 8002f4a:	f885 40a9 	strb.w	r4, [r5, #169]	; 0xa9
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002f4e:	2400      	movs	r4, #0
 8002f50:	9403      	str	r4, [sp, #12]
 8002f52:	9502      	str	r5, [sp, #8]
 8002f54:	ac05      	add	r4, sp, #20
 8002f56:	9401      	str	r4, [sp, #4]
 8002f58:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8002f5a:	9400      	str	r4, [sp, #0]
 8002f5c:	f7ff fe34 	bl	8002bc8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002f60:	980c      	ldr	r0, [sp, #48]	; 0x30
 8002f62:	f7ff fec9 	bl	8002cf8 <prvAddNewTaskToReadyList>
	}
 8002f66:	9805      	ldr	r0, [sp, #20]
 8002f68:	b007      	add	sp, #28
 8002f6a:	bd30      	pop	{r4, r5, pc}

08002f6c <xTaskCreate>:
	{
 8002f6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002f70:	b085      	sub	sp, #20
 8002f72:	4607      	mov	r7, r0
 8002f74:	4688      	mov	r8, r1
 8002f76:	4614      	mov	r4, r2
 8002f78:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002f7a:	0090      	lsls	r0, r2, #2
 8002f7c:	f001 f94a 	bl	8004214 <pvPortMalloc>
			if( pxStack != NULL )
 8002f80:	b300      	cbz	r0, 8002fc4 <xTaskCreate+0x58>
 8002f82:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002f84:	20ac      	movs	r0, #172	; 0xac
 8002f86:	f001 f945 	bl	8004214 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8002f8a:	4605      	mov	r5, r0
 8002f8c:	b1b0      	cbz	r0, 8002fbc <xTaskCreate+0x50>
					pxNewTCB->pxStack = pxStack;
 8002f8e:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 8002f92:	b1e5      	cbz	r5, 8002fce <xTaskCreate+0x62>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002f94:	2300      	movs	r3, #0
 8002f96:	f885 30a9 	strb.w	r3, [r5, #169]	; 0xa9
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002f9a:	9303      	str	r3, [sp, #12]
 8002f9c:	9502      	str	r5, [sp, #8]
 8002f9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002fa0:	9301      	str	r3, [sp, #4]
 8002fa2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002fa4:	9300      	str	r3, [sp, #0]
 8002fa6:	4633      	mov	r3, r6
 8002fa8:	4622      	mov	r2, r4
 8002faa:	4641      	mov	r1, r8
 8002fac:	4638      	mov	r0, r7
 8002fae:	f7ff fe0b 	bl	8002bc8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002fb2:	4628      	mov	r0, r5
 8002fb4:	f7ff fea0 	bl	8002cf8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002fb8:	2001      	movs	r0, #1
 8002fba:	e005      	b.n	8002fc8 <xTaskCreate+0x5c>
					vPortFree( pxStack );
 8002fbc:	4648      	mov	r0, r9
 8002fbe:	f001 f9a7 	bl	8004310 <vPortFree>
 8002fc2:	e7e6      	b.n	8002f92 <xTaskCreate+0x26>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002fc4:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8002fc8:	b005      	add	sp, #20
 8002fca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002fce:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8002fd2:	e7f9      	b.n	8002fc8 <xTaskCreate+0x5c>

08002fd4 <eTaskGetState>:
	{
 8002fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( pxTCB );
 8002fd6:	b1d0      	cbz	r0, 800300e <eTaskGetState+0x3a>
 8002fd8:	4604      	mov	r4, r0
		if( pxTCB == pxCurrentTCB )
 8002fda:	4b1d      	ldr	r3, [pc, #116]	; (8003050 <eTaskGetState+0x7c>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4283      	cmp	r3, r0
 8002fe0:	d02d      	beq.n	800303e <eTaskGetState+0x6a>
			taskENTER_CRITICAL();
 8002fe2:	f000 ff5f 	bl	8003ea4 <vPortEnterCritical>
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8002fe6:	6965      	ldr	r5, [r4, #20]
				pxDelayedList = pxDelayedTaskList;
 8002fe8:	4b1a      	ldr	r3, [pc, #104]	; (8003054 <eTaskGetState+0x80>)
 8002fea:	681e      	ldr	r6, [r3, #0]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8002fec:	4b1a      	ldr	r3, [pc, #104]	; (8003058 <eTaskGetState+0x84>)
 8002fee:	681f      	ldr	r7, [r3, #0]
			taskEXIT_CRITICAL();
 8002ff0:	f000 ff7a 	bl	8003ee8 <vPortExitCritical>
			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8002ff4:	42b5      	cmp	r5, r6
 8002ff6:	d024      	beq.n	8003042 <eTaskGetState+0x6e>
 8002ff8:	42bd      	cmp	r5, r7
 8002ffa:	d024      	beq.n	8003046 <eTaskGetState+0x72>
				else if( pxStateList == &xSuspendedTaskList )
 8002ffc:	4b17      	ldr	r3, [pc, #92]	; (800305c <eTaskGetState+0x88>)
 8002ffe:	429d      	cmp	r5, r3
 8003000:	d00e      	beq.n	8003020 <eTaskGetState+0x4c>
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8003002:	4b17      	ldr	r3, [pc, #92]	; (8003060 <eTaskGetState+0x8c>)
 8003004:	429d      	cmp	r5, r3
 8003006:	d020      	beq.n	800304a <eTaskGetState+0x76>
 8003008:	b1bd      	cbz	r5, 800303a <eTaskGetState+0x66>
				eReturn = eReady;
 800300a:	2001      	movs	r0, #1
 800300c:	e018      	b.n	8003040 <eTaskGetState+0x6c>
 800300e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003012:	f383 8811 	msr	BASEPRI, r3
 8003016:	f3bf 8f6f 	isb	sy
 800301a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTCB );
 800301e:	e7fe      	b.n	800301e <eTaskGetState+0x4a>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8003020:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003022:	b10b      	cbz	r3, 8003028 <eTaskGetState+0x54>
						eReturn = eBlocked;
 8003024:	2002      	movs	r0, #2
 8003026:	e00b      	b.n	8003040 <eTaskGetState+0x6c>
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8003028:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
 800302c:	b2db      	uxtb	r3, r3
 800302e:	2b01      	cmp	r3, #1
 8003030:	d001      	beq.n	8003036 <eTaskGetState+0x62>
								eReturn = eSuspended;
 8003032:	2003      	movs	r0, #3
 8003034:	e004      	b.n	8003040 <eTaskGetState+0x6c>
								eReturn = eBlocked;
 8003036:	2002      	movs	r0, #2
 8003038:	e002      	b.n	8003040 <eTaskGetState+0x6c>
					eReturn = eDeleted;
 800303a:	2004      	movs	r0, #4
 800303c:	e000      	b.n	8003040 <eTaskGetState+0x6c>
			eReturn = eRunning;
 800303e:	2000      	movs	r0, #0
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8003040:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				eReturn = eBlocked;
 8003042:	2002      	movs	r0, #2
 8003044:	e7fc      	b.n	8003040 <eTaskGetState+0x6c>
 8003046:	2002      	movs	r0, #2
 8003048:	e7fa      	b.n	8003040 <eTaskGetState+0x6c>
					eReturn = eDeleted;
 800304a:	2004      	movs	r0, #4
 800304c:	e7f8      	b.n	8003040 <eTaskGetState+0x6c>
 800304e:	bf00      	nop
 8003050:	20000a78 	.word	0x20000a78
 8003054:	20000a7c 	.word	0x20000a7c
 8003058:	20000a80 	.word	0x20000a80
 800305c:	20000f50 	.word	0x20000f50
 8003060:	20000f64 	.word	0x20000f64

08003064 <vTaskStartScheduler>:
{
 8003064:	b510      	push	{r4, lr}
 8003066:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003068:	2400      	movs	r4, #0
 800306a:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800306c:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800306e:	aa07      	add	r2, sp, #28
 8003070:	a906      	add	r1, sp, #24
 8003072:	a805      	add	r0, sp, #20
 8003074:	f7ff f9d6 	bl	8002424 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003078:	9b05      	ldr	r3, [sp, #20]
 800307a:	9302      	str	r3, [sp, #8]
 800307c:	9b06      	ldr	r3, [sp, #24]
 800307e:	9301      	str	r3, [sp, #4]
 8003080:	9400      	str	r4, [sp, #0]
 8003082:	4623      	mov	r3, r4
 8003084:	9a07      	ldr	r2, [sp, #28]
 8003086:	491b      	ldr	r1, [pc, #108]	; (80030f4 <vTaskStartScheduler+0x90>)
 8003088:	481b      	ldr	r0, [pc, #108]	; (80030f8 <vTaskStartScheduler+0x94>)
 800308a:	f7ff ff34 	bl	8002ef6 <xTaskCreateStatic>
 800308e:	4b1b      	ldr	r3, [pc, #108]	; (80030fc <vTaskStartScheduler+0x98>)
 8003090:	6018      	str	r0, [r3, #0]
		if( xIdleTaskHandle != NULL )
 8003092:	b140      	cbz	r0, 80030a6 <vTaskStartScheduler+0x42>
			xReturn = xTimerCreateTimerTask();
 8003094:	f000 fce2 	bl	8003a5c <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8003098:	2801      	cmp	r0, #1
 800309a:	d006      	beq.n	80030aa <vTaskStartScheduler+0x46>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800309c:	f1b0 3fff 	cmp.w	r0, #4294967295
 80030a0:	d01f      	beq.n	80030e2 <vTaskStartScheduler+0x7e>
}
 80030a2:	b008      	add	sp, #32
 80030a4:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
 80030a6:	2000      	movs	r0, #0
 80030a8:	e7f6      	b.n	8003098 <vTaskStartScheduler+0x34>
 80030aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ae:	f383 8811 	msr	BASEPRI, r3
 80030b2:	f3bf 8f6f 	isb	sy
 80030b6:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80030ba:	4b11      	ldr	r3, [pc, #68]	; (8003100 <vTaskStartScheduler+0x9c>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	3358      	adds	r3, #88	; 0x58
 80030c0:	4a10      	ldr	r2, [pc, #64]	; (8003104 <vTaskStartScheduler+0xa0>)
 80030c2:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 80030c4:	4b10      	ldr	r3, [pc, #64]	; (8003108 <vTaskStartScheduler+0xa4>)
 80030c6:	f04f 32ff 	mov.w	r2, #4294967295
 80030ca:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80030cc:	4b0f      	ldr	r3, [pc, #60]	; (800310c <vTaskStartScheduler+0xa8>)
 80030ce:	2201      	movs	r2, #1
 80030d0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80030d2:	4b0f      	ldr	r3, [pc, #60]	; (8003110 <vTaskStartScheduler+0xac>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	601a      	str	r2, [r3, #0]
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 80030d8:	f7fd ff44 	bl	8000f64 <configureTimerForRunTimeStats>
		if( xPortStartScheduler() != pdFALSE )
 80030dc:	f000 ff7c 	bl	8003fd8 <xPortStartScheduler>
 80030e0:	e7df      	b.n	80030a2 <vTaskStartScheduler+0x3e>
 80030e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030e6:	f383 8811 	msr	BASEPRI, r3
 80030ea:	f3bf 8f6f 	isb	sy
 80030ee:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80030f2:	e7fe      	b.n	80030f2 <vTaskStartScheduler+0x8e>
 80030f4:	08009c88 	.word	0x08009c88
 80030f8:	08002e31 	.word	0x08002e31
 80030fc:	20000f28 	.word	0x20000f28
 8003100:	20000a78 	.word	0x20000a78
 8003104:	20000068 	.word	0x20000068
 8003108:	20000f2c 	.word	0x20000f2c
 800310c:	20000f4c 	.word	0x20000f4c
 8003110:	20000f78 	.word	0x20000f78

08003114 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8003114:	4a02      	ldr	r2, [pc, #8]	; (8003120 <vTaskSuspendAll+0xc>)
 8003116:	6813      	ldr	r3, [r2, #0]
 8003118:	3301      	adds	r3, #1
 800311a:	6013      	str	r3, [r2, #0]
}
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	20000ef4 	.word	0x20000ef4

08003124 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8003124:	4b01      	ldr	r3, [pc, #4]	; (800312c <xTaskGetTickCount+0x8>)
 8003126:	6818      	ldr	r0, [r3, #0]
}
 8003128:	4770      	bx	lr
 800312a:	bf00      	nop
 800312c:	20000f78 	.word	0x20000f78

08003130 <xTaskIncrementTick>:
{
 8003130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003132:	4b3a      	ldr	r3, [pc, #232]	; (800321c <xTaskIncrementTick+0xec>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d169      	bne.n	800320e <xTaskIncrementTick+0xde>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800313a:	4b39      	ldr	r3, [pc, #228]	; (8003220 <xTaskIncrementTick+0xf0>)
 800313c:	681d      	ldr	r5, [r3, #0]
 800313e:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8003140:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003142:	b9c5      	cbnz	r5, 8003176 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8003144:	4b37      	ldr	r3, [pc, #220]	; (8003224 <xTaskIncrementTick+0xf4>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	b143      	cbz	r3, 800315e <xTaskIncrementTick+0x2e>
 800314c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003150:	f383 8811 	msr	BASEPRI, r3
 8003154:	f3bf 8f6f 	isb	sy
 8003158:	f3bf 8f4f 	dsb	sy
 800315c:	e7fe      	b.n	800315c <xTaskIncrementTick+0x2c>
 800315e:	4a31      	ldr	r2, [pc, #196]	; (8003224 <xTaskIncrementTick+0xf4>)
 8003160:	6811      	ldr	r1, [r2, #0]
 8003162:	4b31      	ldr	r3, [pc, #196]	; (8003228 <xTaskIncrementTick+0xf8>)
 8003164:	6818      	ldr	r0, [r3, #0]
 8003166:	6010      	str	r0, [r2, #0]
 8003168:	6019      	str	r1, [r3, #0]
 800316a:	4a30      	ldr	r2, [pc, #192]	; (800322c <xTaskIncrementTick+0xfc>)
 800316c:	6813      	ldr	r3, [r2, #0]
 800316e:	3301      	adds	r3, #1
 8003170:	6013      	str	r3, [r2, #0]
 8003172:	f7ff fd13 	bl	8002b9c <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003176:	4b2e      	ldr	r3, [pc, #184]	; (8003230 <xTaskIncrementTick+0x100>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	42ab      	cmp	r3, r5
 800317c:	d93d      	bls.n	80031fa <xTaskIncrementTick+0xca>
BaseType_t xSwitchRequired = pdFALSE;
 800317e:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003180:	4b2c      	ldr	r3, [pc, #176]	; (8003234 <xTaskIncrementTick+0x104>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003186:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800318a:	009a      	lsls	r2, r3, #2
 800318c:	4b2a      	ldr	r3, [pc, #168]	; (8003238 <xTaskIncrementTick+0x108>)
 800318e:	589b      	ldr	r3, [r3, r2]
 8003190:	2b01      	cmp	r3, #1
 8003192:	d900      	bls.n	8003196 <xTaskIncrementTick+0x66>
				xSwitchRequired = pdTRUE;
 8003194:	2701      	movs	r7, #1
			if( xYieldPending != pdFALSE )
 8003196:	4b29      	ldr	r3, [pc, #164]	; (800323c <xTaskIncrementTick+0x10c>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d03c      	beq.n	8003218 <xTaskIncrementTick+0xe8>
				xSwitchRequired = pdTRUE;
 800319e:	2701      	movs	r7, #1
	return xSwitchRequired;
 80031a0:	e03a      	b.n	8003218 <xTaskIncrementTick+0xe8>
							xSwitchRequired = pdTRUE;
 80031a2:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80031a4:	4b1f      	ldr	r3, [pc, #124]	; (8003224 <xTaskIncrementTick+0xf4>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	b343      	cbz	r3, 80031fe <xTaskIncrementTick+0xce>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031ac:	4b1d      	ldr	r3, [pc, #116]	; (8003224 <xTaskIncrementTick+0xf4>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	68db      	ldr	r3, [r3, #12]
 80031b2:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80031b4:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 80031b6:	429d      	cmp	r5, r3
 80031b8:	d326      	bcc.n	8003208 <xTaskIncrementTick+0xd8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80031ba:	1d26      	adds	r6, r4, #4
 80031bc:	4630      	mov	r0, r6
 80031be:	f7ff f97b 	bl	80024b8 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80031c2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80031c4:	b11b      	cbz	r3, 80031ce <xTaskIncrementTick+0x9e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80031c6:	f104 0018 	add.w	r0, r4, #24
 80031ca:	f7ff f975 	bl	80024b8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80031ce:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80031d0:	4a1b      	ldr	r2, [pc, #108]	; (8003240 <xTaskIncrementTick+0x110>)
 80031d2:	6812      	ldr	r2, [r2, #0]
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d901      	bls.n	80031dc <xTaskIncrementTick+0xac>
 80031d8:	4a19      	ldr	r2, [pc, #100]	; (8003240 <xTaskIncrementTick+0x110>)
 80031da:	6013      	str	r3, [r2, #0]
 80031dc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80031e0:	009a      	lsls	r2, r3, #2
 80031e2:	4631      	mov	r1, r6
 80031e4:	4814      	ldr	r0, [pc, #80]	; (8003238 <xTaskIncrementTick+0x108>)
 80031e6:	4410      	add	r0, r2
 80031e8:	f7ff f942 	bl	8002470 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80031ec:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80031ee:	4b11      	ldr	r3, [pc, #68]	; (8003234 <xTaskIncrementTick+0x104>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d2d4      	bcs.n	80031a2 <xTaskIncrementTick+0x72>
 80031f8:	e7d4      	b.n	80031a4 <xTaskIncrementTick+0x74>
BaseType_t xSwitchRequired = pdFALSE;
 80031fa:	2700      	movs	r7, #0
 80031fc:	e7d2      	b.n	80031a4 <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031fe:	4b0c      	ldr	r3, [pc, #48]	; (8003230 <xTaskIncrementTick+0x100>)
 8003200:	f04f 32ff 	mov.w	r2, #4294967295
 8003204:	601a      	str	r2, [r3, #0]
					break;
 8003206:	e7bb      	b.n	8003180 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 8003208:	4a09      	ldr	r2, [pc, #36]	; (8003230 <xTaskIncrementTick+0x100>)
 800320a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800320c:	e7b8      	b.n	8003180 <xTaskIncrementTick+0x50>
		++xPendedTicks;
 800320e:	4a0d      	ldr	r2, [pc, #52]	; (8003244 <xTaskIncrementTick+0x114>)
 8003210:	6813      	ldr	r3, [r2, #0]
 8003212:	3301      	adds	r3, #1
 8003214:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8003216:	2700      	movs	r7, #0
}
 8003218:	4638      	mov	r0, r7
 800321a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800321c:	20000ef4 	.word	0x20000ef4
 8003220:	20000f78 	.word	0x20000f78
 8003224:	20000a7c 	.word	0x20000a7c
 8003228:	20000a80 	.word	0x20000a80
 800322c:	20000f30 	.word	0x20000f30
 8003230:	20000f2c 	.word	0x20000f2c
 8003234:	20000a78 	.word	0x20000a78
 8003238:	20000a84 	.word	0x20000a84
 800323c:	20000f7c 	.word	0x20000f7c
 8003240:	20000efc 	.word	0x20000efc
 8003244:	20000f34 	.word	0x20000f34

08003248 <xTaskResumeAll>:
{
 8003248:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 800324a:	4b35      	ldr	r3, [pc, #212]	; (8003320 <xTaskResumeAll+0xd8>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	b943      	cbnz	r3, 8003262 <xTaskResumeAll+0x1a>
 8003250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003254:	f383 8811 	msr	BASEPRI, r3
 8003258:	f3bf 8f6f 	isb	sy
 800325c:	f3bf 8f4f 	dsb	sy
 8003260:	e7fe      	b.n	8003260 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 8003262:	f000 fe1f 	bl	8003ea4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8003266:	4b2e      	ldr	r3, [pc, #184]	; (8003320 <xTaskResumeAll+0xd8>)
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	3a01      	subs	r2, #1
 800326c:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d14f      	bne.n	8003314 <xTaskResumeAll+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003274:	4b2b      	ldr	r3, [pc, #172]	; (8003324 <xTaskResumeAll+0xdc>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	b90b      	cbnz	r3, 800327e <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 800327a:	2400      	movs	r4, #0
 800327c:	e04b      	b.n	8003316 <xTaskResumeAll+0xce>
TCB_t *pxTCB = NULL;
 800327e:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003280:	4b29      	ldr	r3, [pc, #164]	; (8003328 <xTaskResumeAll+0xe0>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	b31b      	cbz	r3, 80032ce <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003286:	4b28      	ldr	r3, [pc, #160]	; (8003328 <xTaskResumeAll+0xe0>)
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800328c:	f104 0018 	add.w	r0, r4, #24
 8003290:	f7ff f912 	bl	80024b8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003294:	1d25      	adds	r5, r4, #4
 8003296:	4628      	mov	r0, r5
 8003298:	f7ff f90e 	bl	80024b8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800329c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800329e:	4b23      	ldr	r3, [pc, #140]	; (800332c <xTaskResumeAll+0xe4>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4298      	cmp	r0, r3
 80032a4:	d901      	bls.n	80032aa <xTaskResumeAll+0x62>
 80032a6:	4b21      	ldr	r3, [pc, #132]	; (800332c <xTaskResumeAll+0xe4>)
 80032a8:	6018      	str	r0, [r3, #0]
 80032aa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80032ae:	4629      	mov	r1, r5
 80032b0:	4b1f      	ldr	r3, [pc, #124]	; (8003330 <xTaskResumeAll+0xe8>)
 80032b2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80032b6:	f7ff f8db 	bl	8002470 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80032ba:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80032bc:	4b1d      	ldr	r3, [pc, #116]	; (8003334 <xTaskResumeAll+0xec>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d3dc      	bcc.n	8003280 <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 80032c6:	4b1c      	ldr	r3, [pc, #112]	; (8003338 <xTaskResumeAll+0xf0>)
 80032c8:	2201      	movs	r2, #1
 80032ca:	601a      	str	r2, [r3, #0]
 80032cc:	e7d8      	b.n	8003280 <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 80032ce:	b10c      	cbz	r4, 80032d4 <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 80032d0:	f7ff fc64 	bl	8002b9c <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80032d4:	4b19      	ldr	r3, [pc, #100]	; (800333c <xTaskResumeAll+0xf4>)
 80032d6:	681c      	ldr	r4, [r3, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 80032d8:	b984      	cbnz	r4, 80032fc <xTaskResumeAll+0xb4>
				if( xYieldPending != pdFALSE )
 80032da:	4b17      	ldr	r3, [pc, #92]	; (8003338 <xTaskResumeAll+0xf0>)
 80032dc:	681c      	ldr	r4, [r3, #0]
 80032de:	b1d4      	cbz	r4, 8003316 <xTaskResumeAll+0xce>
					taskYIELD_IF_USING_PREEMPTION();
 80032e0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80032e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032e8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80032ec:	f3bf 8f4f 	dsb	sy
 80032f0:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80032f4:	2401      	movs	r4, #1
 80032f6:	e00e      	b.n	8003316 <xTaskResumeAll+0xce>
						} while( xPendedCounts > ( TickType_t ) 0U );
 80032f8:	3c01      	subs	r4, #1
 80032fa:	d007      	beq.n	800330c <xTaskResumeAll+0xc4>
							if( xTaskIncrementTick() != pdFALSE )
 80032fc:	f7ff ff18 	bl	8003130 <xTaskIncrementTick>
 8003300:	2800      	cmp	r0, #0
 8003302:	d0f9      	beq.n	80032f8 <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 8003304:	4b0c      	ldr	r3, [pc, #48]	; (8003338 <xTaskResumeAll+0xf0>)
 8003306:	2201      	movs	r2, #1
 8003308:	601a      	str	r2, [r3, #0]
 800330a:	e7f5      	b.n	80032f8 <xTaskResumeAll+0xb0>
						xPendedTicks = 0;
 800330c:	4b0b      	ldr	r3, [pc, #44]	; (800333c <xTaskResumeAll+0xf4>)
 800330e:	2200      	movs	r2, #0
 8003310:	601a      	str	r2, [r3, #0]
 8003312:	e7e2      	b.n	80032da <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 8003314:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8003316:	f000 fde7 	bl	8003ee8 <vPortExitCritical>
}
 800331a:	4620      	mov	r0, r4
 800331c:	bd38      	pop	{r3, r4, r5, pc}
 800331e:	bf00      	nop
 8003320:	20000ef4 	.word	0x20000ef4
 8003324:	20000eec 	.word	0x20000eec
 8003328:	20000f38 	.word	0x20000f38
 800332c:	20000efc 	.word	0x20000efc
 8003330:	20000a84 	.word	0x20000a84
 8003334:	20000a78 	.word	0x20000a78
 8003338:	20000f7c 	.word	0x20000f7c
 800333c:	20000f34 	.word	0x20000f34

08003340 <vTaskDelay>:
	{
 8003340:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003342:	b1a8      	cbz	r0, 8003370 <vTaskDelay+0x30>
 8003344:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 8003346:	4b10      	ldr	r3, [pc, #64]	; (8003388 <vTaskDelay+0x48>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	b143      	cbz	r3, 800335e <vTaskDelay+0x1e>
 800334c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003350:	f383 8811 	msr	BASEPRI, r3
 8003354:	f3bf 8f6f 	isb	sy
 8003358:	f3bf 8f4f 	dsb	sy
 800335c:	e7fe      	b.n	800335c <vTaskDelay+0x1c>
			vTaskSuspendAll();
 800335e:	f7ff fed9 	bl	8003114 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003362:	2100      	movs	r1, #0
 8003364:	4620      	mov	r0, r4
 8003366:	f7ff fd77 	bl	8002e58 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800336a:	f7ff ff6d 	bl	8003248 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800336e:	b948      	cbnz	r0, 8003384 <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 8003370:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003374:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003378:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800337c:	f3bf 8f4f 	dsb	sy
 8003380:	f3bf 8f6f 	isb	sy
	}
 8003384:	bd10      	pop	{r4, pc}
 8003386:	bf00      	nop
 8003388:	20000ef4 	.word	0x20000ef4

0800338c <vTaskSwitchContext>:
{
 800338c:	b508      	push	{r3, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800338e:	4b2a      	ldr	r3, [pc, #168]	; (8003438 <vTaskSwitchContext+0xac>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	b11b      	cbz	r3, 800339c <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8003394:	4b29      	ldr	r3, [pc, #164]	; (800343c <vTaskSwitchContext+0xb0>)
 8003396:	2201      	movs	r2, #1
 8003398:	601a      	str	r2, [r3, #0]
}
 800339a:	bd08      	pop	{r3, pc}
		xYieldPending = pdFALSE;
 800339c:	4b27      	ldr	r3, [pc, #156]	; (800343c <vTaskSwitchContext+0xb0>)
 800339e:	2200      	movs	r2, #0
 80033a0:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 80033a2:	f7fd fde0 	bl	8000f66 <getRunTimeCounterValue>
 80033a6:	4b26      	ldr	r3, [pc, #152]	; (8003440 <vTaskSwitchContext+0xb4>)
 80033a8:	6018      	str	r0, [r3, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 80033aa:	4b26      	ldr	r3, [pc, #152]	; (8003444 <vTaskSwitchContext+0xb8>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4298      	cmp	r0, r3
 80033b0:	d905      	bls.n	80033be <vTaskSwitchContext+0x32>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 80033b2:	4a25      	ldr	r2, [pc, #148]	; (8003448 <vTaskSwitchContext+0xbc>)
 80033b4:	6811      	ldr	r1, [r2, #0]
 80033b6:	1ac3      	subs	r3, r0, r3
 80033b8:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80033ba:	441a      	add	r2, r3
 80033bc:	654a      	str	r2, [r1, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 80033be:	4b21      	ldr	r3, [pc, #132]	; (8003444 <vTaskSwitchContext+0xb8>)
 80033c0:	6018      	str	r0, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033c2:	4b22      	ldr	r3, [pc, #136]	; (800344c <vTaskSwitchContext+0xc0>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80033ca:	0092      	lsls	r2, r2, #2
 80033cc:	4920      	ldr	r1, [pc, #128]	; (8003450 <vTaskSwitchContext+0xc4>)
 80033ce:	588a      	ldr	r2, [r1, r2]
 80033d0:	b95a      	cbnz	r2, 80033ea <vTaskSwitchContext+0x5e>
 80033d2:	b10b      	cbz	r3, 80033d8 <vTaskSwitchContext+0x4c>
 80033d4:	3b01      	subs	r3, #1
 80033d6:	e7f6      	b.n	80033c6 <vTaskSwitchContext+0x3a>
 80033d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033dc:	f383 8811 	msr	BASEPRI, r3
 80033e0:	f3bf 8f6f 	isb	sy
 80033e4:	f3bf 8f4f 	dsb	sy
 80033e8:	e7fe      	b.n	80033e8 <vTaskSwitchContext+0x5c>
 80033ea:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80033ee:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80033f2:	6850      	ldr	r0, [r2, #4]
 80033f4:	6840      	ldr	r0, [r0, #4]
 80033f6:	6050      	str	r0, [r2, #4]
 80033f8:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80033fc:	0092      	lsls	r2, r2, #2
 80033fe:	3208      	adds	r2, #8
 8003400:	4411      	add	r1, r2
 8003402:	4288      	cmp	r0, r1
 8003404:	d00f      	beq.n	8003426 <vTaskSwitchContext+0x9a>
 8003406:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800340a:	4a11      	ldr	r2, [pc, #68]	; (8003450 <vTaskSwitchContext+0xc4>)
 800340c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8003410:	6852      	ldr	r2, [r2, #4]
 8003412:	68d1      	ldr	r1, [r2, #12]
 8003414:	4a0c      	ldr	r2, [pc, #48]	; (8003448 <vTaskSwitchContext+0xbc>)
 8003416:	6011      	str	r1, [r2, #0]
 8003418:	490c      	ldr	r1, [pc, #48]	; (800344c <vTaskSwitchContext+0xc0>)
 800341a:	600b      	str	r3, [r1, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800341c:	6813      	ldr	r3, [r2, #0]
 800341e:	3358      	adds	r3, #88	; 0x58
 8003420:	4a0c      	ldr	r2, [pc, #48]	; (8003454 <vTaskSwitchContext+0xc8>)
 8003422:	6013      	str	r3, [r2, #0]
}
 8003424:	e7b9      	b.n	800339a <vTaskSwitchContext+0xe>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003426:	6840      	ldr	r0, [r0, #4]
 8003428:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800342c:	4a08      	ldr	r2, [pc, #32]	; (8003450 <vTaskSwitchContext+0xc4>)
 800342e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8003432:	6050      	str	r0, [r2, #4]
 8003434:	e7e7      	b.n	8003406 <vTaskSwitchContext+0x7a>
 8003436:	bf00      	nop
 8003438:	20000ef4 	.word	0x20000ef4
 800343c:	20000f7c 	.word	0x20000f7c
 8003440:	20000ee8 	.word	0x20000ee8
 8003444:	20000ee4 	.word	0x20000ee4
 8003448:	20000a78 	.word	0x20000a78
 800344c:	20000efc 	.word	0x20000efc
 8003450:	20000a84 	.word	0x20000a84
 8003454:	20000068 	.word	0x20000068

08003458 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8003458:	b158      	cbz	r0, 8003472 <vTaskPlaceOnEventList+0x1a>
{
 800345a:	b510      	push	{r4, lr}
 800345c:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800345e:	4a09      	ldr	r2, [pc, #36]	; (8003484 <vTaskPlaceOnEventList+0x2c>)
 8003460:	6811      	ldr	r1, [r2, #0]
 8003462:	3118      	adds	r1, #24
 8003464:	f7ff f80f 	bl	8002486 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003468:	2101      	movs	r1, #1
 800346a:	4620      	mov	r0, r4
 800346c:	f7ff fcf4 	bl	8002e58 <prvAddCurrentTaskToDelayedList>
}
 8003470:	bd10      	pop	{r4, pc}
 8003472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003476:	f383 8811 	msr	BASEPRI, r3
 800347a:	f3bf 8f6f 	isb	sy
 800347e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 8003482:	e7fe      	b.n	8003482 <vTaskPlaceOnEventList+0x2a>
 8003484:	20000a78 	.word	0x20000a78

08003488 <vTaskPlaceOnEventListRestricted>:
	{
 8003488:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 800348a:	b170      	cbz	r0, 80034aa <vTaskPlaceOnEventListRestricted+0x22>
 800348c:	460d      	mov	r5, r1
 800348e:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003490:	4a0a      	ldr	r2, [pc, #40]	; (80034bc <vTaskPlaceOnEventListRestricted+0x34>)
 8003492:	6811      	ldr	r1, [r2, #0]
 8003494:	3118      	adds	r1, #24
 8003496:	f7fe ffeb 	bl	8002470 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 800349a:	b10c      	cbz	r4, 80034a0 <vTaskPlaceOnEventListRestricted+0x18>
			xTicksToWait = portMAX_DELAY;
 800349c:	f04f 35ff 	mov.w	r5, #4294967295
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80034a0:	4621      	mov	r1, r4
 80034a2:	4628      	mov	r0, r5
 80034a4:	f7ff fcd8 	bl	8002e58 <prvAddCurrentTaskToDelayedList>
	}
 80034a8:	bd38      	pop	{r3, r4, r5, pc}
 80034aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ae:	f383 8811 	msr	BASEPRI, r3
 80034b2:	f3bf 8f6f 	isb	sy
 80034b6:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 80034ba:	e7fe      	b.n	80034ba <vTaskPlaceOnEventListRestricted+0x32>
 80034bc:	20000a78 	.word	0x20000a78

080034c0 <xTaskRemoveFromEventList>:
{
 80034c0:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034c2:	68c3      	ldr	r3, [r0, #12]
 80034c4:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80034c6:	b324      	cbz	r4, 8003512 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80034c8:	f104 0518 	add.w	r5, r4, #24
 80034cc:	4628      	mov	r0, r5
 80034ce:	f7fe fff3 	bl	80024b8 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034d2:	4b18      	ldr	r3, [pc, #96]	; (8003534 <xTaskRemoveFromEventList+0x74>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	bb2b      	cbnz	r3, 8003524 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80034d8:	1d25      	adds	r5, r4, #4
 80034da:	4628      	mov	r0, r5
 80034dc:	f7fe ffec 	bl	80024b8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80034e0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80034e2:	4b15      	ldr	r3, [pc, #84]	; (8003538 <xTaskRemoveFromEventList+0x78>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4298      	cmp	r0, r3
 80034e8:	d901      	bls.n	80034ee <xTaskRemoveFromEventList+0x2e>
 80034ea:	4b13      	ldr	r3, [pc, #76]	; (8003538 <xTaskRemoveFromEventList+0x78>)
 80034ec:	6018      	str	r0, [r3, #0]
 80034ee:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80034f2:	4629      	mov	r1, r5
 80034f4:	4b11      	ldr	r3, [pc, #68]	; (800353c <xTaskRemoveFromEventList+0x7c>)
 80034f6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80034fa:	f7fe ffb9 	bl	8002470 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80034fe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003500:	4b0f      	ldr	r3, [pc, #60]	; (8003540 <xTaskRemoveFromEventList+0x80>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003506:	429a      	cmp	r2, r3
 8003508:	d911      	bls.n	800352e <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 800350a:	2001      	movs	r0, #1
 800350c:	4b0d      	ldr	r3, [pc, #52]	; (8003544 <xTaskRemoveFromEventList+0x84>)
 800350e:	6018      	str	r0, [r3, #0]
}
 8003510:	bd38      	pop	{r3, r4, r5, pc}
 8003512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003516:	f383 8811 	msr	BASEPRI, r3
 800351a:	f3bf 8f6f 	isb	sy
 800351e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 8003522:	e7fe      	b.n	8003522 <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003524:	4629      	mov	r1, r5
 8003526:	4808      	ldr	r0, [pc, #32]	; (8003548 <xTaskRemoveFromEventList+0x88>)
 8003528:	f7fe ffa2 	bl	8002470 <vListInsertEnd>
 800352c:	e7e7      	b.n	80034fe <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 800352e:	2000      	movs	r0, #0
	return xReturn;
 8003530:	e7ee      	b.n	8003510 <xTaskRemoveFromEventList+0x50>
 8003532:	bf00      	nop
 8003534:	20000ef4 	.word	0x20000ef4
 8003538:	20000efc 	.word	0x20000efc
 800353c:	20000a84 	.word	0x20000a84
 8003540:	20000a78 	.word	0x20000a78
 8003544:	20000f7c 	.word	0x20000f7c
 8003548:	20000f38 	.word	0x20000f38

0800354c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800354c:	4b03      	ldr	r3, [pc, #12]	; (800355c <vTaskInternalSetTimeOutState+0x10>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003552:	4b03      	ldr	r3, [pc, #12]	; (8003560 <vTaskInternalSetTimeOutState+0x14>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	6043      	str	r3, [r0, #4]
}
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop
 800355c:	20000f30 	.word	0x20000f30
 8003560:	20000f78 	.word	0x20000f78

08003564 <xTaskCheckForTimeOut>:
{
 8003564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 8003566:	b1c8      	cbz	r0, 800359c <xTaskCheckForTimeOut+0x38>
 8003568:	460c      	mov	r4, r1
 800356a:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 800356c:	b1f9      	cbz	r1, 80035ae <xTaskCheckForTimeOut+0x4a>
	taskENTER_CRITICAL();
 800356e:	f000 fc99 	bl	8003ea4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8003572:	4b1b      	ldr	r3, [pc, #108]	; (80035e0 <xTaskCheckForTimeOut+0x7c>)
 8003574:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003576:	686b      	ldr	r3, [r5, #4]
 8003578:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 800357a:	6822      	ldr	r2, [r4, #0]
 800357c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8003580:	d026      	beq.n	80035d0 <xTaskCheckForTimeOut+0x6c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003582:	4e18      	ldr	r6, [pc, #96]	; (80035e4 <xTaskCheckForTimeOut+0x80>)
 8003584:	6836      	ldr	r6, [r6, #0]
 8003586:	682f      	ldr	r7, [r5, #0]
 8003588:	42b7      	cmp	r7, r6
 800358a:	d001      	beq.n	8003590 <xTaskCheckForTimeOut+0x2c>
 800358c:	428b      	cmp	r3, r1
 800358e:	d924      	bls.n	80035da <xTaskCheckForTimeOut+0x76>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003590:	4282      	cmp	r2, r0
 8003592:	d815      	bhi.n	80035c0 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
 8003594:	2300      	movs	r3, #0
 8003596:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8003598:	2401      	movs	r4, #1
 800359a:	e01a      	b.n	80035d2 <xTaskCheckForTimeOut+0x6e>
 800359c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035a0:	f383 8811 	msr	BASEPRI, r3
 80035a4:	f3bf 8f6f 	isb	sy
 80035a8:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 80035ac:	e7fe      	b.n	80035ac <xTaskCheckForTimeOut+0x48>
 80035ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035b2:	f383 8811 	msr	BASEPRI, r3
 80035b6:	f3bf 8f6f 	isb	sy
 80035ba:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 80035be:	e7fe      	b.n	80035be <xTaskCheckForTimeOut+0x5a>
			*pxTicksToWait -= xElapsedTime;
 80035c0:	1a5b      	subs	r3, r3, r1
 80035c2:	4413      	add	r3, r2
 80035c4:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80035c6:	4628      	mov	r0, r5
 80035c8:	f7ff ffc0 	bl	800354c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80035cc:	2400      	movs	r4, #0
 80035ce:	e000      	b.n	80035d2 <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
 80035d0:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80035d2:	f000 fc89 	bl	8003ee8 <vPortExitCritical>
}
 80035d6:	4620      	mov	r0, r4
 80035d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdTRUE;
 80035da:	2401      	movs	r4, #1
 80035dc:	e7f9      	b.n	80035d2 <xTaskCheckForTimeOut+0x6e>
 80035de:	bf00      	nop
 80035e0:	20000f78 	.word	0x20000f78
 80035e4:	20000f30 	.word	0x20000f30

080035e8 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80035e8:	4b01      	ldr	r3, [pc, #4]	; (80035f0 <vTaskMissedYield+0x8>)
 80035ea:	2201      	movs	r2, #1
 80035ec:	601a      	str	r2, [r3, #0]
}
 80035ee:	4770      	bx	lr
 80035f0:	20000f7c 	.word	0x20000f7c

080035f4 <vTaskGetInfo>:
	{
 80035f4:	b570      	push	{r4, r5, r6, lr}
 80035f6:	460c      	mov	r4, r1
 80035f8:	4616      	mov	r6, r2
		pxTCB = prvGetTCBFromHandle( xTask );
 80035fa:	4605      	mov	r5, r0
 80035fc:	b1d0      	cbz	r0, 8003634 <vTaskGetInfo+0x40>
		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 80035fe:	6025      	str	r5, [r4, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 8003600:	f105 0234 	add.w	r2, r5, #52	; 0x34
 8003604:	6062      	str	r2, [r4, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 8003606:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8003608:	6122      	str	r2, [r4, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 800360a:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800360c:	61e2      	str	r2, [r4, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 800360e:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8003610:	60a2      	str	r2, [r4, #8]
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 8003612:	6cea      	ldr	r2, [r5, #76]	; 0x4c
 8003614:	6162      	str	r2, [r4, #20]
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 8003616:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 8003618:	61a2      	str	r2, [r4, #24]
		if( eState != eInvalid )
 800361a:	2b05      	cmp	r3, #5
 800361c:	d019      	beq.n	8003652 <vTaskGetInfo+0x5e>
			if( pxTCB == pxCurrentTCB )
 800361e:	4a12      	ldr	r2, [pc, #72]	; (8003668 <vTaskGetInfo+0x74>)
 8003620:	6812      	ldr	r2, [r2, #0]
 8003622:	42aa      	cmp	r2, r5
 8003624:	d009      	beq.n	800363a <vTaskGetInfo+0x46>
				pxTaskStatus->eCurrentState = eState;
 8003626:	7323      	strb	r3, [r4, #12]
					if( eState == eSuspended )
 8003628:	2b03      	cmp	r3, #3
 800362a:	d009      	beq.n	8003640 <vTaskGetInfo+0x4c>
		if( xGetFreeStackSpace != pdFALSE )
 800362c:	b9b6      	cbnz	r6, 800365c <vTaskGetInfo+0x68>
			pxTaskStatus->usStackHighWaterMark = 0;
 800362e:	2300      	movs	r3, #0
 8003630:	8423      	strh	r3, [r4, #32]
	}
 8003632:	bd70      	pop	{r4, r5, r6, pc}
		pxTCB = prvGetTCBFromHandle( xTask );
 8003634:	4a0c      	ldr	r2, [pc, #48]	; (8003668 <vTaskGetInfo+0x74>)
 8003636:	6815      	ldr	r5, [r2, #0]
 8003638:	e7e1      	b.n	80035fe <vTaskGetInfo+0xa>
				pxTaskStatus->eCurrentState = eRunning;
 800363a:	2300      	movs	r3, #0
 800363c:	7323      	strb	r3, [r4, #12]
 800363e:	e7f5      	b.n	800362c <vTaskGetInfo+0x38>
						vTaskSuspendAll();
 8003640:	f7ff fd68 	bl	8003114 <vTaskSuspendAll>
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003644:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003646:	b10b      	cbz	r3, 800364c <vTaskGetInfo+0x58>
								pxTaskStatus->eCurrentState = eBlocked;
 8003648:	2302      	movs	r3, #2
 800364a:	7323      	strb	r3, [r4, #12]
						( void ) xTaskResumeAll();
 800364c:	f7ff fdfc 	bl	8003248 <xTaskResumeAll>
 8003650:	e7ec      	b.n	800362c <vTaskGetInfo+0x38>
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 8003652:	4628      	mov	r0, r5
 8003654:	f7ff fcbe 	bl	8002fd4 <eTaskGetState>
 8003658:	7320      	strb	r0, [r4, #12]
 800365a:	e7e7      	b.n	800362c <vTaskGetInfo+0x38>
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 800365c:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800365e:	f7ff fa92 	bl	8002b86 <prvTaskCheckFreeStackSpace>
 8003662:	8420      	strh	r0, [r4, #32]
 8003664:	e7e5      	b.n	8003632 <vTaskGetInfo+0x3e>
 8003666:	bf00      	nop
 8003668:	20000a78 	.word	0x20000a78

0800366c <prvListTasksWithinSingleList>:
	{
 800366c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8003670:	680c      	ldr	r4, [r1, #0]
 8003672:	b33c      	cbz	r4, 80036c4 <prvListTasksWithinSingleList+0x58>
 8003674:	4607      	mov	r7, r0
 8003676:	460d      	mov	r5, r1
 8003678:	4690      	mov	r8, r2
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800367a:	684b      	ldr	r3, [r1, #4]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	604b      	str	r3, [r1, #4]
 8003680:	f101 0908 	add.w	r9, r1, #8
 8003684:	454b      	cmp	r3, r9
 8003686:	d004      	beq.n	8003692 <prvListTasksWithinSingleList+0x26>
 8003688:	686b      	ldr	r3, [r5, #4]
 800368a:	f8d3 a00c 	ldr.w	sl, [r3, #12]
	UBaseType_t uxTask = 0;
 800368e:	2400      	movs	r4, #0
 8003690:	e010      	b.n	80036b4 <prvListTasksWithinSingleList+0x48>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	604b      	str	r3, [r1, #4]
 8003696:	e7f7      	b.n	8003688 <prvListTasksWithinSingleList+0x1c>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003698:	686b      	ldr	r3, [r5, #4]
 800369a:	68de      	ldr	r6, [r3, #12]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 800369c:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 80036a0:	4643      	mov	r3, r8
 80036a2:	2201      	movs	r2, #1
 80036a4:	eb07 0181 	add.w	r1, r7, r1, lsl #2
 80036a8:	4630      	mov	r0, r6
 80036aa:	f7ff ffa3 	bl	80035f4 <vTaskGetInfo>
				uxTask++;
 80036ae:	3401      	adds	r4, #1
			} while( pxNextTCB != pxFirstTCB );
 80036b0:	45b2      	cmp	sl, r6
 80036b2:	d007      	beq.n	80036c4 <prvListTasksWithinSingleList+0x58>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036b4:	686b      	ldr	r3, [r5, #4]
 80036b6:	6859      	ldr	r1, [r3, #4]
 80036b8:	6069      	str	r1, [r5, #4]
 80036ba:	4589      	cmp	r9, r1
 80036bc:	d1ec      	bne.n	8003698 <prvListTasksWithinSingleList+0x2c>
 80036be:	684b      	ldr	r3, [r1, #4]
 80036c0:	606b      	str	r3, [r5, #4]
 80036c2:	e7e9      	b.n	8003698 <prvListTasksWithinSingleList+0x2c>
	}
 80036c4:	4620      	mov	r0, r4
 80036c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080036cc <uxTaskGetSystemState>:
	{
 80036cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036ce:	4607      	mov	r7, r0
 80036d0:	460c      	mov	r4, r1
 80036d2:	4616      	mov	r6, r2
		vTaskSuspendAll();
 80036d4:	f7ff fd1e 	bl	8003114 <vTaskSuspendAll>
			if( uxArraySize >= uxCurrentNumberOfTasks )
 80036d8:	4b22      	ldr	r3, [pc, #136]	; (8003764 <uxTaskGetSystemState+0x98>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	42a3      	cmp	r3, r4
 80036de:	d83c      	bhi.n	800375a <uxTaskGetSystemState+0x8e>
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 80036e0:	2438      	movs	r4, #56	; 0x38
 80036e2:	2500      	movs	r5, #0
					uxQueue--;
 80036e4:	3c01      	subs	r4, #1
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 80036e6:	eb05 00c5 	add.w	r0, r5, r5, lsl #3
 80036ea:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 80036ee:	2201      	movs	r2, #1
 80036f0:	4b1d      	ldr	r3, [pc, #116]	; (8003768 <uxTaskGetSystemState+0x9c>)
 80036f2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80036f6:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 80036fa:	f7ff ffb7 	bl	800366c <prvListTasksWithinSingleList>
 80036fe:	4405      	add	r5, r0
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003700:	2c00      	cmp	r4, #0
 8003702:	d1ef      	bne.n	80036e4 <uxTaskGetSystemState+0x18>
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 8003704:	eb05 00c5 	add.w	r0, r5, r5, lsl #3
 8003708:	4b18      	ldr	r3, [pc, #96]	; (800376c <uxTaskGetSystemState+0xa0>)
 800370a:	6819      	ldr	r1, [r3, #0]
 800370c:	2202      	movs	r2, #2
 800370e:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8003712:	f7ff ffab 	bl	800366c <prvListTasksWithinSingleList>
 8003716:	4405      	add	r5, r0
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 8003718:	eb05 00c5 	add.w	r0, r5, r5, lsl #3
 800371c:	4b14      	ldr	r3, [pc, #80]	; (8003770 <uxTaskGetSystemState+0xa4>)
 800371e:	6819      	ldr	r1, [r3, #0]
 8003720:	2202      	movs	r2, #2
 8003722:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8003726:	f7ff ffa1 	bl	800366c <prvListTasksWithinSingleList>
 800372a:	4405      	add	r5, r0
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 800372c:	eb05 00c5 	add.w	r0, r5, r5, lsl #3
 8003730:	2204      	movs	r2, #4
 8003732:	4910      	ldr	r1, [pc, #64]	; (8003774 <uxTaskGetSystemState+0xa8>)
 8003734:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8003738:	f7ff ff98 	bl	800366c <prvListTasksWithinSingleList>
 800373c:	182c      	adds	r4, r5, r0
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800373e:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 8003742:	2203      	movs	r2, #3
 8003744:	490c      	ldr	r1, [pc, #48]	; (8003778 <uxTaskGetSystemState+0xac>)
 8003746:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 800374a:	f7ff ff8f 	bl	800366c <prvListTasksWithinSingleList>
 800374e:	4404      	add	r4, r0
					if( pulTotalRunTime != NULL )
 8003750:	b126      	cbz	r6, 800375c <uxTaskGetSystemState+0x90>
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8003752:	f7fd fc08 	bl	8000f66 <getRunTimeCounterValue>
 8003756:	6030      	str	r0, [r6, #0]
 8003758:	e000      	b.n	800375c <uxTaskGetSystemState+0x90>
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800375a:	2400      	movs	r4, #0
		( void ) xTaskResumeAll();
 800375c:	f7ff fd74 	bl	8003248 <xTaskResumeAll>
	}
 8003760:	4620      	mov	r0, r4
 8003762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003764:	20000eec 	.word	0x20000eec
 8003768:	20000a84 	.word	0x20000a84
 800376c:	20000a7c 	.word	0x20000a7c
 8003770:	20000a80 	.word	0x20000a80
 8003774:	20000f64 	.word	0x20000f64
 8003778:	20000f50 	.word	0x20000f50

0800377c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800377c:	4b05      	ldr	r3, [pc, #20]	; (8003794 <xTaskGetSchedulerState+0x18>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	b133      	cbz	r3, 8003790 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003782:	4b05      	ldr	r3, [pc, #20]	; (8003798 <xTaskGetSchedulerState+0x1c>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	b10b      	cbz	r3, 800378c <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 8003788:	2000      	movs	r0, #0
	}
 800378a:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 800378c:	2002      	movs	r0, #2
 800378e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003790:	2001      	movs	r0, #1
 8003792:	4770      	bx	lr
 8003794:	20000f4c 	.word	0x20000f4c
 8003798:	20000ef4 	.word	0x20000ef4

0800379c <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 800379c:	2800      	cmp	r0, #0
 800379e:	d03b      	beq.n	8003818 <xTaskPriorityDisinherit+0x7c>
	{
 80037a0:	b538      	push	{r3, r4, r5, lr}
 80037a2:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 80037a4:	4b1e      	ldr	r3, [pc, #120]	; (8003820 <xTaskPriorityDisinherit+0x84>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4283      	cmp	r3, r0
 80037aa:	d008      	beq.n	80037be <xTaskPriorityDisinherit+0x22>
 80037ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037b0:	f383 8811 	msr	BASEPRI, r3
 80037b4:	f3bf 8f6f 	isb	sy
 80037b8:	f3bf 8f4f 	dsb	sy
 80037bc:	e7fe      	b.n	80037bc <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 80037be:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80037c0:	b943      	cbnz	r3, 80037d4 <xTaskPriorityDisinherit+0x38>
 80037c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037c6:	f383 8811 	msr	BASEPRI, r3
 80037ca:	f3bf 8f6f 	isb	sy
 80037ce:	f3bf 8f4f 	dsb	sy
 80037d2:	e7fe      	b.n	80037d2 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 80037d4:	3b01      	subs	r3, #1
 80037d6:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80037d8:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80037da:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 80037dc:	4291      	cmp	r1, r2
 80037de:	d01d      	beq.n	800381c <xTaskPriorityDisinherit+0x80>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80037e0:	b10b      	cbz	r3, 80037e6 <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 80037e2:	2000      	movs	r0, #0
	}
 80037e4:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80037e6:	1d05      	adds	r5, r0, #4
 80037e8:	4628      	mov	r0, r5
 80037ea:	f7fe fe65 	bl	80024b8 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80037ee:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80037f0:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037f2:	f1c0 0338 	rsb	r3, r0, #56	; 0x38
 80037f6:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80037f8:	4b0a      	ldr	r3, [pc, #40]	; (8003824 <xTaskPriorityDisinherit+0x88>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4298      	cmp	r0, r3
 80037fe:	d901      	bls.n	8003804 <xTaskPriorityDisinherit+0x68>
 8003800:	4b08      	ldr	r3, [pc, #32]	; (8003824 <xTaskPriorityDisinherit+0x88>)
 8003802:	6018      	str	r0, [r3, #0]
 8003804:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003808:	4629      	mov	r1, r5
 800380a:	4b07      	ldr	r3, [pc, #28]	; (8003828 <xTaskPriorityDisinherit+0x8c>)
 800380c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8003810:	f7fe fe2e 	bl	8002470 <vListInsertEnd>
					xReturn = pdTRUE;
 8003814:	2001      	movs	r0, #1
 8003816:	e7e5      	b.n	80037e4 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 8003818:	2000      	movs	r0, #0
	}
 800381a:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 800381c:	2000      	movs	r0, #0
 800381e:	e7e1      	b.n	80037e4 <xTaskPriorityDisinherit+0x48>
 8003820:	20000a78 	.word	0x20000a78
 8003824:	20000efc 	.word	0x20000efc
 8003828:	20000a84 	.word	0x20000a84

0800382c <vTaskList>:
	{
 800382c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003830:	b083      	sub	sp, #12
 8003832:	4606      	mov	r6, r0
		*pcWriteBuffer = ( char ) 0x00;
 8003834:	2300      	movs	r3, #0
 8003836:	7003      	strb	r3, [r0, #0]
		uxArraySize = uxCurrentNumberOfTasks;
 8003838:	4b29      	ldr	r3, [pc, #164]	; (80038e0 <vTaskList+0xb4>)
 800383a:	681c      	ldr	r4, [r3, #0]
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 800383c:	6818      	ldr	r0, [r3, #0]
 800383e:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8003842:	0080      	lsls	r0, r0, #2
 8003844:	f000 fce6 	bl	8004214 <pvPortMalloc>
		if( pxTaskStatusArray != NULL )
 8003848:	2800      	cmp	r0, #0
 800384a:	d045      	beq.n	80038d8 <vTaskList+0xac>
 800384c:	4680      	mov	r8, r0
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 800384e:	2200      	movs	r2, #0
 8003850:	4621      	mov	r1, r4
 8003852:	f7ff ff3b 	bl	80036cc <uxTaskGetSystemState>
 8003856:	4607      	mov	r7, r0
			for( x = 0; x < uxArraySize; x++ )
 8003858:	2500      	movs	r5, #0
 800385a:	e014      	b.n	8003886 <vTaskList+0x5a>
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800385c:	f04f 0958 	mov.w	r9, #88	; 0x58
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 8003860:	6861      	ldr	r1, [r4, #4]
 8003862:	4630      	mov	r0, r6
 8003864:	f7ff fb36 	bl	8002ed4 <prvWriteNameToBuffer>
 8003868:	4606      	mov	r6, r0
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 800386a:	6923      	ldr	r3, [r4, #16]
 800386c:	8c22      	ldrh	r2, [r4, #32]
 800386e:	68a1      	ldr	r1, [r4, #8]
 8003870:	9101      	str	r1, [sp, #4]
 8003872:	9200      	str	r2, [sp, #0]
 8003874:	464a      	mov	r2, r9
 8003876:	491b      	ldr	r1, [pc, #108]	; (80038e4 <vTaskList+0xb8>)
 8003878:	f002 fb5c 	bl	8005f34 <siprintf>
				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 800387c:	4630      	mov	r0, r6
 800387e:	f7fc fcb7 	bl	80001f0 <strlen>
 8003882:	4406      	add	r6, r0
			for( x = 0; x < uxArraySize; x++ )
 8003884:	3501      	adds	r5, #1
 8003886:	42bd      	cmp	r5, r7
 8003888:	d223      	bcs.n	80038d2 <vTaskList+0xa6>
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800388a:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
 800388e:	eb08 0484 	add.w	r4, r8, r4, lsl #2
 8003892:	7b23      	ldrb	r3, [r4, #12]
 8003894:	2b04      	cmp	r3, #4
 8003896:	d816      	bhi.n	80038c6 <vTaskList+0x9a>
 8003898:	a201      	add	r2, pc, #4	; (adr r2, 80038a0 <vTaskList+0x74>)
 800389a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800389e:	bf00      	nop
 80038a0:	0800385d 	.word	0x0800385d
 80038a4:	080038cd 	.word	0x080038cd
 80038a8:	080038b5 	.word	0x080038b5
 80038ac:	080038bb 	.word	0x080038bb
 80038b0:	080038c1 	.word	0x080038c1
					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 80038b4:	f04f 0942 	mov.w	r9, #66	; 0x42
										break;
 80038b8:	e7d2      	b.n	8003860 <vTaskList+0x34>
					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 80038ba:	f04f 0953 	mov.w	r9, #83	; 0x53
										break;
 80038be:	e7cf      	b.n	8003860 <vTaskList+0x34>
					case eDeleted:		cStatus = tskDELETED_CHAR;
 80038c0:	f04f 0944 	mov.w	r9, #68	; 0x44
										break;
 80038c4:	e7cc      	b.n	8003860 <vTaskList+0x34>
										cStatus = ( char ) 0x00;
 80038c6:	f04f 0900 	mov.w	r9, #0
										break;
 80038ca:	e7c9      	b.n	8003860 <vTaskList+0x34>
					case eReady:		cStatus = tskREADY_CHAR;
 80038cc:	f04f 0952 	mov.w	r9, #82	; 0x52
 80038d0:	e7c6      	b.n	8003860 <vTaskList+0x34>
			vPortFree( pxTaskStatusArray );
 80038d2:	4640      	mov	r0, r8
 80038d4:	f000 fd1c 	bl	8004310 <vPortFree>
	}
 80038d8:	b003      	add	sp, #12
 80038da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80038de:	bf00      	nop
 80038e0:	20000eec 	.word	0x20000eec
 80038e4:	08009c90 	.word	0x08009c90

080038e8 <vTaskGetRunTimeStats>:
	{
 80038e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038ec:	b083      	sub	sp, #12
 80038ee:	4604      	mov	r4, r0
		*pcWriteBuffer = ( char ) 0x00;
 80038f0:	2300      	movs	r3, #0
 80038f2:	7003      	strb	r3, [r0, #0]
		uxArraySize = uxCurrentNumberOfTasks;
 80038f4:	4b1f      	ldr	r3, [pc, #124]	; (8003974 <vTaskGetRunTimeStats+0x8c>)
 80038f6:	681d      	ldr	r5, [r3, #0]
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 80038f8:	6818      	ldr	r0, [r3, #0]
 80038fa:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 80038fe:	0080      	lsls	r0, r0, #2
 8003900:	f000 fc88 	bl	8004214 <pvPortMalloc>
		if( pxTaskStatusArray != NULL )
 8003904:	b178      	cbz	r0, 8003926 <vTaskGetRunTimeStats+0x3e>
 8003906:	4681      	mov	r9, r0
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 8003908:	aa01      	add	r2, sp, #4
 800390a:	4629      	mov	r1, r5
 800390c:	f7ff fede 	bl	80036cc <uxTaskGetSystemState>
 8003910:	4682      	mov	sl, r0
			ulTotalTime /= 100UL;
 8003912:	9b01      	ldr	r3, [sp, #4]
 8003914:	4a18      	ldr	r2, [pc, #96]	; (8003978 <vTaskGetRunTimeStats+0x90>)
 8003916:	fba2 2303 	umull	r2, r3, r2, r3
 800391a:	095b      	lsrs	r3, r3, #5
 800391c:	9301      	str	r3, [sp, #4]
			if( ulTotalTime > 0UL )
 800391e:	bb33      	cbnz	r3, 800396e <vTaskGetRunTimeStats+0x86>
			vPortFree( pxTaskStatusArray );
 8003920:	4648      	mov	r0, r9
 8003922:	f000 fcf5 	bl	8004310 <vPortFree>
	}
 8003926:	b003      	add	sp, #12
 8003928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 800392c:	69aa      	ldr	r2, [r5, #24]
 800392e:	4913      	ldr	r1, [pc, #76]	; (800397c <vTaskGetRunTimeStats+0x94>)
 8003930:	f002 fb00 	bl	8005f34 <siprintf>
					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 8003934:	4620      	mov	r0, r4
 8003936:	f7fc fc5b 	bl	80001f0 <strlen>
 800393a:	4404      	add	r4, r0
				for( x = 0; x < uxArraySize; x++ )
 800393c:	3601      	adds	r6, #1
 800393e:	4556      	cmp	r6, sl
 8003940:	d2ee      	bcs.n	8003920 <vTaskGetRunTimeStats+0x38>
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 8003942:	eb06 05c6 	add.w	r5, r6, r6, lsl #3
 8003946:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800394a:	f8d5 8018 	ldr.w	r8, [r5, #24]
 800394e:	9f01      	ldr	r7, [sp, #4]
 8003950:	fbb8 fbf7 	udiv	fp, r8, r7
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 8003954:	6869      	ldr	r1, [r5, #4]
 8003956:	4620      	mov	r0, r4
 8003958:	f7ff fabc 	bl	8002ed4 <prvWriteNameToBuffer>
 800395c:	4604      	mov	r4, r0
					if( ulStatsAsPercentage > 0UL )
 800395e:	45b8      	cmp	r8, r7
 8003960:	d3e4      	bcc.n	800392c <vTaskGetRunTimeStats+0x44>
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 8003962:	465b      	mov	r3, fp
 8003964:	69aa      	ldr	r2, [r5, #24]
 8003966:	4906      	ldr	r1, [pc, #24]	; (8003980 <vTaskGetRunTimeStats+0x98>)
 8003968:	f002 fae4 	bl	8005f34 <siprintf>
 800396c:	e7e2      	b.n	8003934 <vTaskGetRunTimeStats+0x4c>
				for( x = 0; x < uxArraySize; x++ )
 800396e:	2600      	movs	r6, #0
 8003970:	e7e5      	b.n	800393e <vTaskGetRunTimeStats+0x56>
 8003972:	bf00      	nop
 8003974:	20000eec 	.word	0x20000eec
 8003978:	51eb851f 	.word	0x51eb851f
 800397c:	08009cac 	.word	0x08009cac
 8003980:	08009ca0 	.word	0x08009ca0

08003984 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003984:	4b06      	ldr	r3, [pc, #24]	; (80039a0 <prvGetNextExpireTime+0x1c>)
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	6813      	ldr	r3, [r2, #0]
 800398a:	b92b      	cbnz	r3, 8003998 <prvGetNextExpireTime+0x14>
 800398c:	2301      	movs	r3, #1
 800398e:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003990:	b923      	cbnz	r3, 800399c <prvGetNextExpireTime+0x18>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003992:	68d3      	ldr	r3, [r2, #12]
 8003994:	6818      	ldr	r0, [r3, #0]
 8003996:	4770      	bx	lr
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003998:	2300      	movs	r3, #0
 800399a:	e7f8      	b.n	800398e <prvGetNextExpireTime+0xa>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800399c:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 800399e:	4770      	bx	lr
 80039a0:	20000f80 	.word	0x20000f80

080039a4 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80039a4:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80039a6:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80039a8:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 80039aa:	4291      	cmp	r1, r2
 80039ac:	d80c      	bhi.n	80039c8 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039ae:	1ad2      	subs	r2, r2, r3
 80039b0:	6983      	ldr	r3, [r0, #24]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d301      	bcc.n	80039ba <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80039b6:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 80039b8:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80039ba:	1d01      	adds	r1, r0, #4
 80039bc:	4b09      	ldr	r3, [pc, #36]	; (80039e4 <prvInsertTimerInActiveList+0x40>)
 80039be:	6818      	ldr	r0, [r3, #0]
 80039c0:	f7fe fd61 	bl	8002486 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 80039c4:	2000      	movs	r0, #0
 80039c6:	e7f7      	b.n	80039b8 <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d201      	bcs.n	80039d0 <prvInsertTimerInActiveList+0x2c>
 80039cc:	4299      	cmp	r1, r3
 80039ce:	d206      	bcs.n	80039de <prvInsertTimerInActiveList+0x3a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80039d0:	1d01      	adds	r1, r0, #4
 80039d2:	4b05      	ldr	r3, [pc, #20]	; (80039e8 <prvInsertTimerInActiveList+0x44>)
 80039d4:	6818      	ldr	r0, [r3, #0]
 80039d6:	f7fe fd56 	bl	8002486 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 80039da:	2000      	movs	r0, #0
 80039dc:	e7ec      	b.n	80039b8 <prvInsertTimerInActiveList+0x14>
			xProcessTimerNow = pdTRUE;
 80039de:	2001      	movs	r0, #1
	return xProcessTimerNow;
 80039e0:	e7ea      	b.n	80039b8 <prvInsertTimerInActiveList+0x14>
 80039e2:	bf00      	nop
 80039e4:	20000f84 	.word	0x20000f84
 80039e8:	20000f80 	.word	0x20000f80

080039ec <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80039ec:	b530      	push	{r4, r5, lr}
 80039ee:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80039f0:	f000 fa58 	bl	8003ea4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80039f4:	4b11      	ldr	r3, [pc, #68]	; (8003a3c <prvCheckForValidListAndQueue+0x50>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	b11b      	cbz	r3, 8003a02 <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80039fa:	f000 fa75 	bl	8003ee8 <vPortExitCritical>
}
 80039fe:	b003      	add	sp, #12
 8003a00:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 8003a02:	4d0f      	ldr	r5, [pc, #60]	; (8003a40 <prvCheckForValidListAndQueue+0x54>)
 8003a04:	4628      	mov	r0, r5
 8003a06:	f7fe fd25 	bl	8002454 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003a0a:	4c0e      	ldr	r4, [pc, #56]	; (8003a44 <prvCheckForValidListAndQueue+0x58>)
 8003a0c:	4620      	mov	r0, r4
 8003a0e:	f7fe fd21 	bl	8002454 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003a12:	4b0d      	ldr	r3, [pc, #52]	; (8003a48 <prvCheckForValidListAndQueue+0x5c>)
 8003a14:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003a16:	4b0d      	ldr	r3, [pc, #52]	; (8003a4c <prvCheckForValidListAndQueue+0x60>)
 8003a18:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	9300      	str	r3, [sp, #0]
 8003a1e:	4b0c      	ldr	r3, [pc, #48]	; (8003a50 <prvCheckForValidListAndQueue+0x64>)
 8003a20:	4a0c      	ldr	r2, [pc, #48]	; (8003a54 <prvCheckForValidListAndQueue+0x68>)
 8003a22:	2110      	movs	r1, #16
 8003a24:	200a      	movs	r0, #10
 8003a26:	f7fe fe4d 	bl	80026c4 <xQueueGenericCreateStatic>
 8003a2a:	4b04      	ldr	r3, [pc, #16]	; (8003a3c <prvCheckForValidListAndQueue+0x50>)
 8003a2c:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 8003a2e:	2800      	cmp	r0, #0
 8003a30:	d0e3      	beq.n	80039fa <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003a32:	4909      	ldr	r1, [pc, #36]	; (8003a58 <prvCheckForValidListAndQueue+0x6c>)
 8003a34:	f7ff f86a 	bl	8002b0c <vQueueAddToRegistry>
 8003a38:	e7df      	b.n	80039fa <prvCheckForValidListAndQueue+0xe>
 8003a3a:	bf00      	nop
 8003a3c:	200010a4 	.word	0x200010a4
 8003a40:	20001028 	.word	0x20001028
 8003a44:	2000103c 	.word	0x2000103c
 8003a48:	20000f80 	.word	0x20000f80
 8003a4c:	20000f84 	.word	0x20000f84
 8003a50:	20001054 	.word	0x20001054
 8003a54:	20000f88 	.word	0x20000f88
 8003a58:	08009cb8 	.word	0x08009cb8

08003a5c <xTimerCreateTimerTask>:
{
 8003a5c:	b510      	push	{r4, lr}
 8003a5e:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8003a60:	f7ff ffc4 	bl	80039ec <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8003a64:	4b12      	ldr	r3, [pc, #72]	; (8003ab0 <xTimerCreateTimerTask+0x54>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	b1cb      	cbz	r3, 8003a9e <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003a6a:	2400      	movs	r4, #0
 8003a6c:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003a6e:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003a70:	aa07      	add	r2, sp, #28
 8003a72:	a906      	add	r1, sp, #24
 8003a74:	a805      	add	r0, sp, #20
 8003a76:	f7fe fce1 	bl	800243c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003a7a:	9b05      	ldr	r3, [sp, #20]
 8003a7c:	9302      	str	r3, [sp, #8]
 8003a7e:	9b06      	ldr	r3, [sp, #24]
 8003a80:	9301      	str	r3, [sp, #4]
 8003a82:	2302      	movs	r3, #2
 8003a84:	9300      	str	r3, [sp, #0]
 8003a86:	4623      	mov	r3, r4
 8003a88:	9a07      	ldr	r2, [sp, #28]
 8003a8a:	490a      	ldr	r1, [pc, #40]	; (8003ab4 <xTimerCreateTimerTask+0x58>)
 8003a8c:	480a      	ldr	r0, [pc, #40]	; (8003ab8 <xTimerCreateTimerTask+0x5c>)
 8003a8e:	f7ff fa32 	bl	8002ef6 <xTaskCreateStatic>
 8003a92:	4b0a      	ldr	r3, [pc, #40]	; (8003abc <xTimerCreateTimerTask+0x60>)
 8003a94:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8003a96:	b110      	cbz	r0, 8003a9e <xTimerCreateTimerTask+0x42>
}
 8003a98:	2001      	movs	r0, #1
 8003a9a:	b008      	add	sp, #32
 8003a9c:	bd10      	pop	{r4, pc}
 8003a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aa2:	f383 8811 	msr	BASEPRI, r3
 8003aa6:	f3bf 8f6f 	isb	sy
 8003aaa:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 8003aae:	e7fe      	b.n	8003aae <xTimerCreateTimerTask+0x52>
 8003ab0:	200010a4 	.word	0x200010a4
 8003ab4:	08009cc0 	.word	0x08009cc0
 8003ab8:	08003dc1 	.word	0x08003dc1
 8003abc:	200010a8 	.word	0x200010a8

08003ac0 <xTimerGenericCommand>:
	configASSERT( xTimer );
 8003ac0:	b1b8      	cbz	r0, 8003af2 <xTimerGenericCommand+0x32>
 8003ac2:	469c      	mov	ip, r3
 8003ac4:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 8003ac6:	4818      	ldr	r0, [pc, #96]	; (8003b28 <xTimerGenericCommand+0x68>)
 8003ac8:	6800      	ldr	r0, [r0, #0]
 8003aca:	b358      	cbz	r0, 8003b24 <xTimerGenericCommand+0x64>
{
 8003acc:	b500      	push	{lr}
 8003ace:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 8003ad0:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003ad2:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003ad4:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003ad6:	2905      	cmp	r1, #5
 8003ad8:	dc1c      	bgt.n	8003b14 <xTimerGenericCommand+0x54>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003ada:	f7ff fe4f 	bl	800377c <xTaskGetSchedulerState>
 8003ade:	2802      	cmp	r0, #2
 8003ae0:	d010      	beq.n	8003b04 <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	4669      	mov	r1, sp
 8003ae8:	480f      	ldr	r0, [pc, #60]	; (8003b28 <xTimerGenericCommand+0x68>)
 8003aea:	6800      	ldr	r0, [r0, #0]
 8003aec:	f7fe fe34 	bl	8002758 <xQueueGenericSend>
 8003af0:	e015      	b.n	8003b1e <xTimerGenericCommand+0x5e>
 8003af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af6:	f383 8811 	msr	BASEPRI, r3
 8003afa:	f3bf 8f6f 	isb	sy
 8003afe:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 8003b02:	e7fe      	b.n	8003b02 <xTimerGenericCommand+0x42>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003b04:	2300      	movs	r3, #0
 8003b06:	9a06      	ldr	r2, [sp, #24]
 8003b08:	4669      	mov	r1, sp
 8003b0a:	4807      	ldr	r0, [pc, #28]	; (8003b28 <xTimerGenericCommand+0x68>)
 8003b0c:	6800      	ldr	r0, [r0, #0]
 8003b0e:	f7fe fe23 	bl	8002758 <xQueueGenericSend>
 8003b12:	e004      	b.n	8003b1e <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003b14:	2300      	movs	r3, #0
 8003b16:	4662      	mov	r2, ip
 8003b18:	4669      	mov	r1, sp
 8003b1a:	f7fe fee1 	bl	80028e0 <xQueueGenericSendFromISR>
}
 8003b1e:	b005      	add	sp, #20
 8003b20:	f85d fb04 	ldr.w	pc, [sp], #4
BaseType_t xReturn = pdFAIL;
 8003b24:	2000      	movs	r0, #0
}
 8003b26:	4770      	bx	lr
 8003b28:	200010a4 	.word	0x200010a4

08003b2c <prvSwitchTimerLists>:
{
 8003b2c:	b570      	push	{r4, r5, r6, lr}
 8003b2e:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003b30:	4b1b      	ldr	r3, [pc, #108]	; (8003ba0 <prvSwitchTimerLists+0x74>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	b362      	cbz	r2, 8003b92 <prvSwitchTimerLists+0x66>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b3c:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003b3e:	1d25      	adds	r5, r4, #4
 8003b40:	4628      	mov	r0, r5
 8003b42:	f7fe fcb9 	bl	80024b8 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003b46:	6a23      	ldr	r3, [r4, #32]
 8003b48:	4620      	mov	r0, r4
 8003b4a:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003b4c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8003b50:	f013 0f04 	tst.w	r3, #4
 8003b54:	d0ec      	beq.n	8003b30 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003b56:	69a3      	ldr	r3, [r4, #24]
 8003b58:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 8003b5a:	429e      	cmp	r6, r3
 8003b5c:	d207      	bcs.n	8003b6e <prvSwitchTimerLists+0x42>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003b5e:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003b60:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003b62:	4629      	mov	r1, r5
 8003b64:	4b0e      	ldr	r3, [pc, #56]	; (8003ba0 <prvSwitchTimerLists+0x74>)
 8003b66:	6818      	ldr	r0, [r3, #0]
 8003b68:	f7fe fc8d 	bl	8002486 <vListInsert>
 8003b6c:	e7e0      	b.n	8003b30 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003b6e:	2100      	movs	r1, #0
 8003b70:	9100      	str	r1, [sp, #0]
 8003b72:	460b      	mov	r3, r1
 8003b74:	4632      	mov	r2, r6
 8003b76:	4620      	mov	r0, r4
 8003b78:	f7ff ffa2 	bl	8003ac0 <xTimerGenericCommand>
				configASSERT( xResult );
 8003b7c:	2800      	cmp	r0, #0
 8003b7e:	d1d7      	bne.n	8003b30 <prvSwitchTimerLists+0x4>
 8003b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b84:	f383 8811 	msr	BASEPRI, r3
 8003b88:	f3bf 8f6f 	isb	sy
 8003b8c:	f3bf 8f4f 	dsb	sy
 8003b90:	e7fe      	b.n	8003b90 <prvSwitchTimerLists+0x64>
	pxCurrentTimerList = pxOverflowTimerList;
 8003b92:	4a04      	ldr	r2, [pc, #16]	; (8003ba4 <prvSwitchTimerLists+0x78>)
 8003b94:	6810      	ldr	r0, [r2, #0]
 8003b96:	4902      	ldr	r1, [pc, #8]	; (8003ba0 <prvSwitchTimerLists+0x74>)
 8003b98:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 8003b9a:	6013      	str	r3, [r2, #0]
}
 8003b9c:	b002      	add	sp, #8
 8003b9e:	bd70      	pop	{r4, r5, r6, pc}
 8003ba0:	20000f80 	.word	0x20000f80
 8003ba4:	20000f84 	.word	0x20000f84

08003ba8 <prvSampleTimeNow>:
{
 8003ba8:	b538      	push	{r3, r4, r5, lr}
 8003baa:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 8003bac:	f7ff faba 	bl	8003124 <xTaskGetTickCount>
 8003bb0:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 8003bb2:	4b07      	ldr	r3, [pc, #28]	; (8003bd0 <prvSampleTimeNow+0x28>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4283      	cmp	r3, r0
 8003bb8:	d805      	bhi.n	8003bc6 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 8003bbe:	4b04      	ldr	r3, [pc, #16]	; (8003bd0 <prvSampleTimeNow+0x28>)
 8003bc0:	601c      	str	r4, [r3, #0]
}
 8003bc2:	4620      	mov	r0, r4
 8003bc4:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 8003bc6:	f7ff ffb1 	bl	8003b2c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	602b      	str	r3, [r5, #0]
 8003bce:	e7f6      	b.n	8003bbe <prvSampleTimeNow+0x16>
 8003bd0:	20001050 	.word	0x20001050

08003bd4 <prvProcessExpiredTimer>:
{
 8003bd4:	b570      	push	{r4, r5, r6, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	4606      	mov	r6, r0
 8003bda:	460d      	mov	r5, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bdc:	4917      	ldr	r1, [pc, #92]	; (8003c3c <prvProcessExpiredTimer+0x68>)
 8003bde:	6809      	ldr	r1, [r1, #0]
 8003be0:	68c9      	ldr	r1, [r1, #12]
 8003be2:	68cc      	ldr	r4, [r1, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003be4:	1d20      	adds	r0, r4, #4
 8003be6:	f7fe fc67 	bl	80024b8 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003bea:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
 8003bee:	f01c 0f04 	tst.w	ip, #4
 8003bf2:	d108      	bne.n	8003c06 <prvProcessExpiredTimer+0x32>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003bf4:	f02c 0c01 	bic.w	ip, ip, #1
 8003bf8:	f884 c028 	strb.w	ip, [r4, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003bfc:	6a23      	ldr	r3, [r4, #32]
 8003bfe:	4620      	mov	r0, r4
 8003c00:	4798      	blx	r3
}
 8003c02:	b002      	add	sp, #8
 8003c04:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003c06:	69a1      	ldr	r1, [r4, #24]
 8003c08:	4633      	mov	r3, r6
 8003c0a:	462a      	mov	r2, r5
 8003c0c:	4431      	add	r1, r6
 8003c0e:	4620      	mov	r0, r4
 8003c10:	f7ff fec8 	bl	80039a4 <prvInsertTimerInActiveList>
 8003c14:	2800      	cmp	r0, #0
 8003c16:	d0f1      	beq.n	8003bfc <prvProcessExpiredTimer+0x28>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003c18:	2100      	movs	r1, #0
 8003c1a:	9100      	str	r1, [sp, #0]
 8003c1c:	460b      	mov	r3, r1
 8003c1e:	4632      	mov	r2, r6
 8003c20:	4620      	mov	r0, r4
 8003c22:	f7ff ff4d 	bl	8003ac0 <xTimerGenericCommand>
			configASSERT( xResult );
 8003c26:	2800      	cmp	r0, #0
 8003c28:	d1e8      	bne.n	8003bfc <prvProcessExpiredTimer+0x28>
 8003c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c2e:	f383 8811 	msr	BASEPRI, r3
 8003c32:	f3bf 8f6f 	isb	sy
 8003c36:	f3bf 8f4f 	dsb	sy
 8003c3a:	e7fe      	b.n	8003c3a <prvProcessExpiredTimer+0x66>
 8003c3c:	20000f80 	.word	0x20000f80

08003c40 <prvProcessTimerOrBlockTask>:
{
 8003c40:	b570      	push	{r4, r5, r6, lr}
 8003c42:	b082      	sub	sp, #8
 8003c44:	4606      	mov	r6, r0
 8003c46:	460c      	mov	r4, r1
	vTaskSuspendAll();
 8003c48:	f7ff fa64 	bl	8003114 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003c4c:	a801      	add	r0, sp, #4
 8003c4e:	f7ff ffab 	bl	8003ba8 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 8003c52:	9b01      	ldr	r3, [sp, #4]
 8003c54:	bb33      	cbnz	r3, 8003ca4 <prvProcessTimerOrBlockTask+0x64>
 8003c56:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003c58:	b90c      	cbnz	r4, 8003c5e <prvProcessTimerOrBlockTask+0x1e>
 8003c5a:	42b0      	cmp	r0, r6
 8003c5c:	d219      	bcs.n	8003c92 <prvProcessTimerOrBlockTask+0x52>
				if( xListWasEmpty != pdFALSE )
 8003c5e:	b124      	cbz	r4, 8003c6a <prvProcessTimerOrBlockTask+0x2a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003c60:	4a12      	ldr	r2, [pc, #72]	; (8003cac <prvProcessTimerOrBlockTask+0x6c>)
 8003c62:	6812      	ldr	r2, [r2, #0]
 8003c64:	6812      	ldr	r2, [r2, #0]
 8003c66:	b9da      	cbnz	r2, 8003ca0 <prvProcessTimerOrBlockTask+0x60>
 8003c68:	2401      	movs	r4, #1
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003c6a:	4622      	mov	r2, r4
 8003c6c:	1b71      	subs	r1, r6, r5
 8003c6e:	4b10      	ldr	r3, [pc, #64]	; (8003cb0 <prvProcessTimerOrBlockTask+0x70>)
 8003c70:	6818      	ldr	r0, [r3, #0]
 8003c72:	f7fe ff5f 	bl	8002b34 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003c76:	f7ff fae7 	bl	8003248 <xTaskResumeAll>
 8003c7a:	b9a8      	cbnz	r0, 8003ca8 <prvProcessTimerOrBlockTask+0x68>
					portYIELD_WITHIN_API();
 8003c7c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003c80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c84:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8003c88:	f3bf 8f4f 	dsb	sy
 8003c8c:	f3bf 8f6f 	isb	sy
 8003c90:	e00a      	b.n	8003ca8 <prvProcessTimerOrBlockTask+0x68>
				( void ) xTaskResumeAll();
 8003c92:	f7ff fad9 	bl	8003248 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003c96:	4629      	mov	r1, r5
 8003c98:	4630      	mov	r0, r6
 8003c9a:	f7ff ff9b 	bl	8003bd4 <prvProcessExpiredTimer>
 8003c9e:	e003      	b.n	8003ca8 <prvProcessTimerOrBlockTask+0x68>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003ca0:	461c      	mov	r4, r3
 8003ca2:	e7e2      	b.n	8003c6a <prvProcessTimerOrBlockTask+0x2a>
			( void ) xTaskResumeAll();
 8003ca4:	f7ff fad0 	bl	8003248 <xTaskResumeAll>
}
 8003ca8:	b002      	add	sp, #8
 8003caa:	bd70      	pop	{r4, r5, r6, pc}
 8003cac:	20000f84 	.word	0x20000f84
 8003cb0:	200010a4 	.word	0x200010a4

08003cb4 <prvProcessReceivedCommands>:
{
 8003cb4:	b510      	push	{r4, lr}
 8003cb6:	b088      	sub	sp, #32
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003cb8:	e002      	b.n	8003cc0 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003cba:	9b04      	ldr	r3, [sp, #16]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	da0f      	bge.n	8003ce0 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	a904      	add	r1, sp, #16
 8003cc4:	4b3d      	ldr	r3, [pc, #244]	; (8003dbc <prvProcessReceivedCommands+0x108>)
 8003cc6:	6818      	ldr	r0, [r3, #0]
 8003cc8:	f7fe fe71 	bl	80029ae <xQueueReceive>
 8003ccc:	2800      	cmp	r0, #0
 8003cce:	d073      	beq.n	8003db8 <prvProcessReceivedCommands+0x104>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003cd0:	9b04      	ldr	r3, [sp, #16]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	daf1      	bge.n	8003cba <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003cd6:	9907      	ldr	r1, [sp, #28]
 8003cd8:	9806      	ldr	r0, [sp, #24]
 8003cda:	9b05      	ldr	r3, [sp, #20]
 8003cdc:	4798      	blx	r3
 8003cde:	e7ec      	b.n	8003cba <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003ce0:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003ce2:	6963      	ldr	r3, [r4, #20]
 8003ce4:	b113      	cbz	r3, 8003cec <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003ce6:	1d20      	adds	r0, r4, #4
 8003ce8:	f7fe fbe6 	bl	80024b8 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003cec:	a803      	add	r0, sp, #12
 8003cee:	f7ff ff5b 	bl	8003ba8 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8003cf2:	9b04      	ldr	r3, [sp, #16]
 8003cf4:	2b09      	cmp	r3, #9
 8003cf6:	d8e3      	bhi.n	8003cc0 <prvProcessReceivedCommands+0xc>
 8003cf8:	e8df f003 	tbb	[pc, r3]
 8003cfc:	30050505 	.word	0x30050505
 8003d00:	05055037 	.word	0x05055037
 8003d04:	3730      	.short	0x3730
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003d06:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8003d0a:	f043 0301 	orr.w	r3, r3, #1
 8003d0e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003d12:	9b05      	ldr	r3, [sp, #20]
 8003d14:	69a1      	ldr	r1, [r4, #24]
 8003d16:	4602      	mov	r2, r0
 8003d18:	4419      	add	r1, r3
 8003d1a:	4620      	mov	r0, r4
 8003d1c:	f7ff fe42 	bl	80039a4 <prvInsertTimerInActiveList>
 8003d20:	2800      	cmp	r0, #0
 8003d22:	d0cd      	beq.n	8003cc0 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003d24:	6a23      	ldr	r3, [r4, #32]
 8003d26:	4620      	mov	r0, r4
 8003d28:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003d2a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8003d2e:	f013 0f04 	tst.w	r3, #4
 8003d32:	d0c5      	beq.n	8003cc0 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003d34:	69a2      	ldr	r2, [r4, #24]
 8003d36:	2100      	movs	r1, #0
 8003d38:	9100      	str	r1, [sp, #0]
 8003d3a:	460b      	mov	r3, r1
 8003d3c:	9805      	ldr	r0, [sp, #20]
 8003d3e:	4402      	add	r2, r0
 8003d40:	4620      	mov	r0, r4
 8003d42:	f7ff febd 	bl	8003ac0 <xTimerGenericCommand>
							configASSERT( xResult );
 8003d46:	2800      	cmp	r0, #0
 8003d48:	d1ba      	bne.n	8003cc0 <prvProcessReceivedCommands+0xc>
 8003d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d4e:	f383 8811 	msr	BASEPRI, r3
 8003d52:	f3bf 8f6f 	isb	sy
 8003d56:	f3bf 8f4f 	dsb	sy
 8003d5a:	e7fe      	b.n	8003d5a <prvProcessReceivedCommands+0xa6>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003d5c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8003d60:	f023 0301 	bic.w	r3, r3, #1
 8003d64:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					break;
 8003d68:	e7aa      	b.n	8003cc0 <prvProcessReceivedCommands+0xc>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003d6a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8003d6e:	f043 0301 	orr.w	r3, r3, #1
 8003d72:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003d76:	9905      	ldr	r1, [sp, #20]
 8003d78:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003d7a:	b131      	cbz	r1, 8003d8a <prvProcessReceivedCommands+0xd6>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	4602      	mov	r2, r0
 8003d80:	4401      	add	r1, r0
 8003d82:	4620      	mov	r0, r4
 8003d84:	f7ff fe0e 	bl	80039a4 <prvInsertTimerInActiveList>
					break;
 8003d88:	e79a      	b.n	8003cc0 <prvProcessReceivedCommands+0xc>
 8003d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d8e:	f383 8811 	msr	BASEPRI, r3
 8003d92:	f3bf 8f6f 	isb	sy
 8003d96:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003d9a:	e7fe      	b.n	8003d9a <prvProcessReceivedCommands+0xe6>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003d9c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8003da0:	f013 0f02 	tst.w	r3, #2
 8003da4:	d004      	beq.n	8003db0 <prvProcessReceivedCommands+0xfc>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003da6:	f023 0301 	bic.w	r3, r3, #1
 8003daa:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 8003dae:	e787      	b.n	8003cc0 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
 8003db0:	4620      	mov	r0, r4
 8003db2:	f000 faad 	bl	8004310 <vPortFree>
 8003db6:	e783      	b.n	8003cc0 <prvProcessReceivedCommands+0xc>
}
 8003db8:	b008      	add	sp, #32
 8003dba:	bd10      	pop	{r4, pc}
 8003dbc:	200010a4 	.word	0x200010a4

08003dc0 <prvTimerTask>:
{
 8003dc0:	b500      	push	{lr}
 8003dc2:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003dc4:	a801      	add	r0, sp, #4
 8003dc6:	f7ff fddd 	bl	8003984 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003dca:	9901      	ldr	r1, [sp, #4]
 8003dcc:	f7ff ff38 	bl	8003c40 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 8003dd0:	f7ff ff70 	bl	8003cb4 <prvProcessReceivedCommands>
	for( ;; )
 8003dd4:	e7f6      	b.n	8003dc4 <prvTimerTask+0x4>
	...

08003dd8 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003dd8:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003dde:	4b0d      	ldr	r3, [pc, #52]	; (8003e14 <prvTaskExitError+0x3c>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003de6:	d008      	beq.n	8003dfa <prvTaskExitError+0x22>
 8003de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dec:	f383 8811 	msr	BASEPRI, r3
 8003df0:	f3bf 8f6f 	isb	sy
 8003df4:	f3bf 8f4f 	dsb	sy
 8003df8:	e7fe      	b.n	8003df8 <prvTaskExitError+0x20>
 8003dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dfe:	f383 8811 	msr	BASEPRI, r3
 8003e02:	f3bf 8f6f 	isb	sy
 8003e06:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003e0a:	9b01      	ldr	r3, [sp, #4]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d0fc      	beq.n	8003e0a <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003e10:	b002      	add	sp, #8
 8003e12:	4770      	bx	lr
 8003e14:	2000000c 	.word	0x2000000c

08003e18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003e18:	4808      	ldr	r0, [pc, #32]	; (8003e3c <prvPortStartFirstTask+0x24>)
 8003e1a:	6800      	ldr	r0, [r0, #0]
 8003e1c:	6800      	ldr	r0, [r0, #0]
 8003e1e:	f380 8808 	msr	MSP, r0
 8003e22:	f04f 0000 	mov.w	r0, #0
 8003e26:	f380 8814 	msr	CONTROL, r0
 8003e2a:	b662      	cpsie	i
 8003e2c:	b661      	cpsie	f
 8003e2e:	f3bf 8f4f 	dsb	sy
 8003e32:	f3bf 8f6f 	isb	sy
 8003e36:	df00      	svc	0
 8003e38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003e3a:	0000      	.short	0x0000
 8003e3c:	e000ed08 	.word	0xe000ed08

08003e40 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003e40:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003e50 <vPortEnableVFP+0x10>
 8003e44:	6801      	ldr	r1, [r0, #0]
 8003e46:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003e4a:	6001      	str	r1, [r0, #0]
 8003e4c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003e4e:	0000      	.short	0x0000
 8003e50:	e000ed88 	.word	0xe000ed88

08003e54 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003e54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e58:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003e5c:	f021 0101 	bic.w	r1, r1, #1
 8003e60:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003e64:	4b05      	ldr	r3, [pc, #20]	; (8003e7c <pxPortInitialiseStack+0x28>)
 8003e66:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003e6a:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003e6e:	f06f 0302 	mvn.w	r3, #2
 8003e72:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8003e76:	3844      	subs	r0, #68	; 0x44
 8003e78:	4770      	bx	lr
 8003e7a:	bf00      	nop
 8003e7c:	08003dd9 	.word	0x08003dd9

08003e80 <SVC_Handler>:
	__asm volatile (
 8003e80:	4b07      	ldr	r3, [pc, #28]	; (8003ea0 <pxCurrentTCBConst2>)
 8003e82:	6819      	ldr	r1, [r3, #0]
 8003e84:	6808      	ldr	r0, [r1, #0]
 8003e86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e8a:	f380 8809 	msr	PSP, r0
 8003e8e:	f3bf 8f6f 	isb	sy
 8003e92:	f04f 0000 	mov.w	r0, #0
 8003e96:	f380 8811 	msr	BASEPRI, r0
 8003e9a:	4770      	bx	lr
 8003e9c:	f3af 8000 	nop.w

08003ea0 <pxCurrentTCBConst2>:
 8003ea0:	20000a78 	.word	0x20000a78

08003ea4 <vPortEnterCritical>:
 8003ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ea8:	f383 8811 	msr	BASEPRI, r3
 8003eac:	f3bf 8f6f 	isb	sy
 8003eb0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8003eb4:	4a0b      	ldr	r2, [pc, #44]	; (8003ee4 <vPortEnterCritical+0x40>)
 8003eb6:	6813      	ldr	r3, [r2, #0]
 8003eb8:	3301      	adds	r3, #1
 8003eba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d000      	beq.n	8003ec2 <vPortEnterCritical+0x1e>
}
 8003ec0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003ec2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003ec6:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8003eca:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003ece:	d0f7      	beq.n	8003ec0 <vPortEnterCritical+0x1c>
 8003ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ed4:	f383 8811 	msr	BASEPRI, r3
 8003ed8:	f3bf 8f6f 	isb	sy
 8003edc:	f3bf 8f4f 	dsb	sy
 8003ee0:	e7fe      	b.n	8003ee0 <vPortEnterCritical+0x3c>
 8003ee2:	bf00      	nop
 8003ee4:	2000000c 	.word	0x2000000c

08003ee8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8003ee8:	4b09      	ldr	r3, [pc, #36]	; (8003f10 <vPortExitCritical+0x28>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	b943      	cbnz	r3, 8003f00 <vPortExitCritical+0x18>
 8003eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ef2:	f383 8811 	msr	BASEPRI, r3
 8003ef6:	f3bf 8f6f 	isb	sy
 8003efa:	f3bf 8f4f 	dsb	sy
 8003efe:	e7fe      	b.n	8003efe <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8003f00:	3b01      	subs	r3, #1
 8003f02:	4a03      	ldr	r2, [pc, #12]	; (8003f10 <vPortExitCritical+0x28>)
 8003f04:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003f06:	b90b      	cbnz	r3, 8003f0c <vPortExitCritical+0x24>
	__asm volatile
 8003f08:	f383 8811 	msr	BASEPRI, r3
}
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop
 8003f10:	2000000c 	.word	0x2000000c
	...

08003f20 <PendSV_Handler>:
	__asm volatile
 8003f20:	f3ef 8009 	mrs	r0, PSP
 8003f24:	f3bf 8f6f 	isb	sy
 8003f28:	4b15      	ldr	r3, [pc, #84]	; (8003f80 <pxCurrentTCBConst>)
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	f01e 0f10 	tst.w	lr, #16
 8003f30:	bf08      	it	eq
 8003f32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003f36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f3a:	6010      	str	r0, [r2, #0]
 8003f3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003f40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003f44:	f380 8811 	msr	BASEPRI, r0
 8003f48:	f3bf 8f4f 	dsb	sy
 8003f4c:	f3bf 8f6f 	isb	sy
 8003f50:	f7ff fa1c 	bl	800338c <vTaskSwitchContext>
 8003f54:	f04f 0000 	mov.w	r0, #0
 8003f58:	f380 8811 	msr	BASEPRI, r0
 8003f5c:	bc09      	pop	{r0, r3}
 8003f5e:	6819      	ldr	r1, [r3, #0]
 8003f60:	6808      	ldr	r0, [r1, #0]
 8003f62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f66:	f01e 0f10 	tst.w	lr, #16
 8003f6a:	bf08      	it	eq
 8003f6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003f70:	f380 8809 	msr	PSP, r0
 8003f74:	f3bf 8f6f 	isb	sy
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop
 8003f7c:	f3af 8000 	nop.w

08003f80 <pxCurrentTCBConst>:
 8003f80:	20000a78 	.word	0x20000a78

08003f84 <xPortSysTickHandler>:
{
 8003f84:	b508      	push	{r3, lr}
	__asm volatile
 8003f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f8a:	f383 8811 	msr	BASEPRI, r3
 8003f8e:	f3bf 8f6f 	isb	sy
 8003f92:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8003f96:	f7ff f8cb 	bl	8003130 <xTaskIncrementTick>
 8003f9a:	b128      	cbz	r0, 8003fa8 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003f9c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003fa0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fa4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 8003fa8:	2300      	movs	r3, #0
 8003faa:	f383 8811 	msr	BASEPRI, r3
}
 8003fae:	bd08      	pop	{r3, pc}

08003fb0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003fb0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003fb8:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003fba:	4b05      	ldr	r3, [pc, #20]	; (8003fd0 <vPortSetupTimerInterrupt+0x20>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4905      	ldr	r1, [pc, #20]	; (8003fd4 <vPortSetupTimerInterrupt+0x24>)
 8003fc0:	fba1 1303 	umull	r1, r3, r1, r3
 8003fc4:	099b      	lsrs	r3, r3, #6
 8003fc6:	3b01      	subs	r3, #1
 8003fc8:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003fca:	2307      	movs	r3, #7
 8003fcc:	6113      	str	r3, [r2, #16]
}
 8003fce:	4770      	bx	lr
 8003fd0:	20000000 	.word	0x20000000
 8003fd4:	10624dd3 	.word	0x10624dd3

08003fd8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003fd8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003fdc:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8003fe0:	4b3d      	ldr	r3, [pc, #244]	; (80040d8 <xPortStartScheduler+0x100>)
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d01c      	beq.n	8004020 <xPortStartScheduler+0x48>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003fe6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003fea:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8003fee:	4b3b      	ldr	r3, [pc, #236]	; (80040dc <xPortStartScheduler+0x104>)
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d01e      	beq.n	8004032 <xPortStartScheduler+0x5a>
{
 8003ff4:	b530      	push	{r4, r5, lr}
 8003ff6:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003ff8:	4b39      	ldr	r3, [pc, #228]	; (80040e0 <xPortStartScheduler+0x108>)
 8003ffa:	781a      	ldrb	r2, [r3, #0]
 8003ffc:	b2d2      	uxtb	r2, r2
 8003ffe:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004000:	22ff      	movs	r2, #255	; 0xff
 8004002:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004004:	781b      	ldrb	r3, [r3, #0]
 8004006:	b2db      	uxtb	r3, r3
 8004008:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800400c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8004010:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004014:	4a33      	ldr	r2, [pc, #204]	; (80040e4 <xPortStartScheduler+0x10c>)
 8004016:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004018:	4b33      	ldr	r3, [pc, #204]	; (80040e8 <xPortStartScheduler+0x110>)
 800401a:	2207      	movs	r2, #7
 800401c:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800401e:	e01b      	b.n	8004058 <xPortStartScheduler+0x80>
	__asm volatile
 8004020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004024:	f383 8811 	msr	BASEPRI, r3
 8004028:	f3bf 8f6f 	isb	sy
 800402c:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004030:	e7fe      	b.n	8004030 <xPortStartScheduler+0x58>
 8004032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004036:	f383 8811 	msr	BASEPRI, r3
 800403a:	f3bf 8f6f 	isb	sy
 800403e:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004042:	e7fe      	b.n	8004042 <xPortStartScheduler+0x6a>
			ulMaxPRIGROUPValue--;
 8004044:	4a28      	ldr	r2, [pc, #160]	; (80040e8 <xPortStartScheduler+0x110>)
 8004046:	6813      	ldr	r3, [r2, #0]
 8004048:	3b01      	subs	r3, #1
 800404a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800404c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8004050:	005b      	lsls	r3, r3, #1
 8004052:	b2db      	uxtb	r3, r3
 8004054:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004058:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800405c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004060:	d1f0      	bne.n	8004044 <xPortStartScheduler+0x6c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 8004062:	4b21      	ldr	r3, [pc, #132]	; (80040e8 <xPortStartScheduler+0x110>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	2b03      	cmp	r3, #3
 8004068:	d008      	beq.n	800407c <xPortStartScheduler+0xa4>
 800406a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800406e:	f383 8811 	msr	BASEPRI, r3
 8004072:	f3bf 8f6f 	isb	sy
 8004076:	f3bf 8f4f 	dsb	sy
 800407a:	e7fe      	b.n	800407a <xPortStartScheduler+0xa2>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800407c:	021b      	lsls	r3, r3, #8
 800407e:	4a1a      	ldr	r2, [pc, #104]	; (80040e8 <xPortStartScheduler+0x110>)
 8004080:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004082:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004086:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004088:	9b01      	ldr	r3, [sp, #4]
 800408a:	b2db      	uxtb	r3, r3
 800408c:	4a14      	ldr	r2, [pc, #80]	; (80040e0 <xPortStartScheduler+0x108>)
 800408e:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004090:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
 8004094:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8004098:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800409c:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80040a0:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 80040a4:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80040a8:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 80040ac:	f7ff ff80 	bl	8003fb0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80040b0:	2500      	movs	r5, #0
 80040b2:	4b0e      	ldr	r3, [pc, #56]	; (80040ec <xPortStartScheduler+0x114>)
 80040b4:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 80040b6:	f7ff fec3 	bl	8003e40 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80040ba:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 80040be:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80040c2:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 80040c6:	f7ff fea7 	bl	8003e18 <prvPortStartFirstTask>
	vTaskSwitchContext();
 80040ca:	f7ff f95f 	bl	800338c <vTaskSwitchContext>
	prvTaskExitError();
 80040ce:	f7ff fe83 	bl	8003dd8 <prvTaskExitError>
}
 80040d2:	4628      	mov	r0, r5
 80040d4:	b003      	add	sp, #12
 80040d6:	bd30      	pop	{r4, r5, pc}
 80040d8:	410fc271 	.word	0x410fc271
 80040dc:	410fc270 	.word	0x410fc270
 80040e0:	e000e400 	.word	0xe000e400
 80040e4:	200010ac 	.word	0x200010ac
 80040e8:	200010b0 	.word	0x200010b0
 80040ec:	2000000c 	.word	0x2000000c

080040f0 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80040f0:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80040f4:	2b0f      	cmp	r3, #15
 80040f6:	d90f      	bls.n	8004118 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80040f8:	4a11      	ldr	r2, [pc, #68]	; (8004140 <vPortValidateInterruptPriority+0x50>)
 80040fa:	5c9b      	ldrb	r3, [r3, r2]
 80040fc:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80040fe:	4a11      	ldr	r2, [pc, #68]	; (8004144 <vPortValidateInterruptPriority+0x54>)
 8004100:	7812      	ldrb	r2, [r2, #0]
 8004102:	429a      	cmp	r2, r3
 8004104:	d908      	bls.n	8004118 <vPortValidateInterruptPriority+0x28>
 8004106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800410a:	f383 8811 	msr	BASEPRI, r3
 800410e:	f3bf 8f6f 	isb	sy
 8004112:	f3bf 8f4f 	dsb	sy
 8004116:	e7fe      	b.n	8004116 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004118:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800411c:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8004120:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004124:	4a08      	ldr	r2, [pc, #32]	; (8004148 <vPortValidateInterruptPriority+0x58>)
 8004126:	6812      	ldr	r2, [r2, #0]
 8004128:	4293      	cmp	r3, r2
 800412a:	d908      	bls.n	800413e <vPortValidateInterruptPriority+0x4e>
 800412c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004130:	f383 8811 	msr	BASEPRI, r3
 8004134:	f3bf 8f6f 	isb	sy
 8004138:	f3bf 8f4f 	dsb	sy
 800413c:	e7fe      	b.n	800413c <vPortValidateInterruptPriority+0x4c>
	}
 800413e:	4770      	bx	lr
 8004140:	e000e3f0 	.word	0xe000e3f0
 8004144:	200010ac 	.word	0x200010ac
 8004148:	200010b0 	.word	0x200010b0

0800414c <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800414c:	4a12      	ldr	r2, [pc, #72]	; (8004198 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800414e:	f012 0f07 	tst.w	r2, #7
 8004152:	d01e      	beq.n	8004192 <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004154:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004156:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800415a:	f5c1 5370 	rsb	r3, r1, #15360	; 0x3c00
 800415e:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004160:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004162:	480e      	ldr	r0, [pc, #56]	; (800419c <prvHeapInit+0x50>)
 8004164:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004166:	2100      	movs	r1, #0
 8004168:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800416a:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800416c:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800416e:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 8004172:	480b      	ldr	r0, [pc, #44]	; (80041a0 <prvHeapInit+0x54>)
 8004174:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8004176:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004178:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800417a:	1a99      	subs	r1, r3, r2
 800417c:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800417e:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004180:	4b08      	ldr	r3, [pc, #32]	; (80041a4 <prvHeapInit+0x58>)
 8004182:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004184:	4b08      	ldr	r3, [pc, #32]	; (80041a8 <prvHeapInit+0x5c>)
 8004186:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004188:	4b08      	ldr	r3, [pc, #32]	; (80041ac <prvHeapInit+0x60>)
 800418a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800418e:	601a      	str	r2, [r3, #0]
}
 8004190:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004192:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004196:	e7e4      	b.n	8004162 <prvHeapInit+0x16>
 8004198:	200010b8 	.word	0x200010b8
 800419c:	20004ccc 	.word	0x20004ccc
 80041a0:	200010b4 	.word	0x200010b4
 80041a4:	20004cc0 	.word	0x20004cc0
 80041a8:	20004cbc 	.word	0x20004cbc
 80041ac:	20004cb8 	.word	0x20004cb8

080041b0 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80041b0:	4b16      	ldr	r3, [pc, #88]	; (800420c <prvInsertBlockIntoFreeList+0x5c>)
 80041b2:	461a      	mov	r2, r3
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4283      	cmp	r3, r0
 80041b8:	d3fb      	bcc.n	80041b2 <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80041ba:	6851      	ldr	r1, [r2, #4]
 80041bc:	eb02 0c01 	add.w	ip, r2, r1
 80041c0:	4584      	cmp	ip, r0
 80041c2:	d009      	beq.n	80041d8 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80041c4:	6841      	ldr	r1, [r0, #4]
 80041c6:	eb00 0c01 	add.w	ip, r0, r1
 80041ca:	4563      	cmp	r3, ip
 80041cc:	d009      	beq.n	80041e2 <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80041ce:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80041d0:	4290      	cmp	r0, r2
 80041d2:	d019      	beq.n	8004208 <prvInsertBlockIntoFreeList+0x58>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80041d4:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 80041d6:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80041d8:	6840      	ldr	r0, [r0, #4]
 80041da:	4401      	add	r1, r0
 80041dc:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 80041de:	4610      	mov	r0, r2
 80041e0:	e7f0      	b.n	80041c4 <prvInsertBlockIntoFreeList+0x14>
{
 80041e2:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80041e4:	4c0a      	ldr	r4, [pc, #40]	; (8004210 <prvInsertBlockIntoFreeList+0x60>)
 80041e6:	6824      	ldr	r4, [r4, #0]
 80041e8:	42a3      	cmp	r3, r4
 80041ea:	d00b      	beq.n	8004204 <prvInsertBlockIntoFreeList+0x54>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	4419      	add	r1, r3
 80041f0:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80041f2:	6813      	ldr	r3, [r2, #0]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 80041f8:	4290      	cmp	r0, r2
 80041fa:	d000      	beq.n	80041fe <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80041fc:	6010      	str	r0, [r2, #0]
	}
}
 80041fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004202:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004204:	6004      	str	r4, [r0, #0]
 8004206:	e7f7      	b.n	80041f8 <prvInsertBlockIntoFreeList+0x48>
 8004208:	4770      	bx	lr
 800420a:	bf00      	nop
 800420c:	20004ccc 	.word	0x20004ccc
 8004210:	200010b4 	.word	0x200010b4

08004214 <pvPortMalloc>:
{
 8004214:	b570      	push	{r4, r5, r6, lr}
 8004216:	4605      	mov	r5, r0
	vTaskSuspendAll();
 8004218:	f7fe ff7c 	bl	8003114 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800421c:	4b36      	ldr	r3, [pc, #216]	; (80042f8 <pvPortMalloc+0xe4>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	b1a3      	cbz	r3, 800424c <pvPortMalloc+0x38>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004222:	4b36      	ldr	r3, [pc, #216]	; (80042fc <pvPortMalloc+0xe8>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	421d      	tst	r5, r3
 8004228:	d14e      	bne.n	80042c8 <pvPortMalloc+0xb4>
			if( xWantedSize > 0 )
 800422a:	b135      	cbz	r5, 800423a <pvPortMalloc+0x26>
				xWantedSize += xHeapStructSize;
 800422c:	3508      	adds	r5, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800422e:	f015 0f07 	tst.w	r5, #7
 8004232:	d002      	beq.n	800423a <pvPortMalloc+0x26>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004234:	f025 0507 	bic.w	r5, r5, #7
 8004238:	3508      	adds	r5, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800423a:	2d00      	cmp	r5, #0
 800423c:	d046      	beq.n	80042cc <pvPortMalloc+0xb8>
 800423e:	4b30      	ldr	r3, [pc, #192]	; (8004300 <pvPortMalloc+0xec>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	42ab      	cmp	r3, r5
 8004244:	d351      	bcc.n	80042ea <pvPortMalloc+0xd6>
				pxBlock = xStart.pxNextFreeBlock;
 8004246:	4a2f      	ldr	r2, [pc, #188]	; (8004304 <pvPortMalloc+0xf0>)
 8004248:	6814      	ldr	r4, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800424a:	e004      	b.n	8004256 <pvPortMalloc+0x42>
			prvHeapInit();
 800424c:	f7ff ff7e 	bl	800414c <prvHeapInit>
 8004250:	e7e7      	b.n	8004222 <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 8004252:	4622      	mov	r2, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 8004254:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004256:	6863      	ldr	r3, [r4, #4]
 8004258:	42ab      	cmp	r3, r5
 800425a:	d202      	bcs.n	8004262 <pvPortMalloc+0x4e>
 800425c:	6823      	ldr	r3, [r4, #0]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d1f7      	bne.n	8004252 <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 8004262:	4b25      	ldr	r3, [pc, #148]	; (80042f8 <pvPortMalloc+0xe4>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	42a3      	cmp	r3, r4
 8004268:	d041      	beq.n	80042ee <pvPortMalloc+0xda>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800426a:	6816      	ldr	r6, [r2, #0]
 800426c:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800426e:	6823      	ldr	r3, [r4, #0]
 8004270:	6013      	str	r3, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004272:	6863      	ldr	r3, [r4, #4]
 8004274:	1b5b      	subs	r3, r3, r5
 8004276:	2b10      	cmp	r3, #16
 8004278:	d910      	bls.n	800429c <pvPortMalloc+0x88>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800427a:	1960      	adds	r0, r4, r5
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800427c:	f010 0f07 	tst.w	r0, #7
 8004280:	d008      	beq.n	8004294 <pvPortMalloc+0x80>
 8004282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004286:	f383 8811 	msr	BASEPRI, r3
 800428a:	f3bf 8f6f 	isb	sy
 800428e:	f3bf 8f4f 	dsb	sy
 8004292:	e7fe      	b.n	8004292 <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004294:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004296:	6065      	str	r5, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004298:	f7ff ff8a 	bl	80041b0 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800429c:	6862      	ldr	r2, [r4, #4]
 800429e:	4918      	ldr	r1, [pc, #96]	; (8004300 <pvPortMalloc+0xec>)
 80042a0:	680b      	ldr	r3, [r1, #0]
 80042a2:	1a9b      	subs	r3, r3, r2
 80042a4:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80042a6:	4918      	ldr	r1, [pc, #96]	; (8004308 <pvPortMalloc+0xf4>)
 80042a8:	6809      	ldr	r1, [r1, #0]
 80042aa:	428b      	cmp	r3, r1
 80042ac:	d201      	bcs.n	80042b2 <pvPortMalloc+0x9e>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80042ae:	4916      	ldr	r1, [pc, #88]	; (8004308 <pvPortMalloc+0xf4>)
 80042b0:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80042b2:	4b12      	ldr	r3, [pc, #72]	; (80042fc <pvPortMalloc+0xe8>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80042ba:	2300      	movs	r3, #0
 80042bc:	6023      	str	r3, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 80042be:	4a13      	ldr	r2, [pc, #76]	; (800430c <pvPortMalloc+0xf8>)
 80042c0:	6813      	ldr	r3, [r2, #0]
 80042c2:	3301      	adds	r3, #1
 80042c4:	6013      	str	r3, [r2, #0]
 80042c6:	e002      	b.n	80042ce <pvPortMalloc+0xba>
void *pvReturn = NULL;
 80042c8:	2600      	movs	r6, #0
 80042ca:	e000      	b.n	80042ce <pvPortMalloc+0xba>
 80042cc:	2600      	movs	r6, #0
	( void ) xTaskResumeAll();
 80042ce:	f7fe ffbb 	bl	8003248 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80042d2:	f016 0f07 	tst.w	r6, #7
 80042d6:	d00c      	beq.n	80042f2 <pvPortMalloc+0xde>
 80042d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042dc:	f383 8811 	msr	BASEPRI, r3
 80042e0:	f3bf 8f6f 	isb	sy
 80042e4:	f3bf 8f4f 	dsb	sy
 80042e8:	e7fe      	b.n	80042e8 <pvPortMalloc+0xd4>
void *pvReturn = NULL;
 80042ea:	2600      	movs	r6, #0
 80042ec:	e7ef      	b.n	80042ce <pvPortMalloc+0xba>
 80042ee:	2600      	movs	r6, #0
 80042f0:	e7ed      	b.n	80042ce <pvPortMalloc+0xba>
}
 80042f2:	4630      	mov	r0, r6
 80042f4:	bd70      	pop	{r4, r5, r6, pc}
 80042f6:	bf00      	nop
 80042f8:	200010b4 	.word	0x200010b4
 80042fc:	20004cb8 	.word	0x20004cb8
 8004300:	20004cbc 	.word	0x20004cbc
 8004304:	20004ccc 	.word	0x20004ccc
 8004308:	20004cc0 	.word	0x20004cc0
 800430c:	20004cc4 	.word	0x20004cc4

08004310 <vPortFree>:
	if( pv != NULL )
 8004310:	2800      	cmp	r0, #0
 8004312:	d034      	beq.n	800437e <vPortFree+0x6e>
{
 8004314:	b538      	push	{r3, r4, r5, lr}
 8004316:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 8004318:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800431c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8004320:	4a17      	ldr	r2, [pc, #92]	; (8004380 <vPortFree+0x70>)
 8004322:	6812      	ldr	r2, [r2, #0]
 8004324:	4213      	tst	r3, r2
 8004326:	d108      	bne.n	800433a <vPortFree+0x2a>
 8004328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800432c:	f383 8811 	msr	BASEPRI, r3
 8004330:	f3bf 8f6f 	isb	sy
 8004334:	f3bf 8f4f 	dsb	sy
 8004338:	e7fe      	b.n	8004338 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800433a:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800433e:	b141      	cbz	r1, 8004352 <vPortFree+0x42>
 8004340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004344:	f383 8811 	msr	BASEPRI, r3
 8004348:	f3bf 8f6f 	isb	sy
 800434c:	f3bf 8f4f 	dsb	sy
 8004350:	e7fe      	b.n	8004350 <vPortFree+0x40>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004352:	ea23 0302 	bic.w	r3, r3, r2
 8004356:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800435a:	f7fe fedb 	bl	8003114 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800435e:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8004362:	4a08      	ldr	r2, [pc, #32]	; (8004384 <vPortFree+0x74>)
 8004364:	6813      	ldr	r3, [r2, #0]
 8004366:	440b      	add	r3, r1
 8004368:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800436a:	4628      	mov	r0, r5
 800436c:	f7ff ff20 	bl	80041b0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004370:	4a05      	ldr	r2, [pc, #20]	; (8004388 <vPortFree+0x78>)
 8004372:	6813      	ldr	r3, [r2, #0]
 8004374:	3301      	adds	r3, #1
 8004376:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 8004378:	f7fe ff66 	bl	8003248 <xTaskResumeAll>
}
 800437c:	bd38      	pop	{r3, r4, r5, pc}
 800437e:	4770      	bx	lr
 8004380:	20004cb8 	.word	0x20004cb8
 8004384:	20004cbc 	.word	0x20004cbc
 8004388:	20004cc8 	.word	0x20004cc8
 800438c:	00000000 	.word	0x00000000

08004390 <cal_volume_flow_rate>:
 *
 * \return		volume flow rate in m^3/s.
*/
//-------------------------------------------------------------------------------------------------
float cal_volume_flow_rate(float pd, float ps, float compSpeed)
{
 8004390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004392:	ed2d 8b08 	vpush	{d8-d11}
 8004396:	eeb0 aa40 	vmov.f32	s20, s0
 800439a:	eef0 9a60 	vmov.f32	s19, s1
	float a, b, c, pr;
	float volume_flow_rate;

	/* Calculated intermediate coefficients */
	a = COE_A(compSpeed);
 800439e:	eddf 7a72 	vldr	s15, [pc, #456]	; 8004568 <cal_volume_flow_rate+0x1d8>
 80043a2:	ee81 9a27 	vdiv.f32	s18, s2, s15
 80043a6:	ee19 0a10 	vmov	r0, s18
 80043aa:	f7fc f8dd 	bl	8000568 <__aeabi_f2d>
 80043ae:	ec41 0b18 	vmov	d8, r0, r1
 80043b2:	ec41 0b10 	vmov	d0, r0, r1
 80043b6:	f002 ff7d 	bl	80072b4 <sqrt>
 80043ba:	ec51 0b10 	vmov	r0, r1, d0
 80043be:	a358      	add	r3, pc, #352	; (adr r3, 8004520 <cal_volume_flow_rate+0x190>)
 80043c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043c4:	f7fc f928 	bl	8000618 <__aeabi_dmul>
 80043c8:	a357      	add	r3, pc, #348	; (adr r3, 8004528 <cal_volume_flow_rate+0x198>)
 80043ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ce:	f7fb ff6d 	bl	80002ac <__adddf3>
 80043d2:	4604      	mov	r4, r0
 80043d4:	460d      	mov	r5, r1
 80043d6:	eddf 7a65 	vldr	s15, [pc, #404]	; 800456c <cal_volume_flow_rate+0x1dc>
 80043da:	ee69 7a27 	vmul.f32	s15, s18, s15
 80043de:	ee17 0a90 	vmov	r0, s15
 80043e2:	f7fc f8c1 	bl	8000568 <__aeabi_f2d>
 80043e6:	4602      	mov	r2, r0
 80043e8:	460b      	mov	r3, r1
 80043ea:	4620      	mov	r0, r4
 80043ec:	4629      	mov	r1, r5
 80043ee:	f7fb ff5d 	bl	80002ac <__adddf3>
 80043f2:	f7fc fbe9 	bl	8000bc8 <__aeabi_d2f>
 80043f6:	4606      	mov	r6, r0
	b = COE_B(compSpeed);
 80043f8:	ed9f bb4d 	vldr	d11, [pc, #308]	; 8004530 <cal_volume_flow_rate+0x1a0>
 80043fc:	eeb0 1a4b 	vmov.f32	s2, s22
 8004400:	eef0 1a6b 	vmov.f32	s3, s23
 8004404:	eeb0 0a48 	vmov.f32	s0, s16
 8004408:	eef0 0a68 	vmov.f32	s1, s17
 800440c:	f002 fee2 	bl	80071d4 <pow>
 8004410:	ec51 0b10 	vmov	r0, r1, d0
 8004414:	a348      	add	r3, pc, #288	; (adr r3, 8004538 <cal_volume_flow_rate+0x1a8>)
 8004416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800441a:	f7fc f8fd 	bl	8000618 <__aeabi_dmul>
 800441e:	a348      	add	r3, pc, #288	; (adr r3, 8004540 <cal_volume_flow_rate+0x1b0>)
 8004420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004424:	f7fb ff42 	bl	80002ac <__adddf3>
 8004428:	4604      	mov	r4, r0
 800442a:	460d      	mov	r5, r1
 800442c:	ed9f 1b46 	vldr	d1, [pc, #280]	; 8004548 <cal_volume_flow_rate+0x1b8>
 8004430:	eeb0 0a48 	vmov.f32	s0, s16
 8004434:	eef0 0a68 	vmov.f32	s1, s17
 8004438:	f002 fecc 	bl	80071d4 <pow>
 800443c:	ec51 0b10 	vmov	r0, r1, d0
 8004440:	a343      	add	r3, pc, #268	; (adr r3, 8004550 <cal_volume_flow_rate+0x1c0>)
 8004442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004446:	f7fc f8e7 	bl	8000618 <__aeabi_dmul>
 800444a:	4602      	mov	r2, r0
 800444c:	460b      	mov	r3, r1
 800444e:	4620      	mov	r0, r4
 8004450:	4629      	mov	r1, r5
 8004452:	f7fb ff2b 	bl	80002ac <__adddf3>
 8004456:	f7fc fbb7 	bl	8000bc8 <__aeabi_d2f>
 800445a:	4607      	mov	r7, r0
	c = COE_C(compSpeed);
 800445c:	eddf 7a44 	vldr	s15, [pc, #272]	; 8004570 <cal_volume_flow_rate+0x1e0>
 8004460:	ee29 9a27 	vmul.f32	s18, s18, s15
 8004464:	eddf 7a43 	vldr	s15, [pc, #268]	; 8004574 <cal_volume_flow_rate+0x1e4>
 8004468:	ee79 7a27 	vadd.f32	s15, s18, s15
 800446c:	ee17 0a90 	vmov	r0, s15
 8004470:	f7fc f87a 	bl	8000568 <__aeabi_f2d>
 8004474:	4604      	mov	r4, r0
 8004476:	460d      	mov	r5, r1
 8004478:	eeb0 1a4b 	vmov.f32	s2, s22
 800447c:	eef0 1a6b 	vmov.f32	s3, s23
 8004480:	eeb0 0a48 	vmov.f32	s0, s16
 8004484:	eef0 0a68 	vmov.f32	s1, s17
 8004488:	f002 fea4 	bl	80071d4 <pow>
 800448c:	ec51 0b10 	vmov	r0, r1, d0
 8004490:	2200      	movs	r2, #0
 8004492:	2300      	movs	r3, #0
 8004494:	f7fc f8c0 	bl	8000618 <__aeabi_dmul>
 8004498:	4602      	mov	r2, r0
 800449a:	460b      	mov	r3, r1
 800449c:	4620      	mov	r0, r4
 800449e:	4629      	mov	r1, r5
 80044a0:	f7fb ff04 	bl	80002ac <__adddf3>
 80044a4:	f7fc fb90 	bl	8000bc8 <__aeabi_d2f>
	pr = PR(pd, ps);
 80044a8:	ee8a 9a29 	vdiv.f32	s18, s20, s19

	/* Calculated volume flow rate */
	volume_flow_rate = (a-b*pow(pr, c))*4.719476965*pow(10, (-4))/60;
 80044ac:	f7fc f85c 	bl	8000568 <__aeabi_f2d>
 80044b0:	ec41 0b18 	vmov	d8, r0, r1
 80044b4:	ee19 0a10 	vmov	r0, s18
 80044b8:	f7fc f856 	bl	8000568 <__aeabi_f2d>
 80044bc:	eeb0 1a48 	vmov.f32	s2, s16
 80044c0:	eef0 1a68 	vmov.f32	s3, s17
 80044c4:	ec41 0b10 	vmov	d0, r0, r1
 80044c8:	f002 fe84 	bl	80071d4 <pow>
 80044cc:	ec55 4b10 	vmov	r4, r5, d0
 80044d0:	4638      	mov	r0, r7
 80044d2:	f7fc f849 	bl	8000568 <__aeabi_f2d>
 80044d6:	4622      	mov	r2, r4
 80044d8:	462b      	mov	r3, r5
 80044da:	f7fc f89d 	bl	8000618 <__aeabi_dmul>
 80044de:	4604      	mov	r4, r0
 80044e0:	460d      	mov	r5, r1
 80044e2:	4630      	mov	r0, r6
 80044e4:	f7fc f840 	bl	8000568 <__aeabi_f2d>
 80044e8:	4622      	mov	r2, r4
 80044ea:	462b      	mov	r3, r5
 80044ec:	f7fb fedc 	bl	80002a8 <__aeabi_dsub>
 80044f0:	a319      	add	r3, pc, #100	; (adr r3, 8004558 <cal_volume_flow_rate+0x1c8>)
 80044f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044f6:	f7fc f88f 	bl	8000618 <__aeabi_dmul>
 80044fa:	a319      	add	r3, pc, #100	; (adr r3, 8004560 <cal_volume_flow_rate+0x1d0>)
 80044fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004500:	f7fc f88a 	bl	8000618 <__aeabi_dmul>
 8004504:	2200      	movs	r2, #0
 8004506:	4b1c      	ldr	r3, [pc, #112]	; (8004578 <cal_volume_flow_rate+0x1e8>)
 8004508:	f7fc f9b0 	bl	800086c <__aeabi_ddiv>
 800450c:	f7fc fb5c 	bl	8000bc8 <__aeabi_d2f>

	return volume_flow_rate;
}
 8004510:	ee00 0a10 	vmov	s0, r0
 8004514:	ecbd 8b08 	vpop	{d8-d11}
 8004518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800451a:	bf00      	nop
 800451c:	f3af 8000 	nop.w
 8004520:	60000000 	.word	0x60000000
 8004524:	c05fd28f 	.word	0xc05fd28f
 8004528:	c0000000 	.word	0xc0000000
 800452c:	404beccc 	.word	0x404beccc
 8004530:	00000000 	.word	0x00000000
 8004534:	40000000 	.word	0x40000000
 8004538:	a0000000 	.word	0xa0000000
 800453c:	3fafc7a3 	.word	0x3fafc7a3
 8004540:	c0000000 	.word	0xc0000000
 8004544:	3ff3c154 	.word	0x3ff3c154
 8004548:	00000000 	.word	0x00000000
 800454c:	40100000 	.word	0x40100000
 8004550:	c0000000 	.word	0xc0000000
 8004554:	3fce1d53 	.word	0x3fce1d53
 8004558:	91cb99f2 	.word	0x91cb99f2
 800455c:	4012e0be 	.word	0x4012e0be
 8004560:	eb1c432d 	.word	0xeb1c432d
 8004564:	3f1a36e2 	.word	0x3f1a36e2
 8004568:	45610000 	.word	0x45610000
 800456c:	442f028f 	.word	0x442f028f
 8004570:	00000000 	.word	0x00000000
 8004574:	3fe27efa 	.word	0x3fe27efa
 8004578:	404e0000 	.word	0x404e0000
 800457c:	00000000 	.word	0x00000000

08004580 <cal_power>:
 *
 * \return		power in W.
*/
//-------------------------------------------------------------------------------------------------
float cal_power(float pd, float ps, float compSpeed)
{
 8004580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004584:	ed2d 8b0c 	vpush	{d8-d13}
 8004588:	b087      	sub	sp, #28
 800458a:	eeb0 ba40 	vmov.f32	s22, s0
 800458e:	eef0 aa60 	vmov.f32	s21, s1
 8004592:	eef0 ba41 	vmov.f32	s23, s2
	float d, e, f, g, pr;
	float volume_flow_rate, power;

	/* Calculated intermediate coefficients */
	d = COE_D(compSpeed);
 8004596:	eddf 7aee 	vldr	s15, [pc, #952]	; 8004950 <cal_power+0x3d0>
 800459a:	ee81 aa27 	vdiv.f32	s20, s2, s15
 800459e:	ee1a 0a10 	vmov	r0, s20
 80045a2:	f7fb ffe1 	bl	8000568 <__aeabi_f2d>
 80045a6:	ec41 0b18 	vmov	d8, r0, r1
 80045aa:	ec41 0b10 	vmov	d0, r0, r1
 80045ae:	f002 fe81 	bl	80072b4 <sqrt>
 80045b2:	ec51 0b10 	vmov	r0, r1, d0
 80045b6:	2200      	movs	r2, #0
 80045b8:	2300      	movs	r3, #0
 80045ba:	f7fc f82d 	bl	8000618 <__aeabi_dmul>
 80045be:	a3d4      	add	r3, pc, #848	; (adr r3, 8004910 <cal_power+0x390>)
 80045c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045c4:	f7fb fe72 	bl	80002ac <__adddf3>
 80045c8:	4606      	mov	r6, r0
 80045ca:	460f      	mov	r7, r1
 80045cc:	eddf 7ae1 	vldr	s15, [pc, #900]	; 8004954 <cal_power+0x3d4>
 80045d0:	ee6a 7a27 	vmul.f32	s15, s20, s15
 80045d4:	ee17 0a90 	vmov	r0, s15
 80045d8:	f7fb ffc6 	bl	8000568 <__aeabi_f2d>
 80045dc:	4604      	mov	r4, r0
 80045de:	460d      	mov	r5, r1
 80045e0:	4602      	mov	r2, r0
 80045e2:	460b      	mov	r3, r1
 80045e4:	4630      	mov	r0, r6
 80045e6:	4639      	mov	r1, r7
 80045e8:	f7fb fe60 	bl	80002ac <__adddf3>
 80045ec:	f7fc faec 	bl	8000bc8 <__aeabi_d2f>
 80045f0:	4683      	mov	fp, r0
	e = COE_E(compSpeed);
 80045f2:	eddf 7ad9 	vldr	s15, [pc, #868]	; 8004958 <cal_power+0x3d8>
 80045f6:	ee6a 7a27 	vmul.f32	s15, s20, s15
 80045fa:	ed9f 7ad8 	vldr	s14, [pc, #864]	; 800495c <cal_power+0x3dc>
 80045fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004602:	ee17 0a90 	vmov	r0, s15
 8004606:	f7fb ffaf 	bl	8000568 <__aeabi_f2d>
 800460a:	4680      	mov	r8, r0
 800460c:	4689      	mov	r9, r1
 800460e:	ed9f 9bc2 	vldr	d9, [pc, #776]	; 8004918 <cal_power+0x398>
 8004612:	eeb0 1a49 	vmov.f32	s2, s18
 8004616:	eef0 1a69 	vmov.f32	s3, s19
 800461a:	eeb0 0a48 	vmov.f32	s0, s16
 800461e:	eef0 0a68 	vmov.f32	s1, s17
 8004622:	f002 fdd7 	bl	80071d4 <pow>
 8004626:	ec51 0b10 	vmov	r0, r1, d0
 800462a:	a3bd      	add	r3, pc, #756	; (adr r3, 8004920 <cal_power+0x3a0>)
 800462c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004630:	f7fb fff2 	bl	8000618 <__aeabi_dmul>
 8004634:	4602      	mov	r2, r0
 8004636:	460b      	mov	r3, r1
 8004638:	4640      	mov	r0, r8
 800463a:	4649      	mov	r1, r9
 800463c:	f7fb fe36 	bl	80002ac <__adddf3>
 8004640:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004644:	eeb0 1a49 	vmov.f32	s2, s18
 8004648:	eef0 1a69 	vmov.f32	s3, s19
 800464c:	eeb0 0a48 	vmov.f32	s0, s16
 8004650:	eef0 0a68 	vmov.f32	s1, s17
 8004654:	f002 fdbe 	bl	80071d4 <pow>
 8004658:	ec51 0b10 	vmov	r0, r1, d0
 800465c:	a3b0      	add	r3, pc, #704	; (adr r3, 8004920 <cal_power+0x3a0>)
 800465e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004662:	f7fb ffd9 	bl	8000618 <__aeabi_dmul>
 8004666:	4602      	mov	r2, r0
 8004668:	460b      	mov	r3, r1
 800466a:	4640      	mov	r0, r8
 800466c:	4649      	mov	r1, r9
 800466e:	f7fb fe1d 	bl	80002ac <__adddf3>
 8004672:	4606      	mov	r6, r0
 8004674:	460f      	mov	r7, r1
 8004676:	eddf 7aba 	vldr	s15, [pc, #744]	; 8004960 <cal_power+0x3e0>
 800467a:	ee2a aa27 	vmul.f32	s20, s20, s15
 800467e:	eddf 7ab9 	vldr	s15, [pc, #740]	; 8004964 <cal_power+0x3e4>
 8004682:	ee7a 7a27 	vadd.f32	s15, s20, s15
 8004686:	ee17 0a90 	vmov	r0, s15
 800468a:	f7fb ff6d 	bl	8000568 <__aeabi_f2d>
 800468e:	e9cd 0100 	strd	r0, r1, [sp]
 8004692:	eeb0 1a49 	vmov.f32	s2, s18
 8004696:	eef0 1a69 	vmov.f32	s3, s19
 800469a:	eeb0 0a48 	vmov.f32	s0, s16
 800469e:	eef0 0a68 	vmov.f32	s1, s17
 80046a2:	f002 fd97 	bl	80071d4 <pow>
 80046a6:	ec51 0b10 	vmov	r0, r1, d0
 80046aa:	a39f      	add	r3, pc, #636	; (adr r3, 8004928 <cal_power+0x3a8>)
 80046ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046b0:	f7fb ffb2 	bl	8000618 <__aeabi_dmul>
 80046b4:	4602      	mov	r2, r0
 80046b6:	460b      	mov	r3, r1
 80046b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80046bc:	f7fb fdf6 	bl	80002ac <__adddf3>
 80046c0:	4602      	mov	r2, r0
 80046c2:	460b      	mov	r3, r1
 80046c4:	4630      	mov	r0, r6
 80046c6:	4639      	mov	r1, r7
 80046c8:	f7fb fdee 	bl	80002a8 <__aeabi_dsub>
 80046cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80046d0:	eeb0 0a48 	vmov.f32	s0, s16
 80046d4:	eef0 0a68 	vmov.f32	s1, s17
 80046d8:	f002 fdec 	bl	80072b4 <sqrt>
 80046dc:	ec51 0b10 	vmov	r0, r1, d0
 80046e0:	2200      	movs	r2, #0
 80046e2:	2300      	movs	r3, #0
 80046e4:	f7fb ff98 	bl	8000618 <__aeabi_dmul>
 80046e8:	a389      	add	r3, pc, #548	; (adr r3, 8004910 <cal_power+0x390>)
 80046ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ee:	f7fb fddd 	bl	80002ac <__adddf3>
 80046f2:	4602      	mov	r2, r0
 80046f4:	460b      	mov	r3, r1
 80046f6:	4620      	mov	r0, r4
 80046f8:	4629      	mov	r1, r5
 80046fa:	f7fb fdd7 	bl	80002ac <__adddf3>
 80046fe:	ed9f cb8c 	vldr	d12, [pc, #560]	; 8004930 <cal_power+0x3b0>
 8004702:	ec41 0b11 	vmov	d1, r0, r1
 8004706:	eeb0 0a4c 	vmov.f32	s0, s24
 800470a:	eef0 0a6c 	vmov.f32	s1, s25
 800470e:	f002 fd61 	bl	80071d4 <pow>
 8004712:	ec57 6b10 	vmov	r6, r7, d0
 8004716:	eeb0 0a48 	vmov.f32	s0, s16
 800471a:	eef0 0a68 	vmov.f32	s1, s17
 800471e:	f002 fdc9 	bl	80072b4 <sqrt>
 8004722:	ec51 0b10 	vmov	r0, r1, d0
 8004726:	2200      	movs	r2, #0
 8004728:	2300      	movs	r3, #0
 800472a:	f7fb ff75 	bl	8000618 <__aeabi_dmul>
 800472e:	a378      	add	r3, pc, #480	; (adr r3, 8004910 <cal_power+0x390>)
 8004730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004734:	f7fb fdba 	bl	80002ac <__adddf3>
 8004738:	4602      	mov	r2, r0
 800473a:	460b      	mov	r3, r1
 800473c:	4620      	mov	r0, r4
 800473e:	4629      	mov	r1, r5
 8004740:	f7fb fdb4 	bl	80002ac <__adddf3>
 8004744:	ed9f db7c 	vldr	d13, [pc, #496]	; 8004938 <cal_power+0x3b8>
 8004748:	ec41 0b11 	vmov	d1, r0, r1
 800474c:	eeb0 0a4d 	vmov.f32	s0, s26
 8004750:	eef0 0a6d 	vmov.f32	s1, s27
 8004754:	f002 fd3e 	bl	80071d4 <pow>
 8004758:	ec53 2b10 	vmov	r2, r3, d0
 800475c:	4630      	mov	r0, r6
 800475e:	4639      	mov	r1, r7
 8004760:	f7fb fda2 	bl	80002a8 <__aeabi_dsub>
 8004764:	4602      	mov	r2, r0
 8004766:	460b      	mov	r3, r1
 8004768:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800476c:	f7fc f87e 	bl	800086c <__aeabi_ddiv>
 8004770:	4606      	mov	r6, r0
 8004772:	460f      	mov	r7, r1
 8004774:	eeb0 0a48 	vmov.f32	s0, s16
 8004778:	eef0 0a68 	vmov.f32	s1, s17
 800477c:	f002 fd9a 	bl	80072b4 <sqrt>
 8004780:	ec51 0b10 	vmov	r0, r1, d0
 8004784:	2200      	movs	r2, #0
 8004786:	2300      	movs	r3, #0
 8004788:	f7fb ff46 	bl	8000618 <__aeabi_dmul>
 800478c:	a360      	add	r3, pc, #384	; (adr r3, 8004910 <cal_power+0x390>)
 800478e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004792:	f7fb fd8b 	bl	80002ac <__adddf3>
 8004796:	4602      	mov	r2, r0
 8004798:	460b      	mov	r3, r1
 800479a:	4620      	mov	r0, r4
 800479c:	4629      	mov	r1, r5
 800479e:	f7fb fd85 	bl	80002ac <__adddf3>
 80047a2:	ec41 0b11 	vmov	d1, r0, r1
 80047a6:	eeb0 0a4c 	vmov.f32	s0, s24
 80047aa:	eef0 0a6c 	vmov.f32	s1, s25
 80047ae:	f002 fd11 	bl	80071d4 <pow>
 80047b2:	ec53 2b10 	vmov	r2, r3, d0
 80047b6:	4630      	mov	r0, r6
 80047b8:	4639      	mov	r1, r7
 80047ba:	f7fb ff2d 	bl	8000618 <__aeabi_dmul>
 80047be:	4602      	mov	r2, r0
 80047c0:	460b      	mov	r3, r1
 80047c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80047c6:	f7fb fd6f 	bl	80002a8 <__aeabi_dsub>
 80047ca:	f7fc f9fd 	bl	8000bc8 <__aeabi_d2f>
 80047ce:	4682      	mov	sl, r0
	f = COE_F(compSpeed);
 80047d0:	eeb0 1a49 	vmov.f32	s2, s18
 80047d4:	eef0 1a69 	vmov.f32	s3, s19
 80047d8:	eeb0 0a48 	vmov.f32	s0, s16
 80047dc:	eef0 0a68 	vmov.f32	s1, s17
 80047e0:	f002 fcf8 	bl	80071d4 <pow>
 80047e4:	ec51 0b10 	vmov	r0, r1, d0
 80047e8:	a34d      	add	r3, pc, #308	; (adr r3, 8004920 <cal_power+0x3a0>)
 80047ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ee:	f7fb ff13 	bl	8000618 <__aeabi_dmul>
 80047f2:	4602      	mov	r2, r0
 80047f4:	460b      	mov	r3, r1
 80047f6:	4640      	mov	r0, r8
 80047f8:	4649      	mov	r1, r9
 80047fa:	f7fb fd57 	bl	80002ac <__adddf3>
 80047fe:	4606      	mov	r6, r0
 8004800:	460f      	mov	r7, r1
 8004802:	eeb0 1a49 	vmov.f32	s2, s18
 8004806:	eef0 1a69 	vmov.f32	s3, s19
 800480a:	eeb0 0a48 	vmov.f32	s0, s16
 800480e:	eef0 0a68 	vmov.f32	s1, s17
 8004812:	f002 fcdf 	bl	80071d4 <pow>
 8004816:	ec51 0b10 	vmov	r0, r1, d0
 800481a:	a343      	add	r3, pc, #268	; (adr r3, 8004928 <cal_power+0x3a8>)
 800481c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004820:	f7fb fefa 	bl	8000618 <__aeabi_dmul>
 8004824:	4602      	mov	r2, r0
 8004826:	460b      	mov	r3, r1
 8004828:	e9dd 0100 	ldrd	r0, r1, [sp]
 800482c:	f7fb fd3e 	bl	80002ac <__adddf3>
 8004830:	4602      	mov	r2, r0
 8004832:	460b      	mov	r3, r1
 8004834:	4630      	mov	r0, r6
 8004836:	4639      	mov	r1, r7
 8004838:	f7fb fd36 	bl	80002a8 <__aeabi_dsub>
 800483c:	4606      	mov	r6, r0
 800483e:	460f      	mov	r7, r1
 8004840:	eeb0 0a48 	vmov.f32	s0, s16
 8004844:	eef0 0a68 	vmov.f32	s1, s17
 8004848:	f002 fd34 	bl	80072b4 <sqrt>
 800484c:	ec51 0b10 	vmov	r0, r1, d0
 8004850:	2200      	movs	r2, #0
 8004852:	2300      	movs	r3, #0
 8004854:	f7fb fee0 	bl	8000618 <__aeabi_dmul>
 8004858:	a32d      	add	r3, pc, #180	; (adr r3, 8004910 <cal_power+0x390>)
 800485a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800485e:	f7fb fd25 	bl	80002ac <__adddf3>
 8004862:	4602      	mov	r2, r0
 8004864:	460b      	mov	r3, r1
 8004866:	4620      	mov	r0, r4
 8004868:	4629      	mov	r1, r5
 800486a:	f7fb fd1f 	bl	80002ac <__adddf3>
 800486e:	ec41 0b11 	vmov	d1, r0, r1
 8004872:	eeb0 0a4c 	vmov.f32	s0, s24
 8004876:	eef0 0a6c 	vmov.f32	s1, s25
 800487a:	f002 fcab 	bl	80071d4 <pow>
 800487e:	ec59 8b10 	vmov	r8, r9, d0
 8004882:	eeb0 0a48 	vmov.f32	s0, s16
 8004886:	eef0 0a68 	vmov.f32	s1, s17
 800488a:	f002 fd13 	bl	80072b4 <sqrt>
 800488e:	ec51 0b10 	vmov	r0, r1, d0
 8004892:	2200      	movs	r2, #0
 8004894:	2300      	movs	r3, #0
 8004896:	f7fb febf 	bl	8000618 <__aeabi_dmul>
 800489a:	a31d      	add	r3, pc, #116	; (adr r3, 8004910 <cal_power+0x390>)
 800489c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048a0:	f7fb fd04 	bl	80002ac <__adddf3>
 80048a4:	4602      	mov	r2, r0
 80048a6:	460b      	mov	r3, r1
 80048a8:	4620      	mov	r0, r4
 80048aa:	4629      	mov	r1, r5
 80048ac:	f7fb fcfe 	bl	80002ac <__adddf3>
 80048b0:	ec41 0b11 	vmov	d1, r0, r1
 80048b4:	eeb0 0a4d 	vmov.f32	s0, s26
 80048b8:	eef0 0a6d 	vmov.f32	s1, s27
 80048bc:	f002 fc8a 	bl	80071d4 <pow>
 80048c0:	ec53 2b10 	vmov	r2, r3, d0
 80048c4:	4640      	mov	r0, r8
 80048c6:	4649      	mov	r1, r9
 80048c8:	f7fb fcee 	bl	80002a8 <__aeabi_dsub>
 80048cc:	4602      	mov	r2, r0
 80048ce:	460b      	mov	r3, r1
 80048d0:	4630      	mov	r0, r6
 80048d2:	4639      	mov	r1, r7
 80048d4:	f7fb ffca 	bl	800086c <__aeabi_ddiv>
 80048d8:	f7fc f976 	bl	8000bc8 <__aeabi_d2f>
 80048dc:	4680      	mov	r8, r0
	g = COE_G(compSpeed);
 80048de:	eeb0 1a49 	vmov.f32	s2, s18
 80048e2:	eef0 1a69 	vmov.f32	s3, s19
 80048e6:	eeb0 0a48 	vmov.f32	s0, s16
 80048ea:	eef0 0a68 	vmov.f32	s1, s17
 80048ee:	f002 fc71 	bl	80071d4 <pow>
 80048f2:	ec51 0b10 	vmov	r0, r1, d0
 80048f6:	a312      	add	r3, pc, #72	; (adr r3, 8004940 <cal_power+0x3c0>)
 80048f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048fc:	f7fb fe8c 	bl	8000618 <__aeabi_dmul>
 8004900:	a311      	add	r3, pc, #68	; (adr r3, 8004948 <cal_power+0x3c8>)
 8004902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004906:	f7fb fccf 	bl	80002a8 <__aeabi_dsub>
 800490a:	4604      	mov	r4, r0
 800490c:	460d      	mov	r5, r1
 800490e:	e02b      	b.n	8004968 <cal_power+0x3e8>
 8004910:	40000000 	.word	0x40000000
 8004914:	3ff25b57 	.word	0x3ff25b57
 8004918:	00000000 	.word	0x00000000
 800491c:	40000000 	.word	0x40000000
 8004920:	20000000 	.word	0x20000000
 8004924:	3fc258a3 	.word	0x3fc258a3
 8004928:	80000000 	.word	0x80000000
 800492c:	3f973a79 	.word	0x3f973a79
 8004930:	40000000 	.word	0x40000000
 8004934:	4033ec08 	.word	0x4033ec08
 8004938:	c0000000 	.word	0xc0000000
 800493c:	40129d7d 	.word	0x40129d7d
 8004940:	20000000 	.word	0x20000000
 8004944:	4086455c 	.word	0x4086455c
 8004948:	c0000000 	.word	0xc0000000
 800494c:	406868f5 	.word	0x406868f5
 8004950:	45610000 	.word	0x45610000
 8004954:	00000000 	.word	0x00000000
 8004958:	bed4840e 	.word	0xbed4840e
 800495c:	3f62324d 	.word	0x3f62324d
 8004960:	bd701217 	.word	0xbd701217
 8004964:	3e22c3ca 	.word	0x3e22c3ca
 8004968:	ed9f 1b3d 	vldr	d1, [pc, #244]	; 8004a60 <cal_power+0x4e0>
 800496c:	eeb0 0a48 	vmov.f32	s0, s16
 8004970:	eef0 0a68 	vmov.f32	s1, s17
 8004974:	f002 fc2e 	bl	80071d4 <pow>
 8004978:	ec51 0b10 	vmov	r0, r1, d0
 800497c:	a33d      	add	r3, pc, #244	; (adr r3, 8004a74 <cal_power+0x4f4>)
 800497e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004982:	f7fb fe49 	bl	8000618 <__aeabi_dmul>
 8004986:	4602      	mov	r2, r0
 8004988:	460b      	mov	r3, r1
 800498a:	4620      	mov	r0, r4
 800498c:	4629      	mov	r1, r5
 800498e:	f7fb fc8d 	bl	80002ac <__adddf3>
 8004992:	f7fc f919 	bl	8000bc8 <__aeabi_d2f>
 8004996:	4606      	mov	r6, r0
	pr = PR(pd, ps);
 8004998:	ee8b 9a2a 	vdiv.f32	s18, s22, s21

	/* Calculated volume flow rate */
	volume_flow_rate = cal_volume_flow_rate(pd, ps, compSpeed);
 800499c:	eeb0 1a6b 	vmov.f32	s2, s23
 80049a0:	eef0 0a6a 	vmov.f32	s1, s21
 80049a4:	eeb0 0a4b 	vmov.f32	s0, s22
 80049a8:	f7ff fcf2 	bl	8004390 <cal_volume_flow_rate>
 80049ac:	ee10 7a10 	vmov	r7, s0
	/* Calculated power */
	power = ((e+f*pow(pr, d))*ps*0.000145*1000*volume_flow_rate/(4.719476965*pow(10, (-4))/60))+g;
 80049b0:	4658      	mov	r0, fp
 80049b2:	f7fb fdd9 	bl	8000568 <__aeabi_f2d>
 80049b6:	ec41 0b18 	vmov	d8, r0, r1
 80049ba:	ee19 0a10 	vmov	r0, s18
 80049be:	f7fb fdd3 	bl	8000568 <__aeabi_f2d>
 80049c2:	eeb0 1a48 	vmov.f32	s2, s16
 80049c6:	eef0 1a68 	vmov.f32	s3, s17
 80049ca:	ec41 0b10 	vmov	d0, r0, r1
 80049ce:	f002 fc01 	bl	80071d4 <pow>
 80049d2:	ec55 4b10 	vmov	r4, r5, d0
 80049d6:	4640      	mov	r0, r8
 80049d8:	f7fb fdc6 	bl	8000568 <__aeabi_f2d>
 80049dc:	4622      	mov	r2, r4
 80049de:	462b      	mov	r3, r5
 80049e0:	f7fb fe1a 	bl	8000618 <__aeabi_dmul>
 80049e4:	4604      	mov	r4, r0
 80049e6:	460d      	mov	r5, r1
 80049e8:	4650      	mov	r0, sl
 80049ea:	f7fb fdbd 	bl	8000568 <__aeabi_f2d>
 80049ee:	4622      	mov	r2, r4
 80049f0:	462b      	mov	r3, r5
 80049f2:	f7fb fc5b 	bl	80002ac <__adddf3>
 80049f6:	4604      	mov	r4, r0
 80049f8:	460d      	mov	r5, r1
 80049fa:	ee1a 0a90 	vmov	r0, s21
 80049fe:	f7fb fdb3 	bl	8000568 <__aeabi_f2d>
 8004a02:	4622      	mov	r2, r4
 8004a04:	462b      	mov	r3, r5
 8004a06:	f7fb fe07 	bl	8000618 <__aeabi_dmul>
 8004a0a:	a31c      	add	r3, pc, #112	; (adr r3, 8004a7c <cal_power+0x4fc>)
 8004a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a10:	f7fb fe02 	bl	8000618 <__aeabi_dmul>
 8004a14:	2200      	movs	r2, #0
 8004a16:	4b16      	ldr	r3, [pc, #88]	; (8004a70 <cal_power+0x4f0>)
 8004a18:	f7fb fdfe 	bl	8000618 <__aeabi_dmul>
 8004a1c:	4604      	mov	r4, r0
 8004a1e:	460d      	mov	r5, r1
 8004a20:	4638      	mov	r0, r7
 8004a22:	f7fb fda1 	bl	8000568 <__aeabi_f2d>
 8004a26:	4622      	mov	r2, r4
 8004a28:	462b      	mov	r3, r5
 8004a2a:	f7fb fdf5 	bl	8000618 <__aeabi_dmul>
 8004a2e:	a30e      	add	r3, pc, #56	; (adr r3, 8004a68 <cal_power+0x4e8>)
 8004a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a34:	f7fb ff1a 	bl	800086c <__aeabi_ddiv>
 8004a38:	4604      	mov	r4, r0
 8004a3a:	460d      	mov	r5, r1
 8004a3c:	4630      	mov	r0, r6
 8004a3e:	f7fb fd93 	bl	8000568 <__aeabi_f2d>
 8004a42:	4622      	mov	r2, r4
 8004a44:	462b      	mov	r3, r5
 8004a46:	f7fb fc31 	bl	80002ac <__adddf3>
 8004a4a:	f7fc f8bd 	bl	8000bc8 <__aeabi_d2f>

	return power;
}
 8004a4e:	ee00 0a10 	vmov	s0, r0
 8004a52:	b007      	add	sp, #28
 8004a54:	ecbd 8b0c 	vpop	{d8-d13}
 8004a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a5c:	f3af 8000 	nop.w
 8004a60:	00000000 	.word	0x00000000
 8004a64:	40100000 	.word	0x40100000
 8004a68:	a0008685 	.word	0xa0008685
 8004a6c:	3ee07eea 	.word	0x3ee07eea
 8004a70:	408f4000 	.word	0x408f4000
 8004a74:	80000000 	.word	0x80000000
 8004a78:	c045b5c2 	.word	0xc045b5c2
 8004a7c:	840e171a 	.word	0x840e171a
 8004a80:	3f230164 	.word	0x3f230164
 8004a84:	00000000 	.word	0x00000000

08004a88 <cal_t_sat>:
 *
 * \return		saturation temperature in ℃.
*/
//-------------------------------------------------------------------------------------------------
float cal_t_sat(float p)
{
 8004a88:	b508      	push	{r3, lr}
	return -2107.935 / (log(p*1000)-21.8205)-256.2377;
 8004a8a:	eddf 7a19 	vldr	s15, [pc, #100]	; 8004af0 <cal_t_sat+0x68>
 8004a8e:	ee60 7a27 	vmul.f32	s15, s0, s15
 8004a92:	ee17 0a90 	vmov	r0, s15
 8004a96:	f7fb fd67 	bl	8000568 <__aeabi_f2d>
 8004a9a:	ec41 0b10 	vmov	d0, r0, r1
 8004a9e:	f002 fb5b 	bl	8007158 <log>
 8004aa2:	ec51 0b10 	vmov	r0, r1, d0
 8004aa6:	a30c      	add	r3, pc, #48	; (adr r3, 8004ad8 <cal_t_sat+0x50>)
 8004aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aac:	f7fb fbfc 	bl	80002a8 <__aeabi_dsub>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	460b      	mov	r3, r1
 8004ab4:	a10a      	add	r1, pc, #40	; (adr r1, 8004ae0 <cal_t_sat+0x58>)
 8004ab6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004aba:	f7fb fed7 	bl	800086c <__aeabi_ddiv>
 8004abe:	a30a      	add	r3, pc, #40	; (adr r3, 8004ae8 <cal_t_sat+0x60>)
 8004ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ac4:	f7fb fbf0 	bl	80002a8 <__aeabi_dsub>
 8004ac8:	f7fc f87e 	bl	8000bc8 <__aeabi_d2f>
}
 8004acc:	ee00 0a10 	vmov	s0, r0
 8004ad0:	bd08      	pop	{r3, pc}
 8004ad2:	bf00      	nop
 8004ad4:	f3af 8000 	nop.w
 8004ad8:	49ba5e35 	.word	0x49ba5e35
 8004adc:	4035d20c 	.word	0x4035d20c
 8004ae0:	b851eb85 	.word	0xb851eb85
 8004ae4:	c0a077de 	.word	0xc0a077de
 8004ae8:	9e83e426 	.word	0x9e83e426
 8004aec:	407003cd 	.word	0x407003cd
 8004af0:	447a0000 	.word	0x447a0000
 8004af4:	00000000 	.word	0x00000000

08004af8 <cal_h_sat_gas>:
 *
 * \return		Enthalpy of saturated gas in kJ/kg.
*/
//-------------------------------------------------------------------------------------------------
float cal_h_sat_gas(float p)
{
 8004af8:	b538      	push	{r3, r4, r5, lr}
 8004afa:	ed2d 8b02 	vpush	{d8}
	double t_sat, h_sat_gas;

	/* Calculated saturation temperature */
	t_sat = cal_t_sat(p);
 8004afe:	f7ff ffc3 	bl	8004a88 <cal_t_sat>
 8004b02:	ee10 0a10 	vmov	r0, s0
 8004b06:	f7fb fd2f 	bl	8000568 <__aeabi_f2d>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	460b      	mov	r3, r1
 8004b0e:	ec43 2b18 	vmov	d8, r2, r3
	/* Calculated Saturated gas Enthalpy */
	h_sat_gas = 280998.3+332.614*t_sat-4.699265*pow(t_sat,2)-51.2569*pow(10,-3)*pow(t_sat,3);
 8004b12:	a323      	add	r3, pc, #140	; (adr r3, 8004ba0 <cal_h_sat_gas+0xa8>)
 8004b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b18:	f7fb fd7e 	bl	8000618 <__aeabi_dmul>
 8004b1c:	a322      	add	r3, pc, #136	; (adr r3, 8004ba8 <cal_h_sat_gas+0xb0>)
 8004b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b22:	f7fb fbc3 	bl	80002ac <__adddf3>
 8004b26:	4604      	mov	r4, r0
 8004b28:	460d      	mov	r5, r1
 8004b2a:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8004b90 <cal_h_sat_gas+0x98>
 8004b2e:	eeb0 0a48 	vmov.f32	s0, s16
 8004b32:	eef0 0a68 	vmov.f32	s1, s17
 8004b36:	f002 fb4d 	bl	80071d4 <pow>
 8004b3a:	ec51 0b10 	vmov	r0, r1, d0
 8004b3e:	a31c      	add	r3, pc, #112	; (adr r3, 8004bb0 <cal_h_sat_gas+0xb8>)
 8004b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b44:	f7fb fd68 	bl	8000618 <__aeabi_dmul>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	460b      	mov	r3, r1
 8004b4c:	4620      	mov	r0, r4
 8004b4e:	4629      	mov	r1, r5
 8004b50:	f7fb fbaa 	bl	80002a8 <__aeabi_dsub>
 8004b54:	4604      	mov	r4, r0
 8004b56:	460d      	mov	r5, r1
 8004b58:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 8004b98 <cal_h_sat_gas+0xa0>
 8004b5c:	eeb0 0a48 	vmov.f32	s0, s16
 8004b60:	eef0 0a68 	vmov.f32	s1, s17
 8004b64:	f002 fb36 	bl	80071d4 <pow>
 8004b68:	ec51 0b10 	vmov	r0, r1, d0
 8004b6c:	a312      	add	r3, pc, #72	; (adr r3, 8004bb8 <cal_h_sat_gas+0xc0>)
 8004b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b72:	f7fb fd51 	bl	8000618 <__aeabi_dmul>
 8004b76:	4602      	mov	r2, r0
 8004b78:	460b      	mov	r3, r1
 8004b7a:	4620      	mov	r0, r4
 8004b7c:	4629      	mov	r1, r5
 8004b7e:	f7fb fb93 	bl	80002a8 <__aeabi_dsub>

	return h_sat_gas;
 8004b82:	f7fc f821 	bl	8000bc8 <__aeabi_d2f>
}
 8004b86:	ee00 0a10 	vmov	s0, r0
 8004b8a:	ecbd 8b02 	vpop	{d8}
 8004b8e:	bd38      	pop	{r3, r4, r5, pc}
 8004b90:	00000000 	.word	0x00000000
 8004b94:	40000000 	.word	0x40000000
 8004b98:	00000000 	.word	0x00000000
 8004b9c:	40080000 	.word	0x40080000
 8004ba0:	f1a9fbe7 	.word	0xf1a9fbe7
 8004ba4:	4074c9d2 	.word	0x4074c9d2
 8004ba8:	33333333 	.word	0x33333333
 8004bac:	41112699 	.word	0x41112699
 8004bb0:	1fc8f323 	.word	0x1fc8f323
 8004bb4:	4012cc0c 	.word	0x4012cc0c
 8004bb8:	2a6380d9 	.word	0x2a6380d9
 8004bbc:	3faa3e58 	.word	0x3faa3e58

08004bc0 <cal_h_sh_gas>:
 *
 * \return		Enthalpy of saturated gas in kJ/kg.
*/
//-------------------------------------------------------------------------------------------------
float cal_h_sh_gas(float p, float t)
{
 8004bc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bc4:	ed2d 8b04 	vpush	{d8-d9}
 8004bc8:	eeb0 8a40 	vmov.f32	s16, s0
 8004bcc:	ee10 6a90 	vmov	r6, s1
	double t_sat, h_sat_gas, h_sh_gas;

	/* Calculated saturation temperature */
	t_sat = cal_t_sat(p);
 8004bd0:	f7ff ff5a 	bl	8004a88 <cal_t_sat>
 8004bd4:	ee10 0a10 	vmov	r0, s0
 8004bd8:	f7fb fcc6 	bl	8000568 <__aeabi_f2d>
 8004bdc:	4682      	mov	sl, r0
 8004bde:	468b      	mov	fp, r1
	/* Calculated Saturated gas Enthalpy */
	h_sat_gas = cal_h_sat_gas(p);
 8004be0:	eeb0 0a48 	vmov.f32	s0, s16
 8004be4:	f7ff ff88 	bl	8004af8 <cal_h_sat_gas>
 8004be8:	ee10 0a10 	vmov	r0, s0
 8004bec:	f7fb fcbc 	bl	8000568 <__aeabi_f2d>
 8004bf0:	4604      	mov	r4, r0
 8004bf2:	460d      	mov	r5, r1
	/* Calculated superheated gas Enthalpy */
	h_sh_gas = 	(1 + 3.3247*pow(10,-3)*(t-t_sat)+3.62592*pow(10,-7)*pow((t-t_sat),2)
 8004bf4:	4630      	mov	r0, r6
 8004bf6:	f7fb fcb7 	bl	8000568 <__aeabi_f2d>
 8004bfa:	4652      	mov	r2, sl
 8004bfc:	465b      	mov	r3, fp
 8004bfe:	f7fb fb53 	bl	80002a8 <__aeabi_dsub>
 8004c02:	4602      	mov	r2, r0
 8004c04:	460b      	mov	r3, r1
 8004c06:	ec43 2b18 	vmov	d8, r2, r3
 8004c0a:	a362      	add	r3, pc, #392	; (adr r3, 8004d94 <cal_h_sh_gas+0x1d4>)
 8004c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c10:	f7fb fd02 	bl	8000618 <__aeabi_dmul>
 8004c14:	2200      	movs	r2, #0
 8004c16:	4b5e      	ldr	r3, [pc, #376]	; (8004d90 <cal_h_sh_gas+0x1d0>)
 8004c18:	f7fb fb48 	bl	80002ac <__adddf3>
 8004c1c:	4606      	mov	r6, r0
 8004c1e:	460f      	mov	r7, r1
 8004c20:	ed9f 9b4f 	vldr	d9, [pc, #316]	; 8004d60 <cal_h_sh_gas+0x1a0>
 8004c24:	eeb0 1a49 	vmov.f32	s2, s18
 8004c28:	eef0 1a69 	vmov.f32	s3, s19
 8004c2c:	eeb0 0a48 	vmov.f32	s0, s16
 8004c30:	eef0 0a68 	vmov.f32	s1, s17
 8004c34:	f002 face 	bl	80071d4 <pow>
 8004c38:	ec51 0b10 	vmov	r0, r1, d0
 8004c3c:	a34a      	add	r3, pc, #296	; (adr r3, 8004d68 <cal_h_sh_gas+0x1a8>)
 8004c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c42:	f7fb fce9 	bl	8000618 <__aeabi_dmul>
 8004c46:	4602      	mov	r2, r0
 8004c48:	460b      	mov	r3, r1
 8004c4a:	4630      	mov	r0, r6
 8004c4c:	4639      	mov	r1, r7
 8004c4e:	f7fb fb2d 	bl	80002ac <__adddf3>
 8004c52:	4606      	mov	r6, r0
 8004c54:	460f      	mov	r7, r1
					+ 30.40633*pow(10,-6)*(t-t_sat)*t_sat
 8004c56:	a346      	add	r3, pc, #280	; (adr r3, 8004d70 <cal_h_sh_gas+0x1b0>)
 8004c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c5c:	ec51 0b18 	vmov	r0, r1, d8
 8004c60:	f7fb fcda 	bl	8000618 <__aeabi_dmul>
 8004c64:	4652      	mov	r2, sl
 8004c66:	465b      	mov	r3, fp
 8004c68:	f7fb fcd6 	bl	8000618 <__aeabi_dmul>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	460b      	mov	r3, r1
 8004c70:	4630      	mov	r0, r6
 8004c72:	4639      	mov	r1, r7
 8004c74:	f7fb fb1a 	bl	80002ac <__adddf3>
 8004c78:	4606      	mov	r6, r0
 8004c7a:	460f      	mov	r7, r1
					- 18.47693*pow(10,-8)*pow((t-t_sat),2)*t_sat
 8004c7c:	eeb0 1a49 	vmov.f32	s2, s18
 8004c80:	eef0 1a69 	vmov.f32	s3, s19
 8004c84:	eeb0 0a48 	vmov.f32	s0, s16
 8004c88:	eef0 0a68 	vmov.f32	s1, s17
 8004c8c:	f002 faa2 	bl	80071d4 <pow>
 8004c90:	ec51 0b10 	vmov	r0, r1, d0
 8004c94:	a338      	add	r3, pc, #224	; (adr r3, 8004d78 <cal_h_sh_gas+0x1b8>)
 8004c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c9a:	f7fb fcbd 	bl	8000618 <__aeabi_dmul>
 8004c9e:	4652      	mov	r2, sl
 8004ca0:	465b      	mov	r3, fp
 8004ca2:	f7fb fcb9 	bl	8000618 <__aeabi_dmul>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	460b      	mov	r3, r1
 8004caa:	4630      	mov	r0, r6
 8004cac:	4639      	mov	r1, r7
 8004cae:	f7fb fafb 	bl	80002a8 <__aeabi_dsub>
 8004cb2:	4606      	mov	r6, r0
 8004cb4:	460f      	mov	r7, r1
					+ 76.64206*pow(10, -8)*(t-t_sat)*pow((t_sat),2)
 8004cb6:	a332      	add	r3, pc, #200	; (adr r3, 8004d80 <cal_h_sh_gas+0x1c0>)
 8004cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cbc:	ec51 0b18 	vmov	r0, r1, d8
 8004cc0:	f7fb fcaa 	bl	8000618 <__aeabi_dmul>
 8004cc4:	4680      	mov	r8, r0
 8004cc6:	4689      	mov	r9, r1
 8004cc8:	eeb0 1a49 	vmov.f32	s2, s18
 8004ccc:	eef0 1a69 	vmov.f32	s3, s19
 8004cd0:	ec4b ab10 	vmov	d0, sl, fp
 8004cd4:	f002 fa7e 	bl	80071d4 <pow>
 8004cd8:	ec53 2b10 	vmov	r2, r3, d0
 8004cdc:	4640      	mov	r0, r8
 8004cde:	4649      	mov	r1, r9
 8004ce0:	f7fb fc9a 	bl	8000618 <__aeabi_dmul>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	460b      	mov	r3, r1
 8004ce8:	4630      	mov	r0, r6
 8004cea:	4639      	mov	r1, r7
 8004cec:	f7fb fade 	bl	80002ac <__adddf3>
 8004cf0:	4606      	mov	r6, r0
 8004cf2:	460f      	mov	r7, r1
					- 60.2765*pow(10,-10)*pow((t-t_sat),2)*pow(t_sat,2))*h_sat_gas;
 8004cf4:	eeb0 1a49 	vmov.f32	s2, s18
 8004cf8:	eef0 1a69 	vmov.f32	s3, s19
 8004cfc:	eeb0 0a48 	vmov.f32	s0, s16
 8004d00:	eef0 0a68 	vmov.f32	s1, s17
 8004d04:	f002 fa66 	bl	80071d4 <pow>
 8004d08:	ec51 0b10 	vmov	r0, r1, d0
 8004d0c:	a31e      	add	r3, pc, #120	; (adr r3, 8004d88 <cal_h_sh_gas+0x1c8>)
 8004d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d12:	f7fb fc81 	bl	8000618 <__aeabi_dmul>
 8004d16:	4680      	mov	r8, r0
 8004d18:	4689      	mov	r9, r1
 8004d1a:	eeb0 1a49 	vmov.f32	s2, s18
 8004d1e:	eef0 1a69 	vmov.f32	s3, s19
 8004d22:	ec4b ab10 	vmov	d0, sl, fp
 8004d26:	f002 fa55 	bl	80071d4 <pow>
 8004d2a:	ec53 2b10 	vmov	r2, r3, d0
 8004d2e:	4640      	mov	r0, r8
 8004d30:	4649      	mov	r1, r9
 8004d32:	f7fb fc71 	bl	8000618 <__aeabi_dmul>
 8004d36:	4602      	mov	r2, r0
 8004d38:	460b      	mov	r3, r1
 8004d3a:	4630      	mov	r0, r6
 8004d3c:	4639      	mov	r1, r7
 8004d3e:	f7fb fab3 	bl	80002a8 <__aeabi_dsub>
	h_sh_gas = 	(1 + 3.3247*pow(10,-3)*(t-t_sat)+3.62592*pow(10,-7)*pow((t-t_sat),2)
 8004d42:	4622      	mov	r2, r4
 8004d44:	462b      	mov	r3, r5
 8004d46:	f7fb fc67 	bl	8000618 <__aeabi_dmul>

	return h_sh_gas;
 8004d4a:	f7fb ff3d 	bl	8000bc8 <__aeabi_d2f>
}
 8004d4e:	ee00 0a10 	vmov	s0, r0
 8004d52:	ecbd 8b04 	vpop	{d8-d9}
 8004d56:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d5a:	bf00      	nop
 8004d5c:	f3af 8000 	nop.w
 8004d60:	00000000 	.word	0x00000000
 8004d64:	40000000 	.word	0x40000000
 8004d68:	7b0599f9 	.word	0x7b0599f9
 8004d6c:	3e985548 	.word	0x3e985548
 8004d70:	1649b44f 	.word	0x1649b44f
 8004d74:	3effe223 	.word	0x3effe223
 8004d78:	f35093b3 	.word	0xf35093b3
 8004d7c:	3e88cc9f 	.word	0x3e88cc9f
 8004d80:	b91235d7 	.word	0xb91235d7
 8004d84:	3ea9b780 	.word	0x3ea9b780
 8004d88:	a4b3e538 	.word	0xa4b3e538
 8004d8c:	3e39e378 	.word	0x3e39e378
 8004d90:	3ff00000 	.word	0x3ff00000
 8004d94:	b89bbd60 	.word	0xb89bbd60
 8004d98:	3f6b3c66 	.word	0x3f6b3c66
 8004d9c:	00000000 	.word	0x00000000

08004da0 <cal_vol_sat_gas>:
 *
 * \return		Saturated gas specific volume in m^3/s.
 */
//-------------------------------------------------------------------------------------------------
float cal_vol_sat_gas(float p)
{
 8004da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004da2:	ed2d 8b02 	vpush	{d8}
	double t_sat, v_sat_gas;

	/* Calculated saturation temperature */
	t_sat = cal_t_sat(p);
 8004da6:	f7ff fe6f 	bl	8004a88 <cal_t_sat>
 8004daa:	ee10 0a10 	vmov	r0, s0
 8004dae:	f7fb fbdb 	bl	8000568 <__aeabi_f2d>
 8004db2:	4602      	mov	r2, r0
 8004db4:	460b      	mov	r3, r1
 8004db6:	ec43 2b18 	vmov	d8, r2, r3
	/* Calculated Saturated gas specific volume */
	v_sat_gas = exp((-11.93809+1873.567/(t_sat+273.15))) * (5.24253-369.32461*pow(10,(-4))*
 8004dba:	a335      	add	r3, pc, #212	; (adr r3, 8004e90 <cal_vol_sat_gas+0xf0>)
 8004dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc0:	f7fb fa74 	bl	80002ac <__adddf3>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	460b      	mov	r3, r1
 8004dc8:	a133      	add	r1, pc, #204	; (adr r1, 8004e98 <cal_vol_sat_gas+0xf8>)
 8004dca:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004dce:	f7fb fd4d 	bl	800086c <__aeabi_ddiv>
 8004dd2:	a333      	add	r3, pc, #204	; (adr r3, 8004ea0 <cal_vol_sat_gas+0x100>)
 8004dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dd8:	f7fb fa66 	bl	80002a8 <__aeabi_dsub>
 8004ddc:	ec41 0b10 	vmov	d0, r0, r1
 8004de0:	f002 f972 	bl	80070c8 <exp>
 8004de4:	ec55 4b10 	vmov	r4, r5, d0
 8004de8:	a32f      	add	r3, pc, #188	; (adr r3, 8004ea8 <cal_vol_sat_gas+0x108>)
 8004dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dee:	ec51 0b18 	vmov	r0, r1, d8
 8004df2:	f7fb fc11 	bl	8000618 <__aeabi_dmul>
 8004df6:	4602      	mov	r2, r0
 8004df8:	460b      	mov	r3, r1
 8004dfa:	a12d      	add	r1, pc, #180	; (adr r1, 8004eb0 <cal_vol_sat_gas+0x110>)
 8004dfc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004e00:	f7fb fa52 	bl	80002a8 <__aeabi_dsub>
 8004e04:	4606      	mov	r6, r0
 8004e06:	460f      	mov	r7, r1
 						t_sat+111.95294*pow(10,(-6))*pow(t_sat,2)-31.84587*pow(10,(-7))*pow(t_sat,3));
 8004e08:	ed9f 1b1d 	vldr	d1, [pc, #116]	; 8004e80 <cal_vol_sat_gas+0xe0>
 8004e0c:	eeb0 0a48 	vmov.f32	s0, s16
 8004e10:	eef0 0a68 	vmov.f32	s1, s17
 8004e14:	f002 f9de 	bl	80071d4 <pow>
 8004e18:	ec51 0b10 	vmov	r0, r1, d0
 8004e1c:	a326      	add	r3, pc, #152	; (adr r3, 8004eb8 <cal_vol_sat_gas+0x118>)
 8004e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e22:	f7fb fbf9 	bl	8000618 <__aeabi_dmul>
 8004e26:	4602      	mov	r2, r0
 8004e28:	460b      	mov	r3, r1
 8004e2a:	4630      	mov	r0, r6
 8004e2c:	4639      	mov	r1, r7
 8004e2e:	f7fb fa3d 	bl	80002ac <__adddf3>
 8004e32:	4606      	mov	r6, r0
 8004e34:	460f      	mov	r7, r1
 8004e36:	ed9f 1b14 	vldr	d1, [pc, #80]	; 8004e88 <cal_vol_sat_gas+0xe8>
 8004e3a:	eeb0 0a48 	vmov.f32	s0, s16
 8004e3e:	eef0 0a68 	vmov.f32	s1, s17
 8004e42:	f002 f9c7 	bl	80071d4 <pow>
 8004e46:	ec51 0b10 	vmov	r0, r1, d0
 8004e4a:	a31d      	add	r3, pc, #116	; (adr r3, 8004ec0 <cal_vol_sat_gas+0x120>)
 8004e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e50:	f7fb fbe2 	bl	8000618 <__aeabi_dmul>
 8004e54:	4602      	mov	r2, r0
 8004e56:	460b      	mov	r3, r1
 8004e58:	4630      	mov	r0, r6
 8004e5a:	4639      	mov	r1, r7
 8004e5c:	f7fb fa24 	bl	80002a8 <__aeabi_dsub>
 8004e60:	4602      	mov	r2, r0
 8004e62:	460b      	mov	r3, r1
	v_sat_gas = exp((-11.93809+1873.567/(t_sat+273.15))) * (5.24253-369.32461*pow(10,(-4))*
 8004e64:	4620      	mov	r0, r4
 8004e66:	4629      	mov	r1, r5
 8004e68:	f7fb fbd6 	bl	8000618 <__aeabi_dmul>

	return v_sat_gas;
 8004e6c:	f7fb feac 	bl	8000bc8 <__aeabi_d2f>
}
 8004e70:	ee00 0a10 	vmov	s0, r0
 8004e74:	ecbd 8b02 	vpop	{d8}
 8004e78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	f3af 8000 	nop.w
 8004e80:	00000000 	.word	0x00000000
 8004e84:	40000000 	.word	0x40000000
 8004e88:	00000000 	.word	0x00000000
 8004e8c:	40080000 	.word	0x40080000
 8004e90:	66666666 	.word	0x66666666
 8004e94:	40711266 	.word	0x40711266
 8004e98:	9ba5e354 	.word	0x9ba5e354
 8004e9c:	409d4644 	.word	0x409d4644
 8004ea0:	551d68c7 	.word	0x551d68c7
 8004ea4:	4027e04d 	.word	0x4027e04d
 8004ea8:	c04fc46c 	.word	0xc04fc46c
 8004eac:	3fa2e8cf 	.word	0x3fa2e8cf
 8004eb0:	c8c9320e 	.word	0xc8c9320e
 8004eb4:	4014f859 	.word	0x4014f859
 8004eb8:	dd2cc204 	.word	0xdd2cc204
 8004ebc:	3f1d5908 	.word	0x3f1d5908
 8004ec0:	37d43b3d 	.word	0x37d43b3d
 8004ec4:	3ecab6d9 	.word	0x3ecab6d9

08004ec8 <cal_dens_sh_gas>:
 *
 * \return		Density of superheated gas in kg/m^3.
 */
//-------------------------------------------------------------------------------------------------
float cal_dens_sh_gas(float p, float t)
{
 8004ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ecc:	ed2d 8b0a 	vpush	{d8-d12}
 8004ed0:	b085      	sub	sp, #20
 8004ed2:	ee10 4a90 	vmov	r4, s1
	double t_sat, t_sat_f, dens_sat_gas, coe_A, coe_B, coe_C, coe_D, y, dens_sh_gas;

	/* Calculated saturation temperature */
	t_sat = cal_t_sat(p);
 8004ed6:	f7ff fdd7 	bl	8004a88 <cal_t_sat>
 8004eda:	ee10 0a10 	vmov	r0, s0
 8004ede:	f7fb fb43 	bl	8000568 <__aeabi_f2d>
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	460b      	mov	r3, r1
 8004ee6:	ec43 2b1b 	vmov	d11, r2, r3
	t_sat_f = t_sat+273.15;
 8004eea:	f20f 438c 	addw	r3, pc, #1164	; 0x48c
 8004eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ef2:	f7fb f9db 	bl	80002ac <__adddf3>
 8004ef6:	ec41 0b1a 	vmov	d10, r0, r1
	/* Calculated Density of Saturated gas */
	dens_sat_gas = pow((1/(exp((-11.93809+1873.567/(t_sat+273.15)))*(5.24253-369.32461*pow(10,(-4)) *
 8004efa:	4602      	mov	r2, r0
 8004efc:	460b      	mov	r3, r1
 8004efe:	f20f 4188 	addw	r1, pc, #1160	; 0x488
 8004f02:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004f06:	f7fb fcb1 	bl	800086c <__aeabi_ddiv>
 8004f0a:	f20f 4384 	addw	r3, pc, #1156	; 0x484
 8004f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f12:	f7fb f9c9 	bl	80002a8 <__aeabi_dsub>
 8004f16:	ec41 0b10 	vmov	d0, r0, r1
 8004f1a:	f002 f8d5 	bl	80070c8 <exp>
 8004f1e:	ec57 6b10 	vmov	r6, r7, d0
 8004f22:	f20f 4374 	addw	r3, pc, #1140	; 0x474
 8004f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f2a:	ec51 0b1b 	vmov	r0, r1, d11
 8004f2e:	f7fb fb73 	bl	8000618 <__aeabi_dmul>
 8004f32:	4602      	mov	r2, r0
 8004f34:	460b      	mov	r3, r1
 8004f36:	f20f 4168 	addw	r1, pc, #1128	; 0x468
 8004f3a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004f3e:	f7fb f9b3 	bl	80002a8 <__aeabi_dsub>
 8004f42:	4680      	mov	r8, r0
 8004f44:	4689      	mov	r9, r1
						t_sat+111.95294*pow(10,(-6))*pow(t_sat,2)-31.84587*pow(10,(-7))*pow(t_sat,3))))
 8004f46:	ed9f 9bf0 	vldr	d9, [pc, #960]	; 8005308 <cal_dens_sh_gas+0x440>
 8004f4a:	eeb0 1a49 	vmov.f32	s2, s18
 8004f4e:	eef0 1a69 	vmov.f32	s3, s19
 8004f52:	eeb0 0a4b 	vmov.f32	s0, s22
 8004f56:	eef0 0a6b 	vmov.f32	s1, s23
 8004f5a:	f002 f93b 	bl	80071d4 <pow>
 8004f5e:	ec51 0b10 	vmov	r0, r1, d0
 8004f62:	f20f 4344 	addw	r3, pc, #1092	; 0x444
 8004f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f6a:	f7fb fb55 	bl	8000618 <__aeabi_dmul>
 8004f6e:	4602      	mov	r2, r0
 8004f70:	460b      	mov	r3, r1
 8004f72:	4640      	mov	r0, r8
 8004f74:	4649      	mov	r1, r9
 8004f76:	f7fb f999 	bl	80002ac <__adddf3>
 8004f7a:	4680      	mov	r8, r0
 8004f7c:	4689      	mov	r9, r1
 8004f7e:	ed9f 8be4 	vldr	d8, [pc, #912]	; 8005310 <cal_dens_sh_gas+0x448>
 8004f82:	eeb0 1a48 	vmov.f32	s2, s16
 8004f86:	eef0 1a68 	vmov.f32	s3, s17
 8004f8a:	eeb0 0a4b 	vmov.f32	s0, s22
 8004f8e:	eef0 0a6b 	vmov.f32	s1, s23
 8004f92:	f002 f91f 	bl	80071d4 <pow>
 8004f96:	ec51 0b10 	vmov	r0, r1, d0
 8004f9a:	f20f 4314 	addw	r3, pc, #1044	; 0x414
 8004f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fa2:	f7fb fb39 	bl	8000618 <__aeabi_dmul>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	460b      	mov	r3, r1
 8004faa:	4640      	mov	r0, r8
 8004fac:	4649      	mov	r1, r9
 8004fae:	f7fb f97b 	bl	80002a8 <__aeabi_dsub>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	460b      	mov	r3, r1
	dens_sat_gas = pow((1/(exp((-11.93809+1873.567/(t_sat+273.15)))*(5.24253-369.32461*pow(10,(-4)) *
 8004fb6:	4630      	mov	r0, r6
 8004fb8:	4639      	mov	r1, r7
 8004fba:	f7fb fb2d 	bl	8000618 <__aeabi_dmul>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	460b      	mov	r3, r1
 8004fc2:	2000      	movs	r0, #0
 8004fc4:	49ee      	ldr	r1, [pc, #952]	; (8005380 <cal_dens_sh_gas+0x4b8>)
 8004fc6:	f7fb fc51 	bl	800086c <__aeabi_ddiv>
 8004fca:	ed9f 1bd3 	vldr	d1, [pc, #844]	; 8005318 <cal_dens_sh_gas+0x450>
 8004fce:	ec41 0b10 	vmov	d0, r0, r1
 8004fd2:	f002 f8ff 	bl	80071d4 <pow>
 8004fd6:	ec51 0b10 	vmov	r0, r1, d0
 8004fda:	2200      	movs	r2, #0
 8004fdc:	4be9      	ldr	r3, [pc, #932]	; (8005384 <cal_dens_sh_gas+0x4bc>)
 8004fde:	f7fb f965 	bl	80002ac <__adddf3>
 8004fe2:	ec41 0b1b 	vmov	d11, r0, r1
					,(-0.4))+0.75;

	coe_A = -((1+COE[0]*t_sat_f+COE[1]*pow(t_sat_f,2)+COE[2]*pow(t_sat_f,3))/dens_sat_gas +
 8004fe6:	a3ce      	add	r3, pc, #824	; (adr r3, 8005320 <cal_dens_sh_gas+0x458>)
 8004fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fec:	ec51 0b1a 	vmov	r0, r1, d10
 8004ff0:	f7fb fb12 	bl	8000618 <__aeabi_dmul>
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	4be2      	ldr	r3, [pc, #904]	; (8005380 <cal_dens_sh_gas+0x4b8>)
 8004ff8:	f7fb f958 	bl	80002ac <__adddf3>
 8004ffc:	4606      	mov	r6, r0
 8004ffe:	460f      	mov	r7, r1
 8005000:	eeb0 1a49 	vmov.f32	s2, s18
 8005004:	eef0 1a69 	vmov.f32	s3, s19
 8005008:	eeb0 0a4a 	vmov.f32	s0, s20
 800500c:	eef0 0a6a 	vmov.f32	s1, s21
 8005010:	f002 f8e0 	bl	80071d4 <pow>
 8005014:	ec51 0b10 	vmov	r0, r1, d0
 8005018:	a3c3      	add	r3, pc, #780	; (adr r3, 8005328 <cal_dens_sh_gas+0x460>)
 800501a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800501e:	f7fb fafb 	bl	8000618 <__aeabi_dmul>
 8005022:	4602      	mov	r2, r0
 8005024:	460b      	mov	r3, r1
 8005026:	4630      	mov	r0, r6
 8005028:	4639      	mov	r1, r7
 800502a:	f7fb f93f 	bl	80002ac <__adddf3>
 800502e:	4606      	mov	r6, r0
 8005030:	460f      	mov	r7, r1
 8005032:	eeb0 1a48 	vmov.f32	s2, s16
 8005036:	eef0 1a68 	vmov.f32	s3, s17
 800503a:	eeb0 0a4a 	vmov.f32	s0, s20
 800503e:	eef0 0a6a 	vmov.f32	s1, s21
 8005042:	f002 f8c7 	bl	80071d4 <pow>
 8005046:	ec51 0b10 	vmov	r0, r1, d0
 800504a:	a3b9      	add	r3, pc, #740	; (adr r3, 8005330 <cal_dens_sh_gas+0x468>)
 800504c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005050:	f7fb fae2 	bl	8000618 <__aeabi_dmul>
 8005054:	4602      	mov	r2, r0
 8005056:	460b      	mov	r3, r1
 8005058:	4630      	mov	r0, r6
 800505a:	4639      	mov	r1, r7
 800505c:	f7fb f926 	bl	80002ac <__adddf3>
 8005060:	ec53 2b1b 	vmov	r2, r3, d11
 8005064:	f7fb fc02 	bl	800086c <__aeabi_ddiv>
 8005068:	4606      	mov	r6, r0
 800506a:	460f      	mov	r7, r1
				(COE[3]+COE[4]*t_sat_f+COE[5]*pow(t_sat_f,2)+COE[6]*pow(t_sat_f,3))/pow(dens_sat_gas,2) +
 800506c:	a3b2      	add	r3, pc, #712	; (adr r3, 8005338 <cal_dens_sh_gas+0x470>)
 800506e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005072:	ec51 0b1a 	vmov	r0, r1, d10
 8005076:	f7fb facf 	bl	8000618 <__aeabi_dmul>
 800507a:	a3b1      	add	r3, pc, #708	; (adr r3, 8005340 <cal_dens_sh_gas+0x478>)
 800507c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005080:	f7fb f914 	bl	80002ac <__adddf3>
 8005084:	4680      	mov	r8, r0
 8005086:	4689      	mov	r9, r1
 8005088:	eeb0 1a49 	vmov.f32	s2, s18
 800508c:	eef0 1a69 	vmov.f32	s3, s19
 8005090:	eeb0 0a4a 	vmov.f32	s0, s20
 8005094:	eef0 0a6a 	vmov.f32	s1, s21
 8005098:	f002 f89c 	bl	80071d4 <pow>
 800509c:	ec51 0b10 	vmov	r0, r1, d0
 80050a0:	a3a9      	add	r3, pc, #676	; (adr r3, 8005348 <cal_dens_sh_gas+0x480>)
 80050a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050a6:	f7fb fab7 	bl	8000618 <__aeabi_dmul>
 80050aa:	4602      	mov	r2, r0
 80050ac:	460b      	mov	r3, r1
 80050ae:	4640      	mov	r0, r8
 80050b0:	4649      	mov	r1, r9
 80050b2:	f7fb f8fb 	bl	80002ac <__adddf3>
 80050b6:	4680      	mov	r8, r0
 80050b8:	4689      	mov	r9, r1
 80050ba:	eeb0 1a48 	vmov.f32	s2, s16
 80050be:	eef0 1a68 	vmov.f32	s3, s17
 80050c2:	eeb0 0a4a 	vmov.f32	s0, s20
 80050c6:	eef0 0a6a 	vmov.f32	s1, s21
 80050ca:	f002 f883 	bl	80071d4 <pow>
 80050ce:	ec51 0b10 	vmov	r0, r1, d0
 80050d2:	a39f      	add	r3, pc, #636	; (adr r3, 8005350 <cal_dens_sh_gas+0x488>)
 80050d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050d8:	f7fb fa9e 	bl	8000618 <__aeabi_dmul>
 80050dc:	4602      	mov	r2, r0
 80050de:	460b      	mov	r3, r1
 80050e0:	4640      	mov	r0, r8
 80050e2:	4649      	mov	r1, r9
 80050e4:	f7fb f8e2 	bl	80002ac <__adddf3>
 80050e8:	4680      	mov	r8, r0
 80050ea:	4689      	mov	r9, r1
 80050ec:	eeb0 1a49 	vmov.f32	s2, s18
 80050f0:	eef0 1a69 	vmov.f32	s3, s19
 80050f4:	eeb0 0a4b 	vmov.f32	s0, s22
 80050f8:	eef0 0a6b 	vmov.f32	s1, s23
 80050fc:	f002 f86a 	bl	80071d4 <pow>
 8005100:	ec53 2b10 	vmov	r2, r3, d0
 8005104:	4640      	mov	r0, r8
 8005106:	4649      	mov	r1, r9
 8005108:	f7fb fbb0 	bl	800086c <__aeabi_ddiv>
 800510c:	4602      	mov	r2, r0
 800510e:	460b      	mov	r3, r1
	coe_A = -((1+COE[0]*t_sat_f+COE[1]*pow(t_sat_f,2)+COE[2]*pow(t_sat_f,3))/dens_sat_gas +
 8005110:	4630      	mov	r0, r6
 8005112:	4639      	mov	r1, r7
 8005114:	f7fb f8ca 	bl	80002ac <__adddf3>
 8005118:	4606      	mov	r6, r0
 800511a:	460f      	mov	r7, r1
				(COE[7]+COE[8]*t_sat_f+COE[9]*pow(t_sat_f,2)+COE[10]*pow(t_sat_f,3))/pow(dens_sat_gas,3));
 800511c:	a38e      	add	r3, pc, #568	; (adr r3, 8005358 <cal_dens_sh_gas+0x490>)
 800511e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005122:	ec51 0b1a 	vmov	r0, r1, d10
 8005126:	f7fb fa77 	bl	8000618 <__aeabi_dmul>
 800512a:	a38d      	add	r3, pc, #564	; (adr r3, 8005360 <cal_dens_sh_gas+0x498>)
 800512c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005130:	f7fb f8ba 	bl	80002a8 <__aeabi_dsub>
 8005134:	4680      	mov	r8, r0
 8005136:	4689      	mov	r9, r1
 8005138:	eeb0 1a49 	vmov.f32	s2, s18
 800513c:	eef0 1a69 	vmov.f32	s3, s19
 8005140:	eeb0 0a4a 	vmov.f32	s0, s20
 8005144:	eef0 0a6a 	vmov.f32	s1, s21
 8005148:	f002 f844 	bl	80071d4 <pow>
 800514c:	ec51 0b10 	vmov	r0, r1, d0
 8005150:	a385      	add	r3, pc, #532	; (adr r3, 8005368 <cal_dens_sh_gas+0x4a0>)
 8005152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005156:	f7fb fa5f 	bl	8000618 <__aeabi_dmul>
 800515a:	4602      	mov	r2, r0
 800515c:	460b      	mov	r3, r1
 800515e:	4640      	mov	r0, r8
 8005160:	4649      	mov	r1, r9
 8005162:	f7fb f8a3 	bl	80002ac <__adddf3>
 8005166:	4680      	mov	r8, r0
 8005168:	4689      	mov	r9, r1
 800516a:	eeb0 1a48 	vmov.f32	s2, s16
 800516e:	eef0 1a68 	vmov.f32	s3, s17
 8005172:	eeb0 0a4a 	vmov.f32	s0, s20
 8005176:	eef0 0a6a 	vmov.f32	s1, s21
 800517a:	f002 f82b 	bl	80071d4 <pow>
 800517e:	ec51 0b10 	vmov	r0, r1, d0
 8005182:	a37b      	add	r3, pc, #492	; (adr r3, 8005370 <cal_dens_sh_gas+0x4a8>)
 8005184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005188:	f7fb fa46 	bl	8000618 <__aeabi_dmul>
 800518c:	4602      	mov	r2, r0
 800518e:	460b      	mov	r3, r1
 8005190:	4640      	mov	r0, r8
 8005192:	4649      	mov	r1, r9
 8005194:	f7fb f88a 	bl	80002ac <__adddf3>
 8005198:	4680      	mov	r8, r0
 800519a:	4689      	mov	r9, r1
 800519c:	eeb0 1a48 	vmov.f32	s2, s16
 80051a0:	eef0 1a68 	vmov.f32	s3, s17
 80051a4:	eeb0 0a4b 	vmov.f32	s0, s22
 80051a8:	eef0 0a6b 	vmov.f32	s1, s23
 80051ac:	f002 f812 	bl	80071d4 <pow>
 80051b0:	ec53 2b10 	vmov	r2, r3, d0
 80051b4:	4640      	mov	r0, r8
 80051b6:	4649      	mov	r1, r9
 80051b8:	f7fb fb58 	bl	800086c <__aeabi_ddiv>
 80051bc:	4602      	mov	r2, r0
 80051be:	460b      	mov	r3, r1
				(COE[3]+COE[4]*t_sat_f+COE[5]*pow(t_sat_f,2)+COE[6]*pow(t_sat_f,3))/pow(dens_sat_gas,2) +
 80051c0:	4630      	mov	r0, r6
 80051c2:	4639      	mov	r1, r7
 80051c4:	f7fb f872 	bl	80002ac <__adddf3>
 80051c8:	ec41 0b1a 	vmov	d10, r0, r1
	coe_A = -((1+COE[0]*t_sat_f+COE[1]*pow(t_sat_f,2)+COE[2]*pow(t_sat_f,3))/dens_sat_gas +
 80051cc:	4682      	mov	sl, r0
 80051ce:	ee1a 3a90 	vmov	r3, s21
 80051d2:	f103 4b00 	add.w	fp, r3, #2147483648	; 0x80000000
	coe_B = 1+COE[0]*(t+273.15)+COE[1]*pow((t+273.15),2)+COE[2]*pow((t+273.15),3);
 80051d6:	4620      	mov	r0, r4
 80051d8:	f7fb f9c6 	bl	8000568 <__aeabi_f2d>
 80051dc:	a366      	add	r3, pc, #408	; (adr r3, 8005378 <cal_dens_sh_gas+0x4b0>)
 80051de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051e2:	f7fb f863 	bl	80002ac <__adddf3>
 80051e6:	4602      	mov	r2, r0
 80051e8:	460b      	mov	r3, r1
 80051ea:	ec43 2b1b 	vmov	d11, r2, r3
 80051ee:	a34c      	add	r3, pc, #304	; (adr r3, 8005320 <cal_dens_sh_gas+0x458>)
 80051f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051f4:	f7fb fa10 	bl	8000618 <__aeabi_dmul>
 80051f8:	2200      	movs	r2, #0
 80051fa:	4b61      	ldr	r3, [pc, #388]	; (8005380 <cal_dens_sh_gas+0x4b8>)
 80051fc:	f7fb f856 	bl	80002ac <__adddf3>
 8005200:	4604      	mov	r4, r0
 8005202:	460d      	mov	r5, r1
 8005204:	eeb0 1a49 	vmov.f32	s2, s18
 8005208:	eef0 1a69 	vmov.f32	s3, s19
 800520c:	eeb0 0a4b 	vmov.f32	s0, s22
 8005210:	eef0 0a6b 	vmov.f32	s1, s23
 8005214:	f001 ffde 	bl	80071d4 <pow>
 8005218:	ec51 0b10 	vmov	r0, r1, d0
 800521c:	a342      	add	r3, pc, #264	; (adr r3, 8005328 <cal_dens_sh_gas+0x460>)
 800521e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005222:	f7fb f9f9 	bl	8000618 <__aeabi_dmul>
 8005226:	4602      	mov	r2, r0
 8005228:	460b      	mov	r3, r1
 800522a:	4620      	mov	r0, r4
 800522c:	4629      	mov	r1, r5
 800522e:	f7fb f83d 	bl	80002ac <__adddf3>
 8005232:	4604      	mov	r4, r0
 8005234:	460d      	mov	r5, r1
 8005236:	eeb0 1a48 	vmov.f32	s2, s16
 800523a:	eef0 1a68 	vmov.f32	s3, s17
 800523e:	eeb0 0a4b 	vmov.f32	s0, s22
 8005242:	eef0 0a6b 	vmov.f32	s1, s23
 8005246:	f001 ffc5 	bl	80071d4 <pow>
 800524a:	ec51 0b10 	vmov	r0, r1, d0
 800524e:	a338      	add	r3, pc, #224	; (adr r3, 8005330 <cal_dens_sh_gas+0x468>)
 8005250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005254:	f7fb f9e0 	bl	8000618 <__aeabi_dmul>
 8005258:	4602      	mov	r2, r0
 800525a:	460b      	mov	r3, r1
 800525c:	4620      	mov	r0, r4
 800525e:	4629      	mov	r1, r5
 8005260:	f7fb f824 	bl	80002ac <__adddf3>
 8005264:	ec41 0b1c 	vmov	d12, r0, r1
	coe_C = COE[3]+COE[4]*(t+273.15)+COE[5]*pow((t+273.15),2)+COE[6]*pow((t+273.15),3);
 8005268:	a333      	add	r3, pc, #204	; (adr r3, 8005338 <cal_dens_sh_gas+0x470>)
 800526a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800526e:	ec51 0b1b 	vmov	r0, r1, d11
 8005272:	f7fb f9d1 	bl	8000618 <__aeabi_dmul>
 8005276:	a332      	add	r3, pc, #200	; (adr r3, 8005340 <cal_dens_sh_gas+0x478>)
 8005278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800527c:	f7fb f816 	bl	80002ac <__adddf3>
 8005280:	4604      	mov	r4, r0
 8005282:	460d      	mov	r5, r1
 8005284:	eeb0 1a49 	vmov.f32	s2, s18
 8005288:	eef0 1a69 	vmov.f32	s3, s19
 800528c:	eeb0 0a4b 	vmov.f32	s0, s22
 8005290:	eef0 0a6b 	vmov.f32	s1, s23
 8005294:	f001 ff9e 	bl	80071d4 <pow>
 8005298:	ec51 0b10 	vmov	r0, r1, d0
 800529c:	a32a      	add	r3, pc, #168	; (adr r3, 8005348 <cal_dens_sh_gas+0x480>)
 800529e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052a2:	f7fb f9b9 	bl	8000618 <__aeabi_dmul>
 80052a6:	4602      	mov	r2, r0
 80052a8:	460b      	mov	r3, r1
 80052aa:	4620      	mov	r0, r4
 80052ac:	4629      	mov	r1, r5
 80052ae:	f7fa fffd 	bl	80002ac <__adddf3>
 80052b2:	4604      	mov	r4, r0
 80052b4:	460d      	mov	r5, r1
 80052b6:	eeb0 1a48 	vmov.f32	s2, s16
 80052ba:	eef0 1a68 	vmov.f32	s3, s17
 80052be:	eeb0 0a4b 	vmov.f32	s0, s22
 80052c2:	eef0 0a6b 	vmov.f32	s1, s23
 80052c6:	f001 ff85 	bl	80071d4 <pow>
 80052ca:	ec51 0b10 	vmov	r0, r1, d0
 80052ce:	a320      	add	r3, pc, #128	; (adr r3, 8005350 <cal_dens_sh_gas+0x488>)
 80052d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d4:	f7fb f9a0 	bl	8000618 <__aeabi_dmul>
 80052d8:	4602      	mov	r2, r0
 80052da:	460b      	mov	r3, r1
 80052dc:	4620      	mov	r0, r4
 80052de:	4629      	mov	r1, r5
 80052e0:	f7fa ffe4 	bl	80002ac <__adddf3>
 80052e4:	4604      	mov	r4, r0
 80052e6:	460d      	mov	r5, r1
	coe_D = COE[7]+COE[8]*(t+273.15)+COE[9]*pow((t+273.15),2)+COE[10]*pow((t+273.15),3);
 80052e8:	a31b      	add	r3, pc, #108	; (adr r3, 8005358 <cal_dens_sh_gas+0x490>)
 80052ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ee:	ec51 0b1b 	vmov	r0, r1, d11
 80052f2:	f7fb f991 	bl	8000618 <__aeabi_dmul>
 80052f6:	a31a      	add	r3, pc, #104	; (adr r3, 8005360 <cal_dens_sh_gas+0x498>)
 80052f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052fc:	f7fa ffd4 	bl	80002a8 <__aeabi_dsub>
 8005300:	4606      	mov	r6, r0
 8005302:	460f      	mov	r7, r1
 8005304:	e058      	b.n	80053b8 <cal_dens_sh_gas+0x4f0>
 8005306:	bf00      	nop
 8005308:	00000000 	.word	0x00000000
 800530c:	40000000 	.word	0x40000000
 8005310:	00000000 	.word	0x00000000
 8005314:	40080000 	.word	0x40080000
 8005318:	9999999a 	.word	0x9999999a
 800531c:	bfd99999 	.word	0xbfd99999
 8005320:	c27c0d88 	.word	0xc27c0d88
 8005324:	3f915759 	.word	0x3f915759
 8005328:	83853571 	.word	0x83853571
 800532c:	bf048372 	.word	0xbf048372
 8005330:	ca203925 	.word	0xca203925
 8005334:	3e676e11 	.word	0x3e676e11
 8005338:	3fd6bedf 	.word	0x3fd6bedf
 800533c:	bf94eaf1 	.word	0xbf94eaf1
 8005340:	7450ced5 	.word	0x7450ced5
 8005344:	3ffc0f39 	.word	0x3ffc0f39
 8005348:	31d25330 	.word	0x31d25330
 800534c:	3f049dda 	.word	0x3f049dda
 8005350:	68a55f54 	.word	0x68a55f54
 8005354:	be6894e6 	.word	0xbe6894e6
 8005358:	00574d74 	.word	0x00574d74
 800535c:	3f7ad976 	.word	0x3f7ad976
 8005360:	8056d331 	.word	0x8056d331
 8005364:	3ff35437 	.word	0x3ff35437
 8005368:	47a75446 	.word	0x47a75446
 800536c:	bee18ea9 	.word	0xbee18ea9
 8005370:	a213fb9c 	.word	0xa213fb9c
 8005374:	3e450b44 	.word	0x3e450b44
 8005378:	66666666 	.word	0x66666666
 800537c:	40711266 	.word	0x40711266
 8005380:	3ff00000 	.word	0x3ff00000
 8005384:	3fe80000 	.word	0x3fe80000
 8005388:	9ba5e354 	.word	0x9ba5e354
 800538c:	409d4644 	.word	0x409d4644
 8005390:	551d68c7 	.word	0x551d68c7
 8005394:	4027e04d 	.word	0x4027e04d
 8005398:	c04fc46c 	.word	0xc04fc46c
 800539c:	3fa2e8cf 	.word	0x3fa2e8cf
 80053a0:	c8c9320e 	.word	0xc8c9320e
 80053a4:	4014f859 	.word	0x4014f859
 80053a8:	dd2cc204 	.word	0xdd2cc204
 80053ac:	3f1d5908 	.word	0x3f1d5908
 80053b0:	37d43b3d 	.word	0x37d43b3d
 80053b4:	3ecab6d9 	.word	0x3ecab6d9
 80053b8:	eeb0 1a49 	vmov.f32	s2, s18
 80053bc:	eef0 1a69 	vmov.f32	s3, s19
 80053c0:	eeb0 0a4b 	vmov.f32	s0, s22
 80053c4:	eef0 0a6b 	vmov.f32	s1, s23
 80053c8:	f001 ff04 	bl	80071d4 <pow>
 80053cc:	ec51 0b10 	vmov	r0, r1, d0
 80053d0:	a3ad      	add	r3, pc, #692	; (adr r3, 8005688 <cal_dens_sh_gas+0x7c0>)
 80053d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d6:	f7fb f91f 	bl	8000618 <__aeabi_dmul>
 80053da:	4602      	mov	r2, r0
 80053dc:	460b      	mov	r3, r1
 80053de:	4630      	mov	r0, r6
 80053e0:	4639      	mov	r1, r7
 80053e2:	f7fa ff63 	bl	80002ac <__adddf3>
 80053e6:	4606      	mov	r6, r0
 80053e8:	460f      	mov	r7, r1
 80053ea:	eeb0 1a48 	vmov.f32	s2, s16
 80053ee:	eef0 1a68 	vmov.f32	s3, s17
 80053f2:	eeb0 0a4b 	vmov.f32	s0, s22
 80053f6:	eef0 0a6b 	vmov.f32	s1, s23
 80053fa:	f001 feeb 	bl	80071d4 <pow>
 80053fe:	ec51 0b10 	vmov	r0, r1, d0
 8005402:	a3a3      	add	r3, pc, #652	; (adr r3, 8005690 <cal_dens_sh_gas+0x7c8>)
 8005404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005408:	f7fb f906 	bl	8000618 <__aeabi_dmul>
 800540c:	4602      	mov	r2, r0
 800540e:	460b      	mov	r3, r1
 8005410:	4630      	mov	r0, r6
 8005412:	4639      	mov	r1, r7
 8005414:	f7fa ff4a 	bl	80002ac <__adddf3>
 8005418:	4606      	mov	r6, r0
 800541a:	460f      	mov	r7, r1
	y = 2*pow((pow(coe_B,2)/(3*pow(coe_A,2))-coe_C/coe_A)/3,(1.0/2)) *
 800541c:	eeb0 1a49 	vmov.f32	s2, s18
 8005420:	eef0 1a69 	vmov.f32	s3, s19
 8005424:	eeb0 0a4c 	vmov.f32	s0, s24
 8005428:	eef0 0a6c 	vmov.f32	s1, s25
 800542c:	f001 fed2 	bl	80071d4 <pow>
 8005430:	ec59 8b10 	vmov	r8, r9, d0
 8005434:	eeb0 1a49 	vmov.f32	s2, s18
 8005438:	eef0 1a69 	vmov.f32	s3, s19
 800543c:	eeb0 0a4a 	vmov.f32	s0, s20
 8005440:	eef0 0a6a 	vmov.f32	s1, s21
 8005444:	f001 fec6 	bl	80071d4 <pow>
 8005448:	ec51 0b10 	vmov	r0, r1, d0
 800544c:	ec53 2b18 	vmov	r2, r3, d8
 8005450:	f7fb f8e2 	bl	8000618 <__aeabi_dmul>
 8005454:	4602      	mov	r2, r0
 8005456:	460b      	mov	r3, r1
 8005458:	4640      	mov	r0, r8
 800545a:	4649      	mov	r1, r9
 800545c:	f7fb fa06 	bl	800086c <__aeabi_ddiv>
 8005460:	4680      	mov	r8, r0
 8005462:	4689      	mov	r9, r1
 8005464:	4620      	mov	r0, r4
 8005466:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 800546a:	ec53 2b1a 	vmov	r2, r3, d10
 800546e:	f7fb f9fd 	bl	800086c <__aeabi_ddiv>
 8005472:	e9cd 0100 	strd	r0, r1, [sp]
 8005476:	4602      	mov	r2, r0
 8005478:	460b      	mov	r3, r1
 800547a:	4640      	mov	r0, r8
 800547c:	4649      	mov	r1, r9
 800547e:	f7fa ff13 	bl	80002a8 <__aeabi_dsub>
 8005482:	ec53 2b18 	vmov	r2, r3, d8
 8005486:	f7fb f9f1 	bl	800086c <__aeabi_ddiv>
 800548a:	ed9f 1b75 	vldr	d1, [pc, #468]	; 8005660 <cal_dens_sh_gas+0x798>
 800548e:	ec41 0b10 	vmov	d0, r0, r1
 8005492:	f001 fe9f 	bl	80071d4 <pow>
 8005496:	ec51 0b10 	vmov	r0, r1, d0
 800549a:	ee10 2a10 	vmov	r2, s0
 800549e:	460b      	mov	r3, r1
 80054a0:	f7fa ff04 	bl	80002ac <__adddf3>
 80054a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
		cos(1.0/3*acos(-(coe_D/coe_A+2*pow(coe_B,3)/(27*pow(coe_A,3))-coe_B*coe_C/(3*pow(coe_A,2))) /
 80054a8:	4630      	mov	r0, r6
 80054aa:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
 80054ae:	ec53 2b1a 	vmov	r2, r3, d10
 80054b2:	f7fb f9db 	bl	800086c <__aeabi_ddiv>
 80054b6:	4680      	mov	r8, r0
 80054b8:	4689      	mov	r9, r1
 80054ba:	eeb0 1a48 	vmov.f32	s2, s16
 80054be:	eef0 1a68 	vmov.f32	s3, s17
 80054c2:	eeb0 0a4c 	vmov.f32	s0, s24
 80054c6:	eef0 0a6c 	vmov.f32	s1, s25
 80054ca:	f001 fe83 	bl	80071d4 <pow>
 80054ce:	ec51 0b10 	vmov	r0, r1, d0
 80054d2:	ee10 2a10 	vmov	r2, s0
 80054d6:	460b      	mov	r3, r1
 80054d8:	f7fa fee8 	bl	80002ac <__adddf3>
 80054dc:	4606      	mov	r6, r0
 80054de:	460f      	mov	r7, r1
 80054e0:	eeb0 1a48 	vmov.f32	s2, s16
 80054e4:	eef0 1a68 	vmov.f32	s3, s17
 80054e8:	ec4b ab10 	vmov	d0, sl, fp
 80054ec:	f001 fe72 	bl	80071d4 <pow>
 80054f0:	ec51 0b10 	vmov	r0, r1, d0
 80054f4:	2200      	movs	r2, #0
 80054f6:	4b62      	ldr	r3, [pc, #392]	; (8005680 <cal_dens_sh_gas+0x7b8>)
 80054f8:	f7fb f88e 	bl	8000618 <__aeabi_dmul>
 80054fc:	4602      	mov	r2, r0
 80054fe:	460b      	mov	r3, r1
 8005500:	4630      	mov	r0, r6
 8005502:	4639      	mov	r1, r7
 8005504:	f7fb f9b2 	bl	800086c <__aeabi_ddiv>
 8005508:	4602      	mov	r2, r0
 800550a:	460b      	mov	r3, r1
 800550c:	4640      	mov	r0, r8
 800550e:	4649      	mov	r1, r9
 8005510:	f7fa fecc 	bl	80002ac <__adddf3>
 8005514:	4606      	mov	r6, r0
 8005516:	460f      	mov	r7, r1
 8005518:	4622      	mov	r2, r4
 800551a:	462b      	mov	r3, r5
 800551c:	ec51 0b1c 	vmov	r0, r1, d12
 8005520:	f7fb f87a 	bl	8000618 <__aeabi_dmul>
 8005524:	4604      	mov	r4, r0
 8005526:	460d      	mov	r5, r1
 8005528:	eeb0 1a49 	vmov.f32	s2, s18
 800552c:	eef0 1a69 	vmov.f32	s3, s19
 8005530:	eeb0 0a4a 	vmov.f32	s0, s20
 8005534:	eef0 0a6a 	vmov.f32	s1, s21
 8005538:	f001 fe4c 	bl	80071d4 <pow>
 800553c:	ec51 0b10 	vmov	r0, r1, d0
 8005540:	ec53 2b18 	vmov	r2, r3, d8
 8005544:	f7fb f868 	bl	8000618 <__aeabi_dmul>
 8005548:	4602      	mov	r2, r0
 800554a:	460b      	mov	r3, r1
 800554c:	4620      	mov	r0, r4
 800554e:	4629      	mov	r1, r5
 8005550:	f7fb f98c 	bl	800086c <__aeabi_ddiv>
 8005554:	4602      	mov	r2, r0
 8005556:	460b      	mov	r3, r1
 8005558:	4630      	mov	r0, r6
 800555a:	4639      	mov	r1, r7
 800555c:	f7fa fea4 	bl	80002a8 <__aeabi_dsub>
 8005560:	4604      	mov	r4, r0
 8005562:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
					  (2*pow((pow(coe_B,2)/(3*pow(coe_A,2))-coe_C/coe_A)/3,(3.0/2))))) -
 8005566:	eeb0 1a49 	vmov.f32	s2, s18
 800556a:	eef0 1a69 	vmov.f32	s3, s19
 800556e:	eeb0 0a4c 	vmov.f32	s0, s24
 8005572:	eef0 0a6c 	vmov.f32	s1, s25
 8005576:	f001 fe2d 	bl	80071d4 <pow>
 800557a:	ec57 6b10 	vmov	r6, r7, d0
 800557e:	eeb0 1a49 	vmov.f32	s2, s18
 8005582:	eef0 1a69 	vmov.f32	s3, s19
 8005586:	eeb0 0a4a 	vmov.f32	s0, s20
 800558a:	eef0 0a6a 	vmov.f32	s1, s21
 800558e:	f001 fe21 	bl	80071d4 <pow>
 8005592:	ec51 0b10 	vmov	r0, r1, d0
 8005596:	ec53 2b18 	vmov	r2, r3, d8
 800559a:	f7fb f83d 	bl	8000618 <__aeabi_dmul>
 800559e:	4602      	mov	r2, r0
 80055a0:	460b      	mov	r3, r1
 80055a2:	4630      	mov	r0, r6
 80055a4:	4639      	mov	r1, r7
 80055a6:	f7fb f961 	bl	800086c <__aeabi_ddiv>
 80055aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80055ae:	f7fa fe7b 	bl	80002a8 <__aeabi_dsub>
 80055b2:	ec53 2b18 	vmov	r2, r3, d8
 80055b6:	f7fb f959 	bl	800086c <__aeabi_ddiv>
 80055ba:	ed9f 1b2b 	vldr	d1, [pc, #172]	; 8005668 <cal_dens_sh_gas+0x7a0>
 80055be:	ec41 0b10 	vmov	d0, r0, r1
 80055c2:	f001 fe07 	bl	80071d4 <pow>
 80055c6:	ec51 0b10 	vmov	r0, r1, d0
 80055ca:	ee10 2a10 	vmov	r2, s0
 80055ce:	460b      	mov	r3, r1
 80055d0:	f7fa fe6c 	bl	80002ac <__adddf3>
 80055d4:	4602      	mov	r2, r0
 80055d6:	460b      	mov	r3, r1
		cos(1.0/3*acos(-(coe_D/coe_A+2*pow(coe_B,3)/(27*pow(coe_A,3))-coe_B*coe_C/(3*pow(coe_A,2))) /
 80055d8:	4620      	mov	r0, r4
 80055da:	4629      	mov	r1, r5
 80055dc:	f7fb f946 	bl	800086c <__aeabi_ddiv>
 80055e0:	ec41 0b10 	vmov	d0, r0, r1
 80055e4:	f001 fd3c 	bl	8007060 <acos>
 80055e8:	ec51 0b10 	vmov	r0, r1, d0
 80055ec:	a320      	add	r3, pc, #128	; (adr r3, 8005670 <cal_dens_sh_gas+0x7a8>)
 80055ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f2:	f7fb f811 	bl	8000618 <__aeabi_dmul>
 80055f6:	ec41 0b10 	vmov	d0, r0, r1
 80055fa:	f001 fe89 	bl	8007310 <cos>
 80055fe:	ec53 2b10 	vmov	r2, r3, d0
	y = 2*pow((pow(coe_B,2)/(3*pow(coe_A,2))-coe_C/coe_A)/3,(1.0/2)) *
 8005602:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005606:	f7fb f807 	bl	8000618 <__aeabi_dmul>
 800560a:	4604      	mov	r4, r0
 800560c:	460d      	mov	r5, r1
		coe_B/(3*coe_A);
 800560e:	ec53 2b18 	vmov	r2, r3, d8
 8005612:	ee1a 0a10 	vmov	r0, s20
 8005616:	4659      	mov	r1, fp
 8005618:	f7fa fffe 	bl	8000618 <__aeabi_dmul>
 800561c:	4602      	mov	r2, r0
 800561e:	460b      	mov	r3, r1
 8005620:	ec51 0b1c 	vmov	r0, r1, d12
 8005624:	f7fb f922 	bl	800086c <__aeabi_ddiv>
 8005628:	4602      	mov	r2, r0
 800562a:	460b      	mov	r3, r1
	y = 2*pow((pow(coe_B,2)/(3*pow(coe_A,2))-coe_C/coe_A)/3,(1.0/2)) *
 800562c:	4620      	mov	r0, r4
 800562e:	4629      	mov	r1, r5
 8005630:	f7fa fe3a 	bl	80002a8 <__aeabi_dsub>

	/* Calculated Density of Superheated gas */
	dens_sh_gas = pow((y-0.75),(-2.5));
 8005634:	2200      	movs	r2, #0
 8005636:	4b13      	ldr	r3, [pc, #76]	; (8005684 <cal_dens_sh_gas+0x7bc>)
 8005638:	f7fa fe36 	bl	80002a8 <__aeabi_dsub>
 800563c:	ed9f 1b0e 	vldr	d1, [pc, #56]	; 8005678 <cal_dens_sh_gas+0x7b0>
 8005640:	ec41 0b10 	vmov	d0, r0, r1
 8005644:	f001 fdc6 	bl	80071d4 <pow>
 8005648:	ec51 0b10 	vmov	r0, r1, d0

	return dens_sh_gas;
 800564c:	f7fb fabc 	bl	8000bc8 <__aeabi_d2f>
}
 8005650:	ee00 0a10 	vmov	s0, r0
 8005654:	b005      	add	sp, #20
 8005656:	ecbd 8b0a 	vpop	{d8-d12}
 800565a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800565e:	bf00      	nop
 8005660:	00000000 	.word	0x00000000
 8005664:	3fe00000 	.word	0x3fe00000
 8005668:	00000000 	.word	0x00000000
 800566c:	3ff80000 	.word	0x3ff80000
 8005670:	55555555 	.word	0x55555555
 8005674:	3fd55555 	.word	0x3fd55555
 8005678:	00000000 	.word	0x00000000
 800567c:	c0040000 	.word	0xc0040000
 8005680:	403b0000 	.word	0x403b0000
 8005684:	3fe80000 	.word	0x3fe80000
 8005688:	47a75446 	.word	0x47a75446
 800568c:	bee18ea9 	.word	0xbee18ea9
 8005690:	a213fb9c 	.word	0xa213fb9c
 8005694:	3e450b44 	.word	0x3e450b44

08005698 <pred_Tdis>:
 *
 * \return		discharge gas temperature in ℃.
*/
//-------------------------------------------------------------------------------------------------
float pred_Tdis(float p_suc, float t_suc, float p_dis, float compSpeed)
{
 8005698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800569a:	ed2d 8b0a 	vpush	{d8-d12}
 800569e:	eeb0 8a40 	vmov.f32	s16, s0
 80056a2:	eef0 9a60 	vmov.f32	s19, s1
 80056a6:	eeb0 aa41 	vmov.f32	s20, s2
 80056aa:	eef0 8a61 	vmov.f32	s17, s3
	float hs_dis;	//hs_dis:enthalpy of saturation discharge gas
	float ssh;	//ssh:superheated of suction gas
	float t_dis;	//t_dis:temperaturs of discharge gas

	/* Calculated volume flow rate. */
	volume_flow_rate = cal_volume_flow_rate(p_dis, p_suc, compSpeed);
 80056ae:	eeb0 1a61 	vmov.f32	s2, s3
 80056b2:	eef0 0a40 	vmov.f32	s1, s0
 80056b6:	eeb0 0a4a 	vmov.f32	s0, s20
 80056ba:	f7fe fe69 	bl	8004390 <cal_volume_flow_rate>
 80056be:	eef0 aa40 	vmov.f32	s21, s0

	/* Calculated power */
	power = cal_power(p_dis, p_suc, compSpeed);
 80056c2:	eeb0 1a68 	vmov.f32	s2, s17
 80056c6:	eef0 0a48 	vmov.f32	s1, s16
 80056ca:	eeb0 0a4a 	vmov.f32	s0, s20
 80056ce:	f7fe ff57 	bl	8004580 <cal_power>
 80056d2:	ee10 6a10 	vmov	r6, s0

	/* Calculated saturation temperature. */
	ts_suc = cal_t_sat(p_suc);
 80056d6:	eeb0 0a48 	vmov.f32	s0, s16
 80056da:	f7ff f9d5 	bl	8004a88 <cal_t_sat>

	/* Calculated superheated of suction gas */
	ssh = t_suc - ts_suc;
 80056de:	ee79 8ac0 	vsub.f32	s17, s19, s0

	/* Calculated density of suction gas. */
	if (ssh > 1)
 80056e2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80056e6:	eef4 8ae7 	vcmpe.f32	s17, s15
 80056ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056ee:	f340 81ce 	ble.w	8005a8e <pred_Tdis+0x3f6>
		dens_gas = cal_dens_sh_gas(p_suc, t_suc);
 80056f2:	eef0 0a69 	vmov.f32	s1, s19
 80056f6:	eeb0 0a48 	vmov.f32	s0, s16
 80056fa:	f7ff fbe5 	bl	8004ec8 <cal_dens_sh_gas>
 80056fe:	eeb0 9a40 	vmov.f32	s18, s0
	else
		dens_gas = 1/cal_vol_sat_gas(p_suc);

	/* Calculated compressor density and flow rate. */
	mr = volume_flow_rate*dens_gas;
 8005702:	ee29 9a2a 	vmul.f32	s18, s18, s21

	/* Calculated enthalpy of suction gas */
	if (ssh > 1)
 8005706:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800570a:	eef4 8ae7 	vcmpe.f32	s17, s15
 800570e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005712:	f340 81c5 	ble.w	8005aa0 <pred_Tdis+0x408>
		h_suc = cal_h_sh_gas(p_suc, t_suc);
 8005716:	eef0 0a69 	vmov.f32	s1, s19
 800571a:	eeb0 0a48 	vmov.f32	s0, s16
 800571e:	f7ff fa4f 	bl	8004bc0 <cal_h_sh_gas>
 8005722:	ee10 4a10 	vmov	r4, s0
	else
		h_suc = cal_h_sat_gas(p_suc);

	/* Calculated enthalpy of discharge gas */
	if (ssh < 2)
 8005726:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800572a:	eef4 8ae7 	vcmpe.f32	s17, s15
 800572e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005732:	f140 81bc 	bpl.w	8005aae <pred_Tdis+0x416>
		z_fw = 0.2 * ssh + 0.6;
 8005736:	ee18 0a90 	vmov	r0, s17
 800573a:	f7fa ff15 	bl	8000568 <__aeabi_f2d>
 800573e:	f20f 4310 	addw	r3, pc, #1040	; 0x410
 8005742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005746:	f7fa ff67 	bl	8000618 <__aeabi_dmul>
 800574a:	f20f 430c 	addw	r3, pc, #1036	; 0x40c
 800574e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005752:	f7fa fdab 	bl	80002ac <__adddf3>
 8005756:	f7fb fa37 	bl	8000bc8 <__aeabi_d2f>
 800575a:	4605      	mov	r5, r0
	else
		z_fw = 1;
	h_dis = (power * FW * z_fw) / mr + h_suc;
 800575c:	4630      	mov	r0, r6
 800575e:	f7fa ff03 	bl	8000568 <__aeabi_f2d>
 8005762:	a3ff      	add	r3, pc, #1020	; (adr r3, 8005b60 <pred_Tdis+0x4c8>)
 8005764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005768:	f7fa ff56 	bl	8000618 <__aeabi_dmul>
 800576c:	4606      	mov	r6, r0
 800576e:	460f      	mov	r7, r1
 8005770:	4628      	mov	r0, r5
 8005772:	f7fa fef9 	bl	8000568 <__aeabi_f2d>
 8005776:	4632      	mov	r2, r6
 8005778:	463b      	mov	r3, r7
 800577a:	f7fa ff4d 	bl	8000618 <__aeabi_dmul>
 800577e:	4606      	mov	r6, r0
 8005780:	460f      	mov	r7, r1
 8005782:	ee19 0a10 	vmov	r0, s18
 8005786:	f7fa feef 	bl	8000568 <__aeabi_f2d>
 800578a:	4602      	mov	r2, r0
 800578c:	460b      	mov	r3, r1
 800578e:	4630      	mov	r0, r6
 8005790:	4639      	mov	r1, r7
 8005792:	f7fb f86b 	bl	800086c <__aeabi_ddiv>
 8005796:	4606      	mov	r6, r0
 8005798:	460f      	mov	r7, r1
 800579a:	4620      	mov	r0, r4
 800579c:	f7fa fee4 	bl	8000568 <__aeabi_f2d>
 80057a0:	4632      	mov	r2, r6
 80057a2:	463b      	mov	r3, r7
 80057a4:	f7fa fd82 	bl	80002ac <__adddf3>
 80057a8:	f7fb fa0e 	bl	8000bc8 <__aeabi_d2f>
 80057ac:	ee0b 0a10 	vmov	s22, r0

	/* calculate coefficient of coe_a,coe_b,coe_c. */
	/* temperaturs of discharge saturation gas */
	ts_dis = cal_t_sat(p_dis);
 80057b0:	eeb0 0a4a 	vmov.f32	s0, s20
 80057b4:	f7ff f968 	bl	8004a88 <cal_t_sat>
 80057b8:	ee10 0a10 	vmov	r0, s0
	/*
		3.62592×10^(-7)-18.47693×10^(-8)×ts_dis-60.2765×10^(-10)×ts_dis^2
	*/
	coe_a = 3.62592*pow(10,(-7))-18.47693*pow(10,(-8))*
 80057bc:	f7fa fed4 	bl	8000568 <__aeabi_f2d>
 80057c0:	4602      	mov	r2, r0
 80057c2:	460b      	mov	r3, r1
 80057c4:	ec43 2b18 	vmov	d8, r2, r3
 80057c8:	a3d7      	add	r3, pc, #860	; (adr r3, 8005b28 <pred_Tdis+0x490>)
 80057ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ce:	f7fa ff23 	bl	8000618 <__aeabi_dmul>
 80057d2:	4602      	mov	r2, r0
 80057d4:	460b      	mov	r3, r1
 80057d6:	a1d0      	add	r1, pc, #832	; (adr r1, 8005b18 <pred_Tdis+0x480>)
 80057d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80057dc:	f7fa fd64 	bl	80002a8 <__aeabi_dsub>
 80057e0:	4606      	mov	r6, r0
 80057e2:	460f      	mov	r7, r1
			ts_dis-60.2765*pow(10,(-10))*pow(ts_dis,2);
 80057e4:	ed9f 9bc8 	vldr	d9, [pc, #800]	; 8005b08 <pred_Tdis+0x470>
 80057e8:	eeb0 1a49 	vmov.f32	s2, s18
 80057ec:	eef0 1a69 	vmov.f32	s3, s19
 80057f0:	eeb0 0a48 	vmov.f32	s0, s16
 80057f4:	eef0 0a68 	vmov.f32	s1, s17
 80057f8:	f001 fcec 	bl	80071d4 <pow>
 80057fc:	ec51 0b10 	vmov	r0, r1, d0
 8005800:	a3cf      	add	r3, pc, #828	; (adr r3, 8005b40 <pred_Tdis+0x4a8>)
 8005802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005806:	f7fa ff07 	bl	8000618 <__aeabi_dmul>
 800580a:	4602      	mov	r2, r0
 800580c:	460b      	mov	r3, r1
 800580e:	4630      	mov	r0, r6
 8005810:	4639      	mov	r1, r7
 8005812:	f7fa fd49 	bl	80002a8 <__aeabi_dsub>
	coe_a = 3.62592*pow(10,(-7))-18.47693*pow(10,(-8))*
 8005816:	f7fb f9d7 	bl	8000bc8 <__aeabi_d2f>
 800581a:	ee0a 0a90 	vmov	s21, r0
	/*
		3.3247×10^(-3)-2×3.62592×10^(-7)×ts_dis+30.40633×10^(-6)×ts_dis
		+2×18.47693×10^(-8)×ts_dis^2+76.64206×10^(-8)×ts_dis^2
		+2×60.2765×10^(-10)×ts_dis^3
	*/
	coe_b = 3.3247*pow(10,(-3))-2*3.62592*pow(10,(-7))*ts_dis+30.40633*pow(10,(-6))*
 800581e:	a3d2      	add	r3, pc, #840	; (adr r3, 8005b68 <pred_Tdis+0x4d0>)
 8005820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005824:	ec51 0b18 	vmov	r0, r1, d8
 8005828:	f7fa fef6 	bl	8000618 <__aeabi_dmul>
 800582c:	4602      	mov	r2, r0
 800582e:	460b      	mov	r3, r1
 8005830:	a1cf      	add	r1, pc, #828	; (adr r1, 8005b70 <pred_Tdis+0x4d8>)
 8005832:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005836:	f7fa fd37 	bl	80002a8 <__aeabi_dsub>
 800583a:	4606      	mov	r6, r0
 800583c:	460f      	mov	r7, r1
 800583e:	a3b8      	add	r3, pc, #736	; (adr r3, 8005b20 <pred_Tdis+0x488>)
 8005840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005844:	ec51 0b18 	vmov	r0, r1, d8
 8005848:	f7fa fee6 	bl	8000618 <__aeabi_dmul>
 800584c:	4602      	mov	r2, r0
 800584e:	460b      	mov	r3, r1
 8005850:	4630      	mov	r0, r6
 8005852:	4639      	mov	r1, r7
 8005854:	f7fa fd2a 	bl	80002ac <__adddf3>
 8005858:	4606      	mov	r6, r0
 800585a:	460f      	mov	r7, r1
			ts_dis+2*18.47693*pow(10,(-8))*pow(ts_dis,2)+76.64206*pow(10,(-8))*
 800585c:	eeb0 1a49 	vmov.f32	s2, s18
 8005860:	eef0 1a69 	vmov.f32	s3, s19
 8005864:	eeb0 0a48 	vmov.f32	s0, s16
 8005868:	eef0 0a68 	vmov.f32	s1, s17
 800586c:	f001 fcb2 	bl	80071d4 <pow>
 8005870:	ec51 0b10 	vmov	r0, r1, d0
 8005874:	a3c0      	add	r3, pc, #768	; (adr r3, 8005b78 <pred_Tdis+0x4e0>)
 8005876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800587a:	f7fa fecd 	bl	8000618 <__aeabi_dmul>
 800587e:	4602      	mov	r2, r0
 8005880:	460b      	mov	r3, r1
 8005882:	4630      	mov	r0, r6
 8005884:	4639      	mov	r1, r7
 8005886:	f7fa fd11 	bl	80002ac <__adddf3>
 800588a:	4606      	mov	r6, r0
 800588c:	460f      	mov	r7, r1
			pow(ts_dis,2)+2*60.2765*pow(10,(-10))*pow(ts_dis,3);
 800588e:	eeb0 1a49 	vmov.f32	s2, s18
 8005892:	eef0 1a69 	vmov.f32	s3, s19
 8005896:	eeb0 0a48 	vmov.f32	s0, s16
 800589a:	eef0 0a68 	vmov.f32	s1, s17
 800589e:	f001 fc99 	bl	80071d4 <pow>
 80058a2:	ec51 0b10 	vmov	r0, r1, d0
			ts_dis+2*18.47693*pow(10,(-8))*pow(ts_dis,2)+76.64206*pow(10,(-8))*
 80058a6:	a3a2      	add	r3, pc, #648	; (adr r3, 8005b30 <pred_Tdis+0x498>)
 80058a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ac:	f7fa feb4 	bl	8000618 <__aeabi_dmul>
 80058b0:	4602      	mov	r2, r0
 80058b2:	460b      	mov	r3, r1
 80058b4:	4630      	mov	r0, r6
 80058b6:	4639      	mov	r1, r7
 80058b8:	f7fa fcf8 	bl	80002ac <__adddf3>
 80058bc:	4606      	mov	r6, r0
 80058be:	460f      	mov	r7, r1
			pow(ts_dis,2)+2*60.2765*pow(10,(-10))*pow(ts_dis,3);
 80058c0:	ed9f cb93 	vldr	d12, [pc, #588]	; 8005b10 <pred_Tdis+0x478>
 80058c4:	eeb0 1a4c 	vmov.f32	s2, s24
 80058c8:	eef0 1a6c 	vmov.f32	s3, s25
 80058cc:	eeb0 0a48 	vmov.f32	s0, s16
 80058d0:	eef0 0a68 	vmov.f32	s1, s17
 80058d4:	f001 fc7e 	bl	80071d4 <pow>
 80058d8:	ec51 0b10 	vmov	r0, r1, d0
 80058dc:	a3a8      	add	r3, pc, #672	; (adr r3, 8005b80 <pred_Tdis+0x4e8>)
 80058de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058e2:	f7fa fe99 	bl	8000618 <__aeabi_dmul>
 80058e6:	4602      	mov	r2, r0
 80058e8:	460b      	mov	r3, r1
 80058ea:	4630      	mov	r0, r6
 80058ec:	4639      	mov	r1, r7
 80058ee:	f7fa fcdd 	bl	80002ac <__adddf3>
	coe_b = 3.3247*pow(10,(-3))-2*3.62592*pow(10,(-7))*ts_dis+30.40633*pow(10,(-6))*
 80058f2:	f7fb f969 	bl	8000bc8 <__aeabi_d2f>
 80058f6:	4604      	mov	r4, r0
	/*
		1-3.3247×10^(-3)×ts_dis+3.62592×10^(-7)×ts_dis^2-30.40633×10^(-6)
		×ts_dis^2-18.47693×10^(-8)×ts_dis^3-76.64206×10^(-8)×ts_dis^3-60.2765
		×10^(-10)×ts_dis^4-h_dis/hs_dis
	*/
	hs_dis = cal_h_sat_gas(p_dis);
 80058f8:	eeb0 0a4a 	vmov.f32	s0, s20
 80058fc:	f7ff f8fc 	bl	8004af8 <cal_h_sat_gas>
 8005900:	eeb0 aa40 	vmov.f32	s20, s0
	coe_c = 1-3.3247*pow(10,(-3))*ts_dis+3.62592*pow(10,(-7))*pow(ts_dis,2)-30.40633*
 8005904:	a39a      	add	r3, pc, #616	; (adr r3, 8005b70 <pred_Tdis+0x4d8>)
 8005906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800590a:	ec51 0b18 	vmov	r0, r1, d8
 800590e:	f7fa fe83 	bl	8000618 <__aeabi_dmul>
 8005912:	4602      	mov	r2, r0
 8005914:	460b      	mov	r3, r1
 8005916:	2000      	movs	r0, #0
 8005918:	498b      	ldr	r1, [pc, #556]	; (8005b48 <pred_Tdis+0x4b0>)
 800591a:	f7fa fcc5 	bl	80002a8 <__aeabi_dsub>
 800591e:	4606      	mov	r6, r0
 8005920:	460f      	mov	r7, r1
 8005922:	eeb0 1a49 	vmov.f32	s2, s18
 8005926:	eef0 1a69 	vmov.f32	s3, s19
 800592a:	eeb0 0a48 	vmov.f32	s0, s16
 800592e:	eef0 0a68 	vmov.f32	s1, s17
 8005932:	f001 fc4f 	bl	80071d4 <pow>
 8005936:	ec51 0b10 	vmov	r0, r1, d0
 800593a:	a377      	add	r3, pc, #476	; (adr r3, 8005b18 <pred_Tdis+0x480>)
 800593c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005940:	f7fa fe6a 	bl	8000618 <__aeabi_dmul>
 8005944:	4602      	mov	r2, r0
 8005946:	460b      	mov	r3, r1
 8005948:	4630      	mov	r0, r6
 800594a:	4639      	mov	r1, r7
 800594c:	f7fa fcae 	bl	80002ac <__adddf3>
 8005950:	4606      	mov	r6, r0
 8005952:	460f      	mov	r7, r1
			pow(10,(-6))*pow(ts_dis,2)-18.47693*pow(10,(-8))*pow(ts_dis,3)-76.64206*
 8005954:	eeb0 1a49 	vmov.f32	s2, s18
 8005958:	eef0 1a69 	vmov.f32	s3, s19
 800595c:	eeb0 0a48 	vmov.f32	s0, s16
 8005960:	eef0 0a68 	vmov.f32	s1, s17
 8005964:	f001 fc36 	bl	80071d4 <pow>
 8005968:	ec51 0b10 	vmov	r0, r1, d0
 800596c:	a36c      	add	r3, pc, #432	; (adr r3, 8005b20 <pred_Tdis+0x488>)
 800596e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005972:	f7fa fe51 	bl	8000618 <__aeabi_dmul>
 8005976:	4602      	mov	r2, r0
 8005978:	460b      	mov	r3, r1
	coe_c = 1-3.3247*pow(10,(-3))*ts_dis+3.62592*pow(10,(-7))*pow(ts_dis,2)-30.40633*
 800597a:	4630      	mov	r0, r6
 800597c:	4639      	mov	r1, r7
 800597e:	f7fa fc93 	bl	80002a8 <__aeabi_dsub>
 8005982:	4606      	mov	r6, r0
 8005984:	460f      	mov	r7, r1
			pow(10,(-6))*pow(ts_dis,2)-18.47693*pow(10,(-8))*pow(ts_dis,3)-76.64206*
 8005986:	eeb0 1a4c 	vmov.f32	s2, s24
 800598a:	eef0 1a6c 	vmov.f32	s3, s25
 800598e:	eeb0 0a48 	vmov.f32	s0, s16
 8005992:	eef0 0a68 	vmov.f32	s1, s17
 8005996:	f001 fc1d 	bl	80071d4 <pow>
 800599a:	ec51 0b10 	vmov	r0, r1, d0
 800599e:	a362      	add	r3, pc, #392	; (adr r3, 8005b28 <pred_Tdis+0x490>)
 80059a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059a4:	f7fa fe38 	bl	8000618 <__aeabi_dmul>
 80059a8:	4602      	mov	r2, r0
 80059aa:	460b      	mov	r3, r1
 80059ac:	4630      	mov	r0, r6
 80059ae:	4639      	mov	r1, r7
 80059b0:	f7fa fc7a 	bl	80002a8 <__aeabi_dsub>
 80059b4:	4606      	mov	r6, r0
 80059b6:	460f      	mov	r7, r1
			pow(10,(-8))*pow(ts_dis,3)-60.2765*pow(10,(-10))*pow(ts_dis,4)-h_dis/hs_dis;
 80059b8:	eeb0 1a4c 	vmov.f32	s2, s24
 80059bc:	eef0 1a6c 	vmov.f32	s3, s25
 80059c0:	eeb0 0a48 	vmov.f32	s0, s16
 80059c4:	eef0 0a68 	vmov.f32	s1, s17
 80059c8:	f001 fc04 	bl	80071d4 <pow>
 80059cc:	ec51 0b10 	vmov	r0, r1, d0
 80059d0:	a357      	add	r3, pc, #348	; (adr r3, 8005b30 <pred_Tdis+0x498>)
 80059d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059d6:	f7fa fe1f 	bl	8000618 <__aeabi_dmul>
 80059da:	4602      	mov	r2, r0
 80059dc:	460b      	mov	r3, r1
			pow(10,(-6))*pow(ts_dis,2)-18.47693*pow(10,(-8))*pow(ts_dis,3)-76.64206*
 80059de:	4630      	mov	r0, r6
 80059e0:	4639      	mov	r1, r7
 80059e2:	f7fa fc61 	bl	80002a8 <__aeabi_dsub>
 80059e6:	4606      	mov	r6, r0
 80059e8:	460f      	mov	r7, r1
			pow(10,(-8))*pow(ts_dis,3)-60.2765*pow(10,(-10))*pow(ts_dis,4)-h_dis/hs_dis;
 80059ea:	ed9f 1b53 	vldr	d1, [pc, #332]	; 8005b38 <pred_Tdis+0x4a0>
 80059ee:	eeb0 0a48 	vmov.f32	s0, s16
 80059f2:	eef0 0a68 	vmov.f32	s1, s17
 80059f6:	f001 fbed 	bl	80071d4 <pow>
 80059fa:	ec51 0b10 	vmov	r0, r1, d0
 80059fe:	a350      	add	r3, pc, #320	; (adr r3, 8005b40 <pred_Tdis+0x4a8>)
 8005a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a04:	f7fa fe08 	bl	8000618 <__aeabi_dmul>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	460b      	mov	r3, r1
 8005a0c:	4630      	mov	r0, r6
 8005a0e:	4639      	mov	r1, r7
 8005a10:	f7fa fc4a 	bl	80002a8 <__aeabi_dsub>
 8005a14:	4606      	mov	r6, r0
 8005a16:	460f      	mov	r7, r1
 8005a18:	eecb 7a0a 	vdiv.f32	s15, s22, s20
 8005a1c:	ee17 0a90 	vmov	r0, s15
 8005a20:	f7fa fda2 	bl	8000568 <__aeabi_f2d>
 8005a24:	4602      	mov	r2, r0
 8005a26:	460b      	mov	r3, r1
 8005a28:	4630      	mov	r0, r6
 8005a2a:	4639      	mov	r1, r7
 8005a2c:	f7fa fc3c 	bl	80002a8 <__aeabi_dsub>
	coe_c = 1-3.3247*pow(10,(-3))*ts_dis+3.62592*pow(10,(-7))*pow(ts_dis,2)-30.40633*
 8005a30:	f7fb f8ca 	bl	8000bc8 <__aeabi_d2f>
 8005a34:	ee08 0a10 	vmov	s16, r0

	/* calculate temperature of discharge gas.(-b+SQRT(b^2-4*a*c))/(2*a) */
	float sqrt_num;
	sqrt_num = pow(coe_b,2)-4*coe_a*coe_c;
 8005a38:	4620      	mov	r0, r4
 8005a3a:	f7fa fd95 	bl	8000568 <__aeabi_f2d>
 8005a3e:	eeb0 1a49 	vmov.f32	s2, s18
 8005a42:	eef0 1a69 	vmov.f32	s3, s19
 8005a46:	ec41 0b10 	vmov	d0, r0, r1
 8005a4a:	f001 fbc3 	bl	80071d4 <pow>
 8005a4e:	ec57 6b10 	vmov	r6, r7, d0
 8005a52:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 8005a56:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 8005a5a:	ee67 7a88 	vmul.f32	s15, s15, s16
 8005a5e:	ee17 0a90 	vmov	r0, s15
 8005a62:	f7fa fd81 	bl	8000568 <__aeabi_f2d>
 8005a66:	4602      	mov	r2, r0
 8005a68:	460b      	mov	r3, r1
 8005a6a:	4630      	mov	r0, r6
 8005a6c:	4639      	mov	r1, r7
 8005a6e:	f7fa fc1b 	bl	80002a8 <__aeabi_dsub>
 8005a72:	f7fb f8a9 	bl	8000bc8 <__aeabi_d2f>
 8005a76:	ee08 0a10 	vmov	s16, r0
	if (sqrt_num >= 0)
 8005a7a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8005a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a82:	da17      	bge.n	8005ab4 <pred_Tdis+0x41c>
		t_dis = (-coe_b+sqrt(sqrt_num))/(2*coe_a);
	else
		t_dis = 150;
 8005a84:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8005b4c <pred_Tdis+0x4b4>

	return t_dis;
}
 8005a88:	ecbd 8b0a 	vpop	{d8-d12}
 8005a8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		dens_gas = 1/cal_vol_sat_gas(p_suc);
 8005a8e:	eeb0 0a48 	vmov.f32	s0, s16
 8005a92:	f7ff f985 	bl	8004da0 <cal_vol_sat_gas>
 8005a96:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8005a9a:	ee87 9a80 	vdiv.f32	s18, s15, s0
 8005a9e:	e630      	b.n	8005702 <pred_Tdis+0x6a>
		h_suc = cal_h_sat_gas(p_suc);
 8005aa0:	eeb0 0a48 	vmov.f32	s0, s16
 8005aa4:	f7ff f828 	bl	8004af8 <cal_h_sat_gas>
 8005aa8:	ee10 4a10 	vmov	r4, s0
 8005aac:	e63b      	b.n	8005726 <pred_Tdis+0x8e>
		z_fw = 1;
 8005aae:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
 8005ab2:	e653      	b.n	800575c <pred_Tdis+0xc4>
		t_dis = (-coe_b+sqrt(sqrt_num))/(2*coe_a);
 8005ab4:	f084 4000 	eor.w	r0, r4, #2147483648	; 0x80000000
 8005ab8:	f7fa fd56 	bl	8000568 <__aeabi_f2d>
 8005abc:	4604      	mov	r4, r0
 8005abe:	460d      	mov	r5, r1
 8005ac0:	ee18 0a10 	vmov	r0, s16
 8005ac4:	f7fa fd50 	bl	8000568 <__aeabi_f2d>
 8005ac8:	ec41 0b10 	vmov	d0, r0, r1
 8005acc:	f001 fbf2 	bl	80072b4 <sqrt>
 8005ad0:	ec53 2b10 	vmov	r2, r3, d0
 8005ad4:	4620      	mov	r0, r4
 8005ad6:	4629      	mov	r1, r5
 8005ad8:	f7fa fbe8 	bl	80002ac <__adddf3>
 8005adc:	4604      	mov	r4, r0
 8005ade:	460d      	mov	r5, r1
 8005ae0:	ee7a 7aaa 	vadd.f32	s15, s21, s21
 8005ae4:	ee17 0a90 	vmov	r0, s15
 8005ae8:	f7fa fd3e 	bl	8000568 <__aeabi_f2d>
 8005aec:	4602      	mov	r2, r0
 8005aee:	460b      	mov	r3, r1
 8005af0:	4620      	mov	r0, r4
 8005af2:	4629      	mov	r1, r5
 8005af4:	f7fa feba 	bl	800086c <__aeabi_ddiv>
 8005af8:	f7fb f866 	bl	8000bc8 <__aeabi_d2f>
 8005afc:	ee00 0a10 	vmov	s0, r0
 8005b00:	e7c2      	b.n	8005a88 <pred_Tdis+0x3f0>
 8005b02:	bf00      	nop
 8005b04:	f3af 8000 	nop.w
 8005b08:	00000000 	.word	0x00000000
 8005b0c:	40000000 	.word	0x40000000
 8005b10:	00000000 	.word	0x00000000
 8005b14:	40080000 	.word	0x40080000
 8005b18:	7b0599f9 	.word	0x7b0599f9
 8005b1c:	3e985548 	.word	0x3e985548
 8005b20:	1649b44f 	.word	0x1649b44f
 8005b24:	3effe223 	.word	0x3effe223
 8005b28:	f35093b3 	.word	0xf35093b3
 8005b2c:	3e88cc9f 	.word	0x3e88cc9f
 8005b30:	b91235d7 	.word	0xb91235d7
 8005b34:	3ea9b780 	.word	0x3ea9b780
 8005b38:	00000000 	.word	0x00000000
 8005b3c:	40100000 	.word	0x40100000
 8005b40:	a4b3e538 	.word	0xa4b3e538
 8005b44:	3e39e378 	.word	0x3e39e378
 8005b48:	3ff00000 	.word	0x3ff00000
 8005b4c:	43160000 	.word	0x43160000
 8005b50:	9999999a 	.word	0x9999999a
 8005b54:	3fc99999 	.word	0x3fc99999
 8005b58:	33333333 	.word	0x33333333
 8005b5c:	3fe33333 	.word	0x3fe33333
 8005b60:	9999999a 	.word	0x9999999a
 8005b64:	3fe99999 	.word	0x3fe99999
 8005b68:	7b0599f9 	.word	0x7b0599f9
 8005b6c:	3ea85548 	.word	0x3ea85548
 8005b70:	b89bbd60 	.word	0xb89bbd60
 8005b74:	3f6b3c66 	.word	0x3f6b3c66
 8005b78:	f35093b3 	.word	0xf35093b3
 8005b7c:	3e98cc9f 	.word	0x3e98cc9f
 8005b80:	a4b3e538 	.word	0xa4b3e538
 8005b84:	3e49e378 	.word	0x3e49e378

08005b88 <pred_Pdis>:
 *
 * \return		discharge gas pressure in kPa.
*/
//-------------------------------------------------------------------------------------------------
float pred_Pdis(float p_suc, float t_suc, float t_dis, float compSpeed)
{
 8005b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b8a:	ed2d 8b0a 	vpush	{d8-d12}
 8005b8e:	eef0 8a40 	vmov.f32	s17, s0
 8005b92:	eeb0 aa60 	vmov.f32	s20, s1
 8005b96:	eeb0 ca41 	vmov.f32	s24, s2
 8005b9a:	eef0 aa61 	vmov.f32	s21, s3
	float ssh;	//ssh:superheated of suction gas
	float mr;	//mr:density and flow rate.
	float h_suc;	//h_suc:enthalpy of suction gas
	float h_dis;	//h_dis:enthalpy of discharge gas

	for (size_t i = 0; i < 100; i++)
 8005b9e:	2600      	movs	r6, #0
	float pd_int1 = 100, pd_int2=4300, pd_int, hd_int;
 8005ba0:	eddf ba53 	vldr	s23, [pc, #332]	; 8005cf0 <pred_Pdis+0x168>
 8005ba4:	ed9f ba53 	vldr	s22, [pc, #332]	; 8005cf4 <pred_Pdis+0x16c>
	for (size_t i = 0; i < 100; i++)
 8005ba8:	e012      	b.n	8005bd0 <pred_Pdis+0x48>

		/* Calculated density of suction gas. */
		if (ssh > 1)
			dens_gas = cal_dens_sh_gas(p_suc, t_suc);
		else
			dens_gas = 1/cal_vol_sat_gas(p_suc);
 8005baa:	eeb0 0a68 	vmov.f32	s0, s17
 8005bae:	f7ff f8f7 	bl	8004da0 <cal_vol_sat_gas>
 8005bb2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8005bb6:	ee87 9a80 	vdiv.f32	s18, s15, s0
 8005bba:	e03a      	b.n	8005c32 <pred_Pdis+0xaa>

		/* Calculated enthalpy of suction gas */
		if (ssh > 1)
			h_suc = cal_h_sh_gas(p_suc, t_suc);
		else
			h_suc = cal_h_sat_gas(p_suc);
 8005bbc:	eeb0 0a68 	vmov.f32	s0, s17
 8005bc0:	f7fe ff9a 	bl	8004af8 <cal_h_sat_gas>
 8005bc4:	ee10 7a10 	vmov	r7, s0
 8005bc8:	e044      	b.n	8005c54 <pred_Pdis+0xcc>
		else
		{
			if (hd_int < h_dis)
				pd_int2 = pd_int;
			else
				pd_int1 = pd_int;
 8005bca:	eeb0 ba48 	vmov.f32	s22, s16
	for (size_t i = 0; i < 100; i++)
 8005bce:	3601      	adds	r6, #1
 8005bd0:	2e63      	cmp	r6, #99	; 0x63
 8005bd2:	d87f      	bhi.n	8005cd4 <pred_Pdis+0x14c>
		pd_int = (pd_int1+pd_int2)/2;
 8005bd4:	ee3b 8a2b 	vadd.f32	s16, s22, s23
 8005bd8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8005bdc:	ee28 8a27 	vmul.f32	s16, s16, s15
		v_flow = cal_volume_flow_rate(pd_int, p_suc, compSpeed);
 8005be0:	eeb0 1a6a 	vmov.f32	s2, s21
 8005be4:	eef0 0a68 	vmov.f32	s1, s17
 8005be8:	eeb0 0a48 	vmov.f32	s0, s16
 8005bec:	f7fe fbd0 	bl	8004390 <cal_volume_flow_rate>
 8005bf0:	eef0 ca40 	vmov.f32	s25, s0
		power = cal_power(pd_int, p_suc, compSpeed);
 8005bf4:	eeb0 1a6a 	vmov.f32	s2, s21
 8005bf8:	eef0 0a68 	vmov.f32	s1, s17
 8005bfc:	eeb0 0a48 	vmov.f32	s0, s16
 8005c00:	f7fe fcbe 	bl	8004580 <cal_power>
 8005c04:	ee10 4a10 	vmov	r4, s0
		ts_suc = cal_t_sat(p_suc);
 8005c08:	eeb0 0a68 	vmov.f32	s0, s17
 8005c0c:	f7fe ff3c 	bl	8004a88 <cal_t_sat>
		ssh = t_suc - ts_suc;
 8005c10:	ee7a 9a40 	vsub.f32	s19, s20, s0
		if (ssh > 1)
 8005c14:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8005c18:	eef4 9ae7 	vcmpe.f32	s19, s15
 8005c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c20:	ddc3      	ble.n	8005baa <pred_Pdis+0x22>
			dens_gas = cal_dens_sh_gas(p_suc, t_suc);
 8005c22:	eef0 0a4a 	vmov.f32	s1, s20
 8005c26:	eeb0 0a68 	vmov.f32	s0, s17
 8005c2a:	f7ff f94d 	bl	8004ec8 <cal_dens_sh_gas>
 8005c2e:	eeb0 9a40 	vmov.f32	s18, s0
		mr = v_flow*dens_gas;
 8005c32:	ee29 9a2c 	vmul.f32	s18, s18, s25
		if (ssh > 1)
 8005c36:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8005c3a:	eef4 9ae7 	vcmpe.f32	s19, s15
 8005c3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c42:	ddbb      	ble.n	8005bbc <pred_Pdis+0x34>
			h_suc = cal_h_sh_gas(p_suc, t_suc);
 8005c44:	eef0 0a4a 	vmov.f32	s1, s20
 8005c48:	eeb0 0a68 	vmov.f32	s0, s17
 8005c4c:	f7fe ffb8 	bl	8004bc0 <cal_h_sh_gas>
 8005c50:	ee10 7a10 	vmov	r7, s0
		h_dis = (power * FW) / mr + h_suc;
 8005c54:	4620      	mov	r0, r4
 8005c56:	f7fa fc87 	bl	8000568 <__aeabi_f2d>
 8005c5a:	a321      	add	r3, pc, #132	; (adr r3, 8005ce0 <pred_Pdis+0x158>)
 8005c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c60:	f7fa fcda 	bl	8000618 <__aeabi_dmul>
 8005c64:	4604      	mov	r4, r0
 8005c66:	460d      	mov	r5, r1
 8005c68:	ee19 0a10 	vmov	r0, s18
 8005c6c:	f7fa fc7c 	bl	8000568 <__aeabi_f2d>
 8005c70:	4602      	mov	r2, r0
 8005c72:	460b      	mov	r3, r1
 8005c74:	4620      	mov	r0, r4
 8005c76:	4629      	mov	r1, r5
 8005c78:	f7fa fdf8 	bl	800086c <__aeabi_ddiv>
 8005c7c:	4604      	mov	r4, r0
 8005c7e:	460d      	mov	r5, r1
 8005c80:	4638      	mov	r0, r7
 8005c82:	f7fa fc71 	bl	8000568 <__aeabi_f2d>
 8005c86:	4622      	mov	r2, r4
 8005c88:	462b      	mov	r3, r5
 8005c8a:	f7fa fb0f 	bl	80002ac <__adddf3>
 8005c8e:	f7fa ff9b 	bl	8000bc8 <__aeabi_d2f>
 8005c92:	ee09 0a90 	vmov	s19, r0
		hd_int = cal_h_sh_gas(pd_int, t_dis);
 8005c96:	eef0 0a4c 	vmov.f32	s1, s24
 8005c9a:	eeb0 0a48 	vmov.f32	s0, s16
 8005c9e:	f7fe ff8f 	bl	8004bc0 <cal_h_sh_gas>
 8005ca2:	eeb0 9a40 	vmov.f32	s18, s0
		if (fabs(hd_int - h_dis) < 0.1)
 8005ca6:	ee70 7a69 	vsub.f32	s15, s0, s19
 8005caa:	eef0 7ae7 	vabs.f32	s15, s15
 8005cae:	ee17 0a90 	vmov	r0, s15
 8005cb2:	f7fa fc59 	bl	8000568 <__aeabi_f2d>
 8005cb6:	a30c      	add	r3, pc, #48	; (adr r3, 8005ce8 <pred_Pdis+0x160>)
 8005cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cbc:	f7fa ff1e 	bl	8000afc <__aeabi_dcmplt>
 8005cc0:	b940      	cbnz	r0, 8005cd4 <pred_Pdis+0x14c>
			if (hd_int < h_dis)
 8005cc2:	eef4 9ac9 	vcmpe.f32	s19, s18
 8005cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cca:	f77f af7e 	ble.w	8005bca <pred_Pdis+0x42>
				pd_int2 = pd_int;
 8005cce:	eef0 ba48 	vmov.f32	s23, s16
 8005cd2:	e77c      	b.n	8005bce <pred_Pdis+0x46>
		}
	}

	return pd_int;
}
 8005cd4:	eeb0 0a48 	vmov.f32	s0, s16
 8005cd8:	ecbd 8b0a 	vpop	{d8-d12}
 8005cdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cde:	bf00      	nop
 8005ce0:	9999999a 	.word	0x9999999a
 8005ce4:	3fe99999 	.word	0x3fe99999
 8005ce8:	9999999a 	.word	0x9999999a
 8005cec:	3fb99999 	.word	0x3fb99999
 8005cf0:	45866000 	.word	0x45866000
 8005cf4:	42c80000 	.word	0x42c80000

08005cf8 <std>:
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	b510      	push	{r4, lr}
 8005cfc:	4604      	mov	r4, r0
 8005cfe:	e9c0 3300 	strd	r3, r3, [r0]
 8005d02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005d06:	6083      	str	r3, [r0, #8]
 8005d08:	8181      	strh	r1, [r0, #12]
 8005d0a:	6643      	str	r3, [r0, #100]	; 0x64
 8005d0c:	81c2      	strh	r2, [r0, #14]
 8005d0e:	6183      	str	r3, [r0, #24]
 8005d10:	4619      	mov	r1, r3
 8005d12:	2208      	movs	r2, #8
 8005d14:	305c      	adds	r0, #92	; 0x5c
 8005d16:	f000 fa05 	bl	8006124 <memset>
 8005d1a:	4b05      	ldr	r3, [pc, #20]	; (8005d30 <std+0x38>)
 8005d1c:	6263      	str	r3, [r4, #36]	; 0x24
 8005d1e:	4b05      	ldr	r3, [pc, #20]	; (8005d34 <std+0x3c>)
 8005d20:	62a3      	str	r3, [r4, #40]	; 0x28
 8005d22:	4b05      	ldr	r3, [pc, #20]	; (8005d38 <std+0x40>)
 8005d24:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005d26:	4b05      	ldr	r3, [pc, #20]	; (8005d3c <std+0x44>)
 8005d28:	6224      	str	r4, [r4, #32]
 8005d2a:	6323      	str	r3, [r4, #48]	; 0x30
 8005d2c:	bd10      	pop	{r4, pc}
 8005d2e:	bf00      	nop
 8005d30:	08005f75 	.word	0x08005f75
 8005d34:	08005f97 	.word	0x08005f97
 8005d38:	08005fcf 	.word	0x08005fcf
 8005d3c:	08005ff3 	.word	0x08005ff3

08005d40 <stdio_exit_handler>:
 8005d40:	4a02      	ldr	r2, [pc, #8]	; (8005d4c <stdio_exit_handler+0xc>)
 8005d42:	4903      	ldr	r1, [pc, #12]	; (8005d50 <stdio_exit_handler+0x10>)
 8005d44:	4803      	ldr	r0, [pc, #12]	; (8005d54 <stdio_exit_handler+0x14>)
 8005d46:	f000 b869 	b.w	8005e1c <_fwalk_sglue>
 8005d4a:	bf00      	nop
 8005d4c:	20000010 	.word	0x20000010
 8005d50:	08006e45 	.word	0x08006e45
 8005d54:	2000001c 	.word	0x2000001c

08005d58 <cleanup_stdio>:
 8005d58:	6841      	ldr	r1, [r0, #4]
 8005d5a:	4b0c      	ldr	r3, [pc, #48]	; (8005d8c <cleanup_stdio+0x34>)
 8005d5c:	4299      	cmp	r1, r3
 8005d5e:	b510      	push	{r4, lr}
 8005d60:	4604      	mov	r4, r0
 8005d62:	d001      	beq.n	8005d68 <cleanup_stdio+0x10>
 8005d64:	f001 f86e 	bl	8006e44 <_fflush_r>
 8005d68:	68a1      	ldr	r1, [r4, #8]
 8005d6a:	4b09      	ldr	r3, [pc, #36]	; (8005d90 <cleanup_stdio+0x38>)
 8005d6c:	4299      	cmp	r1, r3
 8005d6e:	d002      	beq.n	8005d76 <cleanup_stdio+0x1e>
 8005d70:	4620      	mov	r0, r4
 8005d72:	f001 f867 	bl	8006e44 <_fflush_r>
 8005d76:	68e1      	ldr	r1, [r4, #12]
 8005d78:	4b06      	ldr	r3, [pc, #24]	; (8005d94 <cleanup_stdio+0x3c>)
 8005d7a:	4299      	cmp	r1, r3
 8005d7c:	d004      	beq.n	8005d88 <cleanup_stdio+0x30>
 8005d7e:	4620      	mov	r0, r4
 8005d80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d84:	f001 b85e 	b.w	8006e44 <_fflush_r>
 8005d88:	bd10      	pop	{r4, pc}
 8005d8a:	bf00      	nop
 8005d8c:	20004cd4 	.word	0x20004cd4
 8005d90:	20004d3c 	.word	0x20004d3c
 8005d94:	20004da4 	.word	0x20004da4

08005d98 <global_stdio_init.part.0>:
 8005d98:	b510      	push	{r4, lr}
 8005d9a:	4b0b      	ldr	r3, [pc, #44]	; (8005dc8 <global_stdio_init.part.0+0x30>)
 8005d9c:	4c0b      	ldr	r4, [pc, #44]	; (8005dcc <global_stdio_init.part.0+0x34>)
 8005d9e:	4a0c      	ldr	r2, [pc, #48]	; (8005dd0 <global_stdio_init.part.0+0x38>)
 8005da0:	601a      	str	r2, [r3, #0]
 8005da2:	4620      	mov	r0, r4
 8005da4:	2200      	movs	r2, #0
 8005da6:	2104      	movs	r1, #4
 8005da8:	f7ff ffa6 	bl	8005cf8 <std>
 8005dac:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005db0:	2201      	movs	r2, #1
 8005db2:	2109      	movs	r1, #9
 8005db4:	f7ff ffa0 	bl	8005cf8 <std>
 8005db8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005dbc:	2202      	movs	r2, #2
 8005dbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005dc2:	2112      	movs	r1, #18
 8005dc4:	f7ff bf98 	b.w	8005cf8 <std>
 8005dc8:	20004e0c 	.word	0x20004e0c
 8005dcc:	20004cd4 	.word	0x20004cd4
 8005dd0:	08005d41 	.word	0x08005d41

08005dd4 <__sfp_lock_acquire>:
 8005dd4:	4801      	ldr	r0, [pc, #4]	; (8005ddc <__sfp_lock_acquire+0x8>)
 8005dd6:	f000 ba73 	b.w	80062c0 <__retarget_lock_acquire_recursive>
 8005dda:	bf00      	nop
 8005ddc:	20004e15 	.word	0x20004e15

08005de0 <__sfp_lock_release>:
 8005de0:	4801      	ldr	r0, [pc, #4]	; (8005de8 <__sfp_lock_release+0x8>)
 8005de2:	f000 ba6e 	b.w	80062c2 <__retarget_lock_release_recursive>
 8005de6:	bf00      	nop
 8005de8:	20004e15 	.word	0x20004e15

08005dec <__sinit>:
 8005dec:	b510      	push	{r4, lr}
 8005dee:	4604      	mov	r4, r0
 8005df0:	f7ff fff0 	bl	8005dd4 <__sfp_lock_acquire>
 8005df4:	6a23      	ldr	r3, [r4, #32]
 8005df6:	b11b      	cbz	r3, 8005e00 <__sinit+0x14>
 8005df8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005dfc:	f7ff bff0 	b.w	8005de0 <__sfp_lock_release>
 8005e00:	4b04      	ldr	r3, [pc, #16]	; (8005e14 <__sinit+0x28>)
 8005e02:	6223      	str	r3, [r4, #32]
 8005e04:	4b04      	ldr	r3, [pc, #16]	; (8005e18 <__sinit+0x2c>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d1f5      	bne.n	8005df8 <__sinit+0xc>
 8005e0c:	f7ff ffc4 	bl	8005d98 <global_stdio_init.part.0>
 8005e10:	e7f2      	b.n	8005df8 <__sinit+0xc>
 8005e12:	bf00      	nop
 8005e14:	08005d59 	.word	0x08005d59
 8005e18:	20004e0c 	.word	0x20004e0c

08005e1c <_fwalk_sglue>:
 8005e1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e20:	4607      	mov	r7, r0
 8005e22:	4688      	mov	r8, r1
 8005e24:	4614      	mov	r4, r2
 8005e26:	2600      	movs	r6, #0
 8005e28:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005e2c:	f1b9 0901 	subs.w	r9, r9, #1
 8005e30:	d505      	bpl.n	8005e3e <_fwalk_sglue+0x22>
 8005e32:	6824      	ldr	r4, [r4, #0]
 8005e34:	2c00      	cmp	r4, #0
 8005e36:	d1f7      	bne.n	8005e28 <_fwalk_sglue+0xc>
 8005e38:	4630      	mov	r0, r6
 8005e3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e3e:	89ab      	ldrh	r3, [r5, #12]
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d907      	bls.n	8005e54 <_fwalk_sglue+0x38>
 8005e44:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005e48:	3301      	adds	r3, #1
 8005e4a:	d003      	beq.n	8005e54 <_fwalk_sglue+0x38>
 8005e4c:	4629      	mov	r1, r5
 8005e4e:	4638      	mov	r0, r7
 8005e50:	47c0      	blx	r8
 8005e52:	4306      	orrs	r6, r0
 8005e54:	3568      	adds	r5, #104	; 0x68
 8005e56:	e7e9      	b.n	8005e2c <_fwalk_sglue+0x10>

08005e58 <iprintf>:
 8005e58:	b40f      	push	{r0, r1, r2, r3}
 8005e5a:	b507      	push	{r0, r1, r2, lr}
 8005e5c:	4906      	ldr	r1, [pc, #24]	; (8005e78 <iprintf+0x20>)
 8005e5e:	ab04      	add	r3, sp, #16
 8005e60:	6808      	ldr	r0, [r1, #0]
 8005e62:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e66:	6881      	ldr	r1, [r0, #8]
 8005e68:	9301      	str	r3, [sp, #4]
 8005e6a:	f000 fcbb 	bl	80067e4 <_vfiprintf_r>
 8005e6e:	b003      	add	sp, #12
 8005e70:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e74:	b004      	add	sp, #16
 8005e76:	4770      	bx	lr
 8005e78:	20000068 	.word	0x20000068

08005e7c <_puts_r>:
 8005e7c:	6a03      	ldr	r3, [r0, #32]
 8005e7e:	b570      	push	{r4, r5, r6, lr}
 8005e80:	6884      	ldr	r4, [r0, #8]
 8005e82:	4605      	mov	r5, r0
 8005e84:	460e      	mov	r6, r1
 8005e86:	b90b      	cbnz	r3, 8005e8c <_puts_r+0x10>
 8005e88:	f7ff ffb0 	bl	8005dec <__sinit>
 8005e8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005e8e:	07db      	lsls	r3, r3, #31
 8005e90:	d405      	bmi.n	8005e9e <_puts_r+0x22>
 8005e92:	89a3      	ldrh	r3, [r4, #12]
 8005e94:	0598      	lsls	r0, r3, #22
 8005e96:	d402      	bmi.n	8005e9e <_puts_r+0x22>
 8005e98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e9a:	f000 fa11 	bl	80062c0 <__retarget_lock_acquire_recursive>
 8005e9e:	89a3      	ldrh	r3, [r4, #12]
 8005ea0:	0719      	lsls	r1, r3, #28
 8005ea2:	d513      	bpl.n	8005ecc <_puts_r+0x50>
 8005ea4:	6923      	ldr	r3, [r4, #16]
 8005ea6:	b18b      	cbz	r3, 8005ecc <_puts_r+0x50>
 8005ea8:	3e01      	subs	r6, #1
 8005eaa:	68a3      	ldr	r3, [r4, #8]
 8005eac:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005eb0:	3b01      	subs	r3, #1
 8005eb2:	60a3      	str	r3, [r4, #8]
 8005eb4:	b9e9      	cbnz	r1, 8005ef2 <_puts_r+0x76>
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	da2e      	bge.n	8005f18 <_puts_r+0x9c>
 8005eba:	4622      	mov	r2, r4
 8005ebc:	210a      	movs	r1, #10
 8005ebe:	4628      	mov	r0, r5
 8005ec0:	f000 f89b 	bl	8005ffa <__swbuf_r>
 8005ec4:	3001      	adds	r0, #1
 8005ec6:	d007      	beq.n	8005ed8 <_puts_r+0x5c>
 8005ec8:	250a      	movs	r5, #10
 8005eca:	e007      	b.n	8005edc <_puts_r+0x60>
 8005ecc:	4621      	mov	r1, r4
 8005ece:	4628      	mov	r0, r5
 8005ed0:	f000 f8d0 	bl	8006074 <__swsetup_r>
 8005ed4:	2800      	cmp	r0, #0
 8005ed6:	d0e7      	beq.n	8005ea8 <_puts_r+0x2c>
 8005ed8:	f04f 35ff 	mov.w	r5, #4294967295
 8005edc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005ede:	07da      	lsls	r2, r3, #31
 8005ee0:	d405      	bmi.n	8005eee <_puts_r+0x72>
 8005ee2:	89a3      	ldrh	r3, [r4, #12]
 8005ee4:	059b      	lsls	r3, r3, #22
 8005ee6:	d402      	bmi.n	8005eee <_puts_r+0x72>
 8005ee8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005eea:	f000 f9ea 	bl	80062c2 <__retarget_lock_release_recursive>
 8005eee:	4628      	mov	r0, r5
 8005ef0:	bd70      	pop	{r4, r5, r6, pc}
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	da04      	bge.n	8005f00 <_puts_r+0x84>
 8005ef6:	69a2      	ldr	r2, [r4, #24]
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	dc06      	bgt.n	8005f0a <_puts_r+0x8e>
 8005efc:	290a      	cmp	r1, #10
 8005efe:	d004      	beq.n	8005f0a <_puts_r+0x8e>
 8005f00:	6823      	ldr	r3, [r4, #0]
 8005f02:	1c5a      	adds	r2, r3, #1
 8005f04:	6022      	str	r2, [r4, #0]
 8005f06:	7019      	strb	r1, [r3, #0]
 8005f08:	e7cf      	b.n	8005eaa <_puts_r+0x2e>
 8005f0a:	4622      	mov	r2, r4
 8005f0c:	4628      	mov	r0, r5
 8005f0e:	f000 f874 	bl	8005ffa <__swbuf_r>
 8005f12:	3001      	adds	r0, #1
 8005f14:	d1c9      	bne.n	8005eaa <_puts_r+0x2e>
 8005f16:	e7df      	b.n	8005ed8 <_puts_r+0x5c>
 8005f18:	6823      	ldr	r3, [r4, #0]
 8005f1a:	250a      	movs	r5, #10
 8005f1c:	1c5a      	adds	r2, r3, #1
 8005f1e:	6022      	str	r2, [r4, #0]
 8005f20:	701d      	strb	r5, [r3, #0]
 8005f22:	e7db      	b.n	8005edc <_puts_r+0x60>

08005f24 <puts>:
 8005f24:	4b02      	ldr	r3, [pc, #8]	; (8005f30 <puts+0xc>)
 8005f26:	4601      	mov	r1, r0
 8005f28:	6818      	ldr	r0, [r3, #0]
 8005f2a:	f7ff bfa7 	b.w	8005e7c <_puts_r>
 8005f2e:	bf00      	nop
 8005f30:	20000068 	.word	0x20000068

08005f34 <siprintf>:
 8005f34:	b40e      	push	{r1, r2, r3}
 8005f36:	b500      	push	{lr}
 8005f38:	b09c      	sub	sp, #112	; 0x70
 8005f3a:	ab1d      	add	r3, sp, #116	; 0x74
 8005f3c:	9002      	str	r0, [sp, #8]
 8005f3e:	9006      	str	r0, [sp, #24]
 8005f40:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005f44:	4809      	ldr	r0, [pc, #36]	; (8005f6c <siprintf+0x38>)
 8005f46:	9107      	str	r1, [sp, #28]
 8005f48:	9104      	str	r1, [sp, #16]
 8005f4a:	4909      	ldr	r1, [pc, #36]	; (8005f70 <siprintf+0x3c>)
 8005f4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f50:	9105      	str	r1, [sp, #20]
 8005f52:	6800      	ldr	r0, [r0, #0]
 8005f54:	9301      	str	r3, [sp, #4]
 8005f56:	a902      	add	r1, sp, #8
 8005f58:	f000 fb1c 	bl	8006594 <_svfiprintf_r>
 8005f5c:	9b02      	ldr	r3, [sp, #8]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	701a      	strb	r2, [r3, #0]
 8005f62:	b01c      	add	sp, #112	; 0x70
 8005f64:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f68:	b003      	add	sp, #12
 8005f6a:	4770      	bx	lr
 8005f6c:	20000068 	.word	0x20000068
 8005f70:	ffff0208 	.word	0xffff0208

08005f74 <__sread>:
 8005f74:	b510      	push	{r4, lr}
 8005f76:	460c      	mov	r4, r1
 8005f78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f7c:	f000 f952 	bl	8006224 <_read_r>
 8005f80:	2800      	cmp	r0, #0
 8005f82:	bfab      	itete	ge
 8005f84:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005f86:	89a3      	ldrhlt	r3, [r4, #12]
 8005f88:	181b      	addge	r3, r3, r0
 8005f8a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005f8e:	bfac      	ite	ge
 8005f90:	6563      	strge	r3, [r4, #84]	; 0x54
 8005f92:	81a3      	strhlt	r3, [r4, #12]
 8005f94:	bd10      	pop	{r4, pc}

08005f96 <__swrite>:
 8005f96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f9a:	461f      	mov	r7, r3
 8005f9c:	898b      	ldrh	r3, [r1, #12]
 8005f9e:	05db      	lsls	r3, r3, #23
 8005fa0:	4605      	mov	r5, r0
 8005fa2:	460c      	mov	r4, r1
 8005fa4:	4616      	mov	r6, r2
 8005fa6:	d505      	bpl.n	8005fb4 <__swrite+0x1e>
 8005fa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fac:	2302      	movs	r3, #2
 8005fae:	2200      	movs	r2, #0
 8005fb0:	f000 f926 	bl	8006200 <_lseek_r>
 8005fb4:	89a3      	ldrh	r3, [r4, #12]
 8005fb6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005fba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005fbe:	81a3      	strh	r3, [r4, #12]
 8005fc0:	4632      	mov	r2, r6
 8005fc2:	463b      	mov	r3, r7
 8005fc4:	4628      	mov	r0, r5
 8005fc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005fca:	f000 b93d 	b.w	8006248 <_write_r>

08005fce <__sseek>:
 8005fce:	b510      	push	{r4, lr}
 8005fd0:	460c      	mov	r4, r1
 8005fd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fd6:	f000 f913 	bl	8006200 <_lseek_r>
 8005fda:	1c43      	adds	r3, r0, #1
 8005fdc:	89a3      	ldrh	r3, [r4, #12]
 8005fde:	bf15      	itete	ne
 8005fe0:	6560      	strne	r0, [r4, #84]	; 0x54
 8005fe2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005fe6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005fea:	81a3      	strheq	r3, [r4, #12]
 8005fec:	bf18      	it	ne
 8005fee:	81a3      	strhne	r3, [r4, #12]
 8005ff0:	bd10      	pop	{r4, pc}

08005ff2 <__sclose>:
 8005ff2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ff6:	f000 b89d 	b.w	8006134 <_close_r>

08005ffa <__swbuf_r>:
 8005ffa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ffc:	460e      	mov	r6, r1
 8005ffe:	4614      	mov	r4, r2
 8006000:	4605      	mov	r5, r0
 8006002:	b118      	cbz	r0, 800600c <__swbuf_r+0x12>
 8006004:	6a03      	ldr	r3, [r0, #32]
 8006006:	b90b      	cbnz	r3, 800600c <__swbuf_r+0x12>
 8006008:	f7ff fef0 	bl	8005dec <__sinit>
 800600c:	69a3      	ldr	r3, [r4, #24]
 800600e:	60a3      	str	r3, [r4, #8]
 8006010:	89a3      	ldrh	r3, [r4, #12]
 8006012:	071a      	lsls	r2, r3, #28
 8006014:	d525      	bpl.n	8006062 <__swbuf_r+0x68>
 8006016:	6923      	ldr	r3, [r4, #16]
 8006018:	b31b      	cbz	r3, 8006062 <__swbuf_r+0x68>
 800601a:	6823      	ldr	r3, [r4, #0]
 800601c:	6922      	ldr	r2, [r4, #16]
 800601e:	1a98      	subs	r0, r3, r2
 8006020:	6963      	ldr	r3, [r4, #20]
 8006022:	b2f6      	uxtb	r6, r6
 8006024:	4283      	cmp	r3, r0
 8006026:	4637      	mov	r7, r6
 8006028:	dc04      	bgt.n	8006034 <__swbuf_r+0x3a>
 800602a:	4621      	mov	r1, r4
 800602c:	4628      	mov	r0, r5
 800602e:	f000 ff09 	bl	8006e44 <_fflush_r>
 8006032:	b9e0      	cbnz	r0, 800606e <__swbuf_r+0x74>
 8006034:	68a3      	ldr	r3, [r4, #8]
 8006036:	3b01      	subs	r3, #1
 8006038:	60a3      	str	r3, [r4, #8]
 800603a:	6823      	ldr	r3, [r4, #0]
 800603c:	1c5a      	adds	r2, r3, #1
 800603e:	6022      	str	r2, [r4, #0]
 8006040:	701e      	strb	r6, [r3, #0]
 8006042:	6962      	ldr	r2, [r4, #20]
 8006044:	1c43      	adds	r3, r0, #1
 8006046:	429a      	cmp	r2, r3
 8006048:	d004      	beq.n	8006054 <__swbuf_r+0x5a>
 800604a:	89a3      	ldrh	r3, [r4, #12]
 800604c:	07db      	lsls	r3, r3, #31
 800604e:	d506      	bpl.n	800605e <__swbuf_r+0x64>
 8006050:	2e0a      	cmp	r6, #10
 8006052:	d104      	bne.n	800605e <__swbuf_r+0x64>
 8006054:	4621      	mov	r1, r4
 8006056:	4628      	mov	r0, r5
 8006058:	f000 fef4 	bl	8006e44 <_fflush_r>
 800605c:	b938      	cbnz	r0, 800606e <__swbuf_r+0x74>
 800605e:	4638      	mov	r0, r7
 8006060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006062:	4621      	mov	r1, r4
 8006064:	4628      	mov	r0, r5
 8006066:	f000 f805 	bl	8006074 <__swsetup_r>
 800606a:	2800      	cmp	r0, #0
 800606c:	d0d5      	beq.n	800601a <__swbuf_r+0x20>
 800606e:	f04f 37ff 	mov.w	r7, #4294967295
 8006072:	e7f4      	b.n	800605e <__swbuf_r+0x64>

08006074 <__swsetup_r>:
 8006074:	b538      	push	{r3, r4, r5, lr}
 8006076:	4b2a      	ldr	r3, [pc, #168]	; (8006120 <__swsetup_r+0xac>)
 8006078:	4605      	mov	r5, r0
 800607a:	6818      	ldr	r0, [r3, #0]
 800607c:	460c      	mov	r4, r1
 800607e:	b118      	cbz	r0, 8006088 <__swsetup_r+0x14>
 8006080:	6a03      	ldr	r3, [r0, #32]
 8006082:	b90b      	cbnz	r3, 8006088 <__swsetup_r+0x14>
 8006084:	f7ff feb2 	bl	8005dec <__sinit>
 8006088:	89a3      	ldrh	r3, [r4, #12]
 800608a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800608e:	0718      	lsls	r0, r3, #28
 8006090:	d422      	bmi.n	80060d8 <__swsetup_r+0x64>
 8006092:	06d9      	lsls	r1, r3, #27
 8006094:	d407      	bmi.n	80060a6 <__swsetup_r+0x32>
 8006096:	2309      	movs	r3, #9
 8006098:	602b      	str	r3, [r5, #0]
 800609a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800609e:	81a3      	strh	r3, [r4, #12]
 80060a0:	f04f 30ff 	mov.w	r0, #4294967295
 80060a4:	e034      	b.n	8006110 <__swsetup_r+0x9c>
 80060a6:	0758      	lsls	r0, r3, #29
 80060a8:	d512      	bpl.n	80060d0 <__swsetup_r+0x5c>
 80060aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80060ac:	b141      	cbz	r1, 80060c0 <__swsetup_r+0x4c>
 80060ae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80060b2:	4299      	cmp	r1, r3
 80060b4:	d002      	beq.n	80060bc <__swsetup_r+0x48>
 80060b6:	4628      	mov	r0, r5
 80060b8:	f000 f91a 	bl	80062f0 <_free_r>
 80060bc:	2300      	movs	r3, #0
 80060be:	6363      	str	r3, [r4, #52]	; 0x34
 80060c0:	89a3      	ldrh	r3, [r4, #12]
 80060c2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80060c6:	81a3      	strh	r3, [r4, #12]
 80060c8:	2300      	movs	r3, #0
 80060ca:	6063      	str	r3, [r4, #4]
 80060cc:	6923      	ldr	r3, [r4, #16]
 80060ce:	6023      	str	r3, [r4, #0]
 80060d0:	89a3      	ldrh	r3, [r4, #12]
 80060d2:	f043 0308 	orr.w	r3, r3, #8
 80060d6:	81a3      	strh	r3, [r4, #12]
 80060d8:	6923      	ldr	r3, [r4, #16]
 80060da:	b94b      	cbnz	r3, 80060f0 <__swsetup_r+0x7c>
 80060dc:	89a3      	ldrh	r3, [r4, #12]
 80060de:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80060e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060e6:	d003      	beq.n	80060f0 <__swsetup_r+0x7c>
 80060e8:	4621      	mov	r1, r4
 80060ea:	4628      	mov	r0, r5
 80060ec:	f000 fef8 	bl	8006ee0 <__smakebuf_r>
 80060f0:	89a0      	ldrh	r0, [r4, #12]
 80060f2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80060f6:	f010 0301 	ands.w	r3, r0, #1
 80060fa:	d00a      	beq.n	8006112 <__swsetup_r+0x9e>
 80060fc:	2300      	movs	r3, #0
 80060fe:	60a3      	str	r3, [r4, #8]
 8006100:	6963      	ldr	r3, [r4, #20]
 8006102:	425b      	negs	r3, r3
 8006104:	61a3      	str	r3, [r4, #24]
 8006106:	6923      	ldr	r3, [r4, #16]
 8006108:	b943      	cbnz	r3, 800611c <__swsetup_r+0xa8>
 800610a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800610e:	d1c4      	bne.n	800609a <__swsetup_r+0x26>
 8006110:	bd38      	pop	{r3, r4, r5, pc}
 8006112:	0781      	lsls	r1, r0, #30
 8006114:	bf58      	it	pl
 8006116:	6963      	ldrpl	r3, [r4, #20]
 8006118:	60a3      	str	r3, [r4, #8]
 800611a:	e7f4      	b.n	8006106 <__swsetup_r+0x92>
 800611c:	2000      	movs	r0, #0
 800611e:	e7f7      	b.n	8006110 <__swsetup_r+0x9c>
 8006120:	20000068 	.word	0x20000068

08006124 <memset>:
 8006124:	4402      	add	r2, r0
 8006126:	4603      	mov	r3, r0
 8006128:	4293      	cmp	r3, r2
 800612a:	d100      	bne.n	800612e <memset+0xa>
 800612c:	4770      	bx	lr
 800612e:	f803 1b01 	strb.w	r1, [r3], #1
 8006132:	e7f9      	b.n	8006128 <memset+0x4>

08006134 <_close_r>:
 8006134:	b538      	push	{r3, r4, r5, lr}
 8006136:	4d06      	ldr	r5, [pc, #24]	; (8006150 <_close_r+0x1c>)
 8006138:	2300      	movs	r3, #0
 800613a:	4604      	mov	r4, r0
 800613c:	4608      	mov	r0, r1
 800613e:	602b      	str	r3, [r5, #0]
 8006140:	f7fb f974 	bl	800142c <_close>
 8006144:	1c43      	adds	r3, r0, #1
 8006146:	d102      	bne.n	800614e <_close_r+0x1a>
 8006148:	682b      	ldr	r3, [r5, #0]
 800614a:	b103      	cbz	r3, 800614e <_close_r+0x1a>
 800614c:	6023      	str	r3, [r4, #0]
 800614e:	bd38      	pop	{r3, r4, r5, pc}
 8006150:	20004e10 	.word	0x20004e10

08006154 <_reclaim_reent>:
 8006154:	4b29      	ldr	r3, [pc, #164]	; (80061fc <_reclaim_reent+0xa8>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4283      	cmp	r3, r0
 800615a:	b570      	push	{r4, r5, r6, lr}
 800615c:	4604      	mov	r4, r0
 800615e:	d04b      	beq.n	80061f8 <_reclaim_reent+0xa4>
 8006160:	69c3      	ldr	r3, [r0, #28]
 8006162:	b143      	cbz	r3, 8006176 <_reclaim_reent+0x22>
 8006164:	68db      	ldr	r3, [r3, #12]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d144      	bne.n	80061f4 <_reclaim_reent+0xa0>
 800616a:	69e3      	ldr	r3, [r4, #28]
 800616c:	6819      	ldr	r1, [r3, #0]
 800616e:	b111      	cbz	r1, 8006176 <_reclaim_reent+0x22>
 8006170:	4620      	mov	r0, r4
 8006172:	f000 f8bd 	bl	80062f0 <_free_r>
 8006176:	6961      	ldr	r1, [r4, #20]
 8006178:	b111      	cbz	r1, 8006180 <_reclaim_reent+0x2c>
 800617a:	4620      	mov	r0, r4
 800617c:	f000 f8b8 	bl	80062f0 <_free_r>
 8006180:	69e1      	ldr	r1, [r4, #28]
 8006182:	b111      	cbz	r1, 800618a <_reclaim_reent+0x36>
 8006184:	4620      	mov	r0, r4
 8006186:	f000 f8b3 	bl	80062f0 <_free_r>
 800618a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800618c:	b111      	cbz	r1, 8006194 <_reclaim_reent+0x40>
 800618e:	4620      	mov	r0, r4
 8006190:	f000 f8ae 	bl	80062f0 <_free_r>
 8006194:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006196:	b111      	cbz	r1, 800619e <_reclaim_reent+0x4a>
 8006198:	4620      	mov	r0, r4
 800619a:	f000 f8a9 	bl	80062f0 <_free_r>
 800619e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80061a0:	b111      	cbz	r1, 80061a8 <_reclaim_reent+0x54>
 80061a2:	4620      	mov	r0, r4
 80061a4:	f000 f8a4 	bl	80062f0 <_free_r>
 80061a8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80061aa:	b111      	cbz	r1, 80061b2 <_reclaim_reent+0x5e>
 80061ac:	4620      	mov	r0, r4
 80061ae:	f000 f89f 	bl	80062f0 <_free_r>
 80061b2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80061b4:	b111      	cbz	r1, 80061bc <_reclaim_reent+0x68>
 80061b6:	4620      	mov	r0, r4
 80061b8:	f000 f89a 	bl	80062f0 <_free_r>
 80061bc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80061be:	b111      	cbz	r1, 80061c6 <_reclaim_reent+0x72>
 80061c0:	4620      	mov	r0, r4
 80061c2:	f000 f895 	bl	80062f0 <_free_r>
 80061c6:	6a23      	ldr	r3, [r4, #32]
 80061c8:	b1b3      	cbz	r3, 80061f8 <_reclaim_reent+0xa4>
 80061ca:	4620      	mov	r0, r4
 80061cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80061d0:	4718      	bx	r3
 80061d2:	5949      	ldr	r1, [r1, r5]
 80061d4:	b941      	cbnz	r1, 80061e8 <_reclaim_reent+0x94>
 80061d6:	3504      	adds	r5, #4
 80061d8:	69e3      	ldr	r3, [r4, #28]
 80061da:	2d80      	cmp	r5, #128	; 0x80
 80061dc:	68d9      	ldr	r1, [r3, #12]
 80061de:	d1f8      	bne.n	80061d2 <_reclaim_reent+0x7e>
 80061e0:	4620      	mov	r0, r4
 80061e2:	f000 f885 	bl	80062f0 <_free_r>
 80061e6:	e7c0      	b.n	800616a <_reclaim_reent+0x16>
 80061e8:	680e      	ldr	r6, [r1, #0]
 80061ea:	4620      	mov	r0, r4
 80061ec:	f000 f880 	bl	80062f0 <_free_r>
 80061f0:	4631      	mov	r1, r6
 80061f2:	e7ef      	b.n	80061d4 <_reclaim_reent+0x80>
 80061f4:	2500      	movs	r5, #0
 80061f6:	e7ef      	b.n	80061d8 <_reclaim_reent+0x84>
 80061f8:	bd70      	pop	{r4, r5, r6, pc}
 80061fa:	bf00      	nop
 80061fc:	20000068 	.word	0x20000068

08006200 <_lseek_r>:
 8006200:	b538      	push	{r3, r4, r5, lr}
 8006202:	4d07      	ldr	r5, [pc, #28]	; (8006220 <_lseek_r+0x20>)
 8006204:	4604      	mov	r4, r0
 8006206:	4608      	mov	r0, r1
 8006208:	4611      	mov	r1, r2
 800620a:	2200      	movs	r2, #0
 800620c:	602a      	str	r2, [r5, #0]
 800620e:	461a      	mov	r2, r3
 8006210:	f7fb f916 	bl	8001440 <_lseek>
 8006214:	1c43      	adds	r3, r0, #1
 8006216:	d102      	bne.n	800621e <_lseek_r+0x1e>
 8006218:	682b      	ldr	r3, [r5, #0]
 800621a:	b103      	cbz	r3, 800621e <_lseek_r+0x1e>
 800621c:	6023      	str	r3, [r4, #0]
 800621e:	bd38      	pop	{r3, r4, r5, pc}
 8006220:	20004e10 	.word	0x20004e10

08006224 <_read_r>:
 8006224:	b538      	push	{r3, r4, r5, lr}
 8006226:	4d07      	ldr	r5, [pc, #28]	; (8006244 <_read_r+0x20>)
 8006228:	4604      	mov	r4, r0
 800622a:	4608      	mov	r0, r1
 800622c:	4611      	mov	r1, r2
 800622e:	2200      	movs	r2, #0
 8006230:	602a      	str	r2, [r5, #0]
 8006232:	461a      	mov	r2, r3
 8006234:	f7fb f8ea 	bl	800140c <_read>
 8006238:	1c43      	adds	r3, r0, #1
 800623a:	d102      	bne.n	8006242 <_read_r+0x1e>
 800623c:	682b      	ldr	r3, [r5, #0]
 800623e:	b103      	cbz	r3, 8006242 <_read_r+0x1e>
 8006240:	6023      	str	r3, [r4, #0]
 8006242:	bd38      	pop	{r3, r4, r5, pc}
 8006244:	20004e10 	.word	0x20004e10

08006248 <_write_r>:
 8006248:	b538      	push	{r3, r4, r5, lr}
 800624a:	4d07      	ldr	r5, [pc, #28]	; (8006268 <_write_r+0x20>)
 800624c:	4604      	mov	r4, r0
 800624e:	4608      	mov	r0, r1
 8006250:	4611      	mov	r1, r2
 8006252:	2200      	movs	r2, #0
 8006254:	602a      	str	r2, [r5, #0]
 8006256:	461a      	mov	r2, r3
 8006258:	f7fa ff1c 	bl	8001094 <_write>
 800625c:	1c43      	adds	r3, r0, #1
 800625e:	d102      	bne.n	8006266 <_write_r+0x1e>
 8006260:	682b      	ldr	r3, [r5, #0]
 8006262:	b103      	cbz	r3, 8006266 <_write_r+0x1e>
 8006264:	6023      	str	r3, [r4, #0]
 8006266:	bd38      	pop	{r3, r4, r5, pc}
 8006268:	20004e10 	.word	0x20004e10

0800626c <__errno>:
 800626c:	4b01      	ldr	r3, [pc, #4]	; (8006274 <__errno+0x8>)
 800626e:	6818      	ldr	r0, [r3, #0]
 8006270:	4770      	bx	lr
 8006272:	bf00      	nop
 8006274:	20000068 	.word	0x20000068

08006278 <__libc_init_array>:
 8006278:	b570      	push	{r4, r5, r6, lr}
 800627a:	4d0d      	ldr	r5, [pc, #52]	; (80062b0 <__libc_init_array+0x38>)
 800627c:	4c0d      	ldr	r4, [pc, #52]	; (80062b4 <__libc_init_array+0x3c>)
 800627e:	1b64      	subs	r4, r4, r5
 8006280:	10a4      	asrs	r4, r4, #2
 8006282:	2600      	movs	r6, #0
 8006284:	42a6      	cmp	r6, r4
 8006286:	d109      	bne.n	800629c <__libc_init_array+0x24>
 8006288:	4d0b      	ldr	r5, [pc, #44]	; (80062b8 <__libc_init_array+0x40>)
 800628a:	4c0c      	ldr	r4, [pc, #48]	; (80062bc <__libc_init_array+0x44>)
 800628c:	f003 fc68 	bl	8009b60 <_init>
 8006290:	1b64      	subs	r4, r4, r5
 8006292:	10a4      	asrs	r4, r4, #2
 8006294:	2600      	movs	r6, #0
 8006296:	42a6      	cmp	r6, r4
 8006298:	d105      	bne.n	80062a6 <__libc_init_array+0x2e>
 800629a:	bd70      	pop	{r4, r5, r6, pc}
 800629c:	f855 3b04 	ldr.w	r3, [r5], #4
 80062a0:	4798      	blx	r3
 80062a2:	3601      	adds	r6, #1
 80062a4:	e7ee      	b.n	8006284 <__libc_init_array+0xc>
 80062a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80062aa:	4798      	blx	r3
 80062ac:	3601      	adds	r6, #1
 80062ae:	e7f2      	b.n	8006296 <__libc_init_array+0x1e>
 80062b0:	08009f40 	.word	0x08009f40
 80062b4:	08009f40 	.word	0x08009f40
 80062b8:	08009f40 	.word	0x08009f40
 80062bc:	08009f44 	.word	0x08009f44

080062c0 <__retarget_lock_acquire_recursive>:
 80062c0:	4770      	bx	lr

080062c2 <__retarget_lock_release_recursive>:
 80062c2:	4770      	bx	lr

080062c4 <strcpy>:
 80062c4:	4603      	mov	r3, r0
 80062c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80062ca:	f803 2b01 	strb.w	r2, [r3], #1
 80062ce:	2a00      	cmp	r2, #0
 80062d0:	d1f9      	bne.n	80062c6 <strcpy+0x2>
 80062d2:	4770      	bx	lr

080062d4 <memcpy>:
 80062d4:	440a      	add	r2, r1
 80062d6:	4291      	cmp	r1, r2
 80062d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80062dc:	d100      	bne.n	80062e0 <memcpy+0xc>
 80062de:	4770      	bx	lr
 80062e0:	b510      	push	{r4, lr}
 80062e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80062e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80062ea:	4291      	cmp	r1, r2
 80062ec:	d1f9      	bne.n	80062e2 <memcpy+0xe>
 80062ee:	bd10      	pop	{r4, pc}

080062f0 <_free_r>:
 80062f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80062f2:	2900      	cmp	r1, #0
 80062f4:	d044      	beq.n	8006380 <_free_r+0x90>
 80062f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062fa:	9001      	str	r0, [sp, #4]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	f1a1 0404 	sub.w	r4, r1, #4
 8006302:	bfb8      	it	lt
 8006304:	18e4      	addlt	r4, r4, r3
 8006306:	f000 f8df 	bl	80064c8 <__malloc_lock>
 800630a:	4a1e      	ldr	r2, [pc, #120]	; (8006384 <_free_r+0x94>)
 800630c:	9801      	ldr	r0, [sp, #4]
 800630e:	6813      	ldr	r3, [r2, #0]
 8006310:	b933      	cbnz	r3, 8006320 <_free_r+0x30>
 8006312:	6063      	str	r3, [r4, #4]
 8006314:	6014      	str	r4, [r2, #0]
 8006316:	b003      	add	sp, #12
 8006318:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800631c:	f000 b8da 	b.w	80064d4 <__malloc_unlock>
 8006320:	42a3      	cmp	r3, r4
 8006322:	d908      	bls.n	8006336 <_free_r+0x46>
 8006324:	6825      	ldr	r5, [r4, #0]
 8006326:	1961      	adds	r1, r4, r5
 8006328:	428b      	cmp	r3, r1
 800632a:	bf01      	itttt	eq
 800632c:	6819      	ldreq	r1, [r3, #0]
 800632e:	685b      	ldreq	r3, [r3, #4]
 8006330:	1949      	addeq	r1, r1, r5
 8006332:	6021      	streq	r1, [r4, #0]
 8006334:	e7ed      	b.n	8006312 <_free_r+0x22>
 8006336:	461a      	mov	r2, r3
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	b10b      	cbz	r3, 8006340 <_free_r+0x50>
 800633c:	42a3      	cmp	r3, r4
 800633e:	d9fa      	bls.n	8006336 <_free_r+0x46>
 8006340:	6811      	ldr	r1, [r2, #0]
 8006342:	1855      	adds	r5, r2, r1
 8006344:	42a5      	cmp	r5, r4
 8006346:	d10b      	bne.n	8006360 <_free_r+0x70>
 8006348:	6824      	ldr	r4, [r4, #0]
 800634a:	4421      	add	r1, r4
 800634c:	1854      	adds	r4, r2, r1
 800634e:	42a3      	cmp	r3, r4
 8006350:	6011      	str	r1, [r2, #0]
 8006352:	d1e0      	bne.n	8006316 <_free_r+0x26>
 8006354:	681c      	ldr	r4, [r3, #0]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	6053      	str	r3, [r2, #4]
 800635a:	440c      	add	r4, r1
 800635c:	6014      	str	r4, [r2, #0]
 800635e:	e7da      	b.n	8006316 <_free_r+0x26>
 8006360:	d902      	bls.n	8006368 <_free_r+0x78>
 8006362:	230c      	movs	r3, #12
 8006364:	6003      	str	r3, [r0, #0]
 8006366:	e7d6      	b.n	8006316 <_free_r+0x26>
 8006368:	6825      	ldr	r5, [r4, #0]
 800636a:	1961      	adds	r1, r4, r5
 800636c:	428b      	cmp	r3, r1
 800636e:	bf04      	itt	eq
 8006370:	6819      	ldreq	r1, [r3, #0]
 8006372:	685b      	ldreq	r3, [r3, #4]
 8006374:	6063      	str	r3, [r4, #4]
 8006376:	bf04      	itt	eq
 8006378:	1949      	addeq	r1, r1, r5
 800637a:	6021      	streq	r1, [r4, #0]
 800637c:	6054      	str	r4, [r2, #4]
 800637e:	e7ca      	b.n	8006316 <_free_r+0x26>
 8006380:	b003      	add	sp, #12
 8006382:	bd30      	pop	{r4, r5, pc}
 8006384:	20004e18 	.word	0x20004e18

08006388 <sbrk_aligned>:
 8006388:	b570      	push	{r4, r5, r6, lr}
 800638a:	4e0e      	ldr	r6, [pc, #56]	; (80063c4 <sbrk_aligned+0x3c>)
 800638c:	460c      	mov	r4, r1
 800638e:	6831      	ldr	r1, [r6, #0]
 8006390:	4605      	mov	r5, r0
 8006392:	b911      	cbnz	r1, 800639a <sbrk_aligned+0x12>
 8006394:	f000 fe1c 	bl	8006fd0 <_sbrk_r>
 8006398:	6030      	str	r0, [r6, #0]
 800639a:	4621      	mov	r1, r4
 800639c:	4628      	mov	r0, r5
 800639e:	f000 fe17 	bl	8006fd0 <_sbrk_r>
 80063a2:	1c43      	adds	r3, r0, #1
 80063a4:	d00a      	beq.n	80063bc <sbrk_aligned+0x34>
 80063a6:	1cc4      	adds	r4, r0, #3
 80063a8:	f024 0403 	bic.w	r4, r4, #3
 80063ac:	42a0      	cmp	r0, r4
 80063ae:	d007      	beq.n	80063c0 <sbrk_aligned+0x38>
 80063b0:	1a21      	subs	r1, r4, r0
 80063b2:	4628      	mov	r0, r5
 80063b4:	f000 fe0c 	bl	8006fd0 <_sbrk_r>
 80063b8:	3001      	adds	r0, #1
 80063ba:	d101      	bne.n	80063c0 <sbrk_aligned+0x38>
 80063bc:	f04f 34ff 	mov.w	r4, #4294967295
 80063c0:	4620      	mov	r0, r4
 80063c2:	bd70      	pop	{r4, r5, r6, pc}
 80063c4:	20004e1c 	.word	0x20004e1c

080063c8 <_malloc_r>:
 80063c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063cc:	1ccd      	adds	r5, r1, #3
 80063ce:	f025 0503 	bic.w	r5, r5, #3
 80063d2:	3508      	adds	r5, #8
 80063d4:	2d0c      	cmp	r5, #12
 80063d6:	bf38      	it	cc
 80063d8:	250c      	movcc	r5, #12
 80063da:	2d00      	cmp	r5, #0
 80063dc:	4607      	mov	r7, r0
 80063de:	db01      	blt.n	80063e4 <_malloc_r+0x1c>
 80063e0:	42a9      	cmp	r1, r5
 80063e2:	d905      	bls.n	80063f0 <_malloc_r+0x28>
 80063e4:	230c      	movs	r3, #12
 80063e6:	603b      	str	r3, [r7, #0]
 80063e8:	2600      	movs	r6, #0
 80063ea:	4630      	mov	r0, r6
 80063ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063f0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80064c4 <_malloc_r+0xfc>
 80063f4:	f000 f868 	bl	80064c8 <__malloc_lock>
 80063f8:	f8d8 3000 	ldr.w	r3, [r8]
 80063fc:	461c      	mov	r4, r3
 80063fe:	bb5c      	cbnz	r4, 8006458 <_malloc_r+0x90>
 8006400:	4629      	mov	r1, r5
 8006402:	4638      	mov	r0, r7
 8006404:	f7ff ffc0 	bl	8006388 <sbrk_aligned>
 8006408:	1c43      	adds	r3, r0, #1
 800640a:	4604      	mov	r4, r0
 800640c:	d155      	bne.n	80064ba <_malloc_r+0xf2>
 800640e:	f8d8 4000 	ldr.w	r4, [r8]
 8006412:	4626      	mov	r6, r4
 8006414:	2e00      	cmp	r6, #0
 8006416:	d145      	bne.n	80064a4 <_malloc_r+0xdc>
 8006418:	2c00      	cmp	r4, #0
 800641a:	d048      	beq.n	80064ae <_malloc_r+0xe6>
 800641c:	6823      	ldr	r3, [r4, #0]
 800641e:	4631      	mov	r1, r6
 8006420:	4638      	mov	r0, r7
 8006422:	eb04 0903 	add.w	r9, r4, r3
 8006426:	f000 fdd3 	bl	8006fd0 <_sbrk_r>
 800642a:	4581      	cmp	r9, r0
 800642c:	d13f      	bne.n	80064ae <_malloc_r+0xe6>
 800642e:	6821      	ldr	r1, [r4, #0]
 8006430:	1a6d      	subs	r5, r5, r1
 8006432:	4629      	mov	r1, r5
 8006434:	4638      	mov	r0, r7
 8006436:	f7ff ffa7 	bl	8006388 <sbrk_aligned>
 800643a:	3001      	adds	r0, #1
 800643c:	d037      	beq.n	80064ae <_malloc_r+0xe6>
 800643e:	6823      	ldr	r3, [r4, #0]
 8006440:	442b      	add	r3, r5
 8006442:	6023      	str	r3, [r4, #0]
 8006444:	f8d8 3000 	ldr.w	r3, [r8]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d038      	beq.n	80064be <_malloc_r+0xf6>
 800644c:	685a      	ldr	r2, [r3, #4]
 800644e:	42a2      	cmp	r2, r4
 8006450:	d12b      	bne.n	80064aa <_malloc_r+0xe2>
 8006452:	2200      	movs	r2, #0
 8006454:	605a      	str	r2, [r3, #4]
 8006456:	e00f      	b.n	8006478 <_malloc_r+0xb0>
 8006458:	6822      	ldr	r2, [r4, #0]
 800645a:	1b52      	subs	r2, r2, r5
 800645c:	d41f      	bmi.n	800649e <_malloc_r+0xd6>
 800645e:	2a0b      	cmp	r2, #11
 8006460:	d917      	bls.n	8006492 <_malloc_r+0xca>
 8006462:	1961      	adds	r1, r4, r5
 8006464:	42a3      	cmp	r3, r4
 8006466:	6025      	str	r5, [r4, #0]
 8006468:	bf18      	it	ne
 800646a:	6059      	strne	r1, [r3, #4]
 800646c:	6863      	ldr	r3, [r4, #4]
 800646e:	bf08      	it	eq
 8006470:	f8c8 1000 	streq.w	r1, [r8]
 8006474:	5162      	str	r2, [r4, r5]
 8006476:	604b      	str	r3, [r1, #4]
 8006478:	4638      	mov	r0, r7
 800647a:	f104 060b 	add.w	r6, r4, #11
 800647e:	f000 f829 	bl	80064d4 <__malloc_unlock>
 8006482:	f026 0607 	bic.w	r6, r6, #7
 8006486:	1d23      	adds	r3, r4, #4
 8006488:	1af2      	subs	r2, r6, r3
 800648a:	d0ae      	beq.n	80063ea <_malloc_r+0x22>
 800648c:	1b9b      	subs	r3, r3, r6
 800648e:	50a3      	str	r3, [r4, r2]
 8006490:	e7ab      	b.n	80063ea <_malloc_r+0x22>
 8006492:	42a3      	cmp	r3, r4
 8006494:	6862      	ldr	r2, [r4, #4]
 8006496:	d1dd      	bne.n	8006454 <_malloc_r+0x8c>
 8006498:	f8c8 2000 	str.w	r2, [r8]
 800649c:	e7ec      	b.n	8006478 <_malloc_r+0xb0>
 800649e:	4623      	mov	r3, r4
 80064a0:	6864      	ldr	r4, [r4, #4]
 80064a2:	e7ac      	b.n	80063fe <_malloc_r+0x36>
 80064a4:	4634      	mov	r4, r6
 80064a6:	6876      	ldr	r6, [r6, #4]
 80064a8:	e7b4      	b.n	8006414 <_malloc_r+0x4c>
 80064aa:	4613      	mov	r3, r2
 80064ac:	e7cc      	b.n	8006448 <_malloc_r+0x80>
 80064ae:	230c      	movs	r3, #12
 80064b0:	603b      	str	r3, [r7, #0]
 80064b2:	4638      	mov	r0, r7
 80064b4:	f000 f80e 	bl	80064d4 <__malloc_unlock>
 80064b8:	e797      	b.n	80063ea <_malloc_r+0x22>
 80064ba:	6025      	str	r5, [r4, #0]
 80064bc:	e7dc      	b.n	8006478 <_malloc_r+0xb0>
 80064be:	605b      	str	r3, [r3, #4]
 80064c0:	deff      	udf	#255	; 0xff
 80064c2:	bf00      	nop
 80064c4:	20004e18 	.word	0x20004e18

080064c8 <__malloc_lock>:
 80064c8:	4801      	ldr	r0, [pc, #4]	; (80064d0 <__malloc_lock+0x8>)
 80064ca:	f7ff bef9 	b.w	80062c0 <__retarget_lock_acquire_recursive>
 80064ce:	bf00      	nop
 80064d0:	20004e14 	.word	0x20004e14

080064d4 <__malloc_unlock>:
 80064d4:	4801      	ldr	r0, [pc, #4]	; (80064dc <__malloc_unlock+0x8>)
 80064d6:	f7ff bef4 	b.w	80062c2 <__retarget_lock_release_recursive>
 80064da:	bf00      	nop
 80064dc:	20004e14 	.word	0x20004e14

080064e0 <__ssputs_r>:
 80064e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064e4:	688e      	ldr	r6, [r1, #8]
 80064e6:	461f      	mov	r7, r3
 80064e8:	42be      	cmp	r6, r7
 80064ea:	680b      	ldr	r3, [r1, #0]
 80064ec:	4682      	mov	sl, r0
 80064ee:	460c      	mov	r4, r1
 80064f0:	4690      	mov	r8, r2
 80064f2:	d82c      	bhi.n	800654e <__ssputs_r+0x6e>
 80064f4:	898a      	ldrh	r2, [r1, #12]
 80064f6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80064fa:	d026      	beq.n	800654a <__ssputs_r+0x6a>
 80064fc:	6965      	ldr	r5, [r4, #20]
 80064fe:	6909      	ldr	r1, [r1, #16]
 8006500:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006504:	eba3 0901 	sub.w	r9, r3, r1
 8006508:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800650c:	1c7b      	adds	r3, r7, #1
 800650e:	444b      	add	r3, r9
 8006510:	106d      	asrs	r5, r5, #1
 8006512:	429d      	cmp	r5, r3
 8006514:	bf38      	it	cc
 8006516:	461d      	movcc	r5, r3
 8006518:	0553      	lsls	r3, r2, #21
 800651a:	d527      	bpl.n	800656c <__ssputs_r+0x8c>
 800651c:	4629      	mov	r1, r5
 800651e:	f7ff ff53 	bl	80063c8 <_malloc_r>
 8006522:	4606      	mov	r6, r0
 8006524:	b360      	cbz	r0, 8006580 <__ssputs_r+0xa0>
 8006526:	6921      	ldr	r1, [r4, #16]
 8006528:	464a      	mov	r2, r9
 800652a:	f7ff fed3 	bl	80062d4 <memcpy>
 800652e:	89a3      	ldrh	r3, [r4, #12]
 8006530:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006534:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006538:	81a3      	strh	r3, [r4, #12]
 800653a:	6126      	str	r6, [r4, #16]
 800653c:	6165      	str	r5, [r4, #20]
 800653e:	444e      	add	r6, r9
 8006540:	eba5 0509 	sub.w	r5, r5, r9
 8006544:	6026      	str	r6, [r4, #0]
 8006546:	60a5      	str	r5, [r4, #8]
 8006548:	463e      	mov	r6, r7
 800654a:	42be      	cmp	r6, r7
 800654c:	d900      	bls.n	8006550 <__ssputs_r+0x70>
 800654e:	463e      	mov	r6, r7
 8006550:	6820      	ldr	r0, [r4, #0]
 8006552:	4632      	mov	r2, r6
 8006554:	4641      	mov	r1, r8
 8006556:	f000 fcff 	bl	8006f58 <memmove>
 800655a:	68a3      	ldr	r3, [r4, #8]
 800655c:	1b9b      	subs	r3, r3, r6
 800655e:	60a3      	str	r3, [r4, #8]
 8006560:	6823      	ldr	r3, [r4, #0]
 8006562:	4433      	add	r3, r6
 8006564:	6023      	str	r3, [r4, #0]
 8006566:	2000      	movs	r0, #0
 8006568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800656c:	462a      	mov	r2, r5
 800656e:	f000 fd3f 	bl	8006ff0 <_realloc_r>
 8006572:	4606      	mov	r6, r0
 8006574:	2800      	cmp	r0, #0
 8006576:	d1e0      	bne.n	800653a <__ssputs_r+0x5a>
 8006578:	6921      	ldr	r1, [r4, #16]
 800657a:	4650      	mov	r0, sl
 800657c:	f7ff feb8 	bl	80062f0 <_free_r>
 8006580:	230c      	movs	r3, #12
 8006582:	f8ca 3000 	str.w	r3, [sl]
 8006586:	89a3      	ldrh	r3, [r4, #12]
 8006588:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800658c:	81a3      	strh	r3, [r4, #12]
 800658e:	f04f 30ff 	mov.w	r0, #4294967295
 8006592:	e7e9      	b.n	8006568 <__ssputs_r+0x88>

08006594 <_svfiprintf_r>:
 8006594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006598:	4698      	mov	r8, r3
 800659a:	898b      	ldrh	r3, [r1, #12]
 800659c:	061b      	lsls	r3, r3, #24
 800659e:	b09d      	sub	sp, #116	; 0x74
 80065a0:	4607      	mov	r7, r0
 80065a2:	460d      	mov	r5, r1
 80065a4:	4614      	mov	r4, r2
 80065a6:	d50e      	bpl.n	80065c6 <_svfiprintf_r+0x32>
 80065a8:	690b      	ldr	r3, [r1, #16]
 80065aa:	b963      	cbnz	r3, 80065c6 <_svfiprintf_r+0x32>
 80065ac:	2140      	movs	r1, #64	; 0x40
 80065ae:	f7ff ff0b 	bl	80063c8 <_malloc_r>
 80065b2:	6028      	str	r0, [r5, #0]
 80065b4:	6128      	str	r0, [r5, #16]
 80065b6:	b920      	cbnz	r0, 80065c2 <_svfiprintf_r+0x2e>
 80065b8:	230c      	movs	r3, #12
 80065ba:	603b      	str	r3, [r7, #0]
 80065bc:	f04f 30ff 	mov.w	r0, #4294967295
 80065c0:	e0d0      	b.n	8006764 <_svfiprintf_r+0x1d0>
 80065c2:	2340      	movs	r3, #64	; 0x40
 80065c4:	616b      	str	r3, [r5, #20]
 80065c6:	2300      	movs	r3, #0
 80065c8:	9309      	str	r3, [sp, #36]	; 0x24
 80065ca:	2320      	movs	r3, #32
 80065cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80065d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80065d4:	2330      	movs	r3, #48	; 0x30
 80065d6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800677c <_svfiprintf_r+0x1e8>
 80065da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80065de:	f04f 0901 	mov.w	r9, #1
 80065e2:	4623      	mov	r3, r4
 80065e4:	469a      	mov	sl, r3
 80065e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80065ea:	b10a      	cbz	r2, 80065f0 <_svfiprintf_r+0x5c>
 80065ec:	2a25      	cmp	r2, #37	; 0x25
 80065ee:	d1f9      	bne.n	80065e4 <_svfiprintf_r+0x50>
 80065f0:	ebba 0b04 	subs.w	fp, sl, r4
 80065f4:	d00b      	beq.n	800660e <_svfiprintf_r+0x7a>
 80065f6:	465b      	mov	r3, fp
 80065f8:	4622      	mov	r2, r4
 80065fa:	4629      	mov	r1, r5
 80065fc:	4638      	mov	r0, r7
 80065fe:	f7ff ff6f 	bl	80064e0 <__ssputs_r>
 8006602:	3001      	adds	r0, #1
 8006604:	f000 80a9 	beq.w	800675a <_svfiprintf_r+0x1c6>
 8006608:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800660a:	445a      	add	r2, fp
 800660c:	9209      	str	r2, [sp, #36]	; 0x24
 800660e:	f89a 3000 	ldrb.w	r3, [sl]
 8006612:	2b00      	cmp	r3, #0
 8006614:	f000 80a1 	beq.w	800675a <_svfiprintf_r+0x1c6>
 8006618:	2300      	movs	r3, #0
 800661a:	f04f 32ff 	mov.w	r2, #4294967295
 800661e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006622:	f10a 0a01 	add.w	sl, sl, #1
 8006626:	9304      	str	r3, [sp, #16]
 8006628:	9307      	str	r3, [sp, #28]
 800662a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800662e:	931a      	str	r3, [sp, #104]	; 0x68
 8006630:	4654      	mov	r4, sl
 8006632:	2205      	movs	r2, #5
 8006634:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006638:	4850      	ldr	r0, [pc, #320]	; (800677c <_svfiprintf_r+0x1e8>)
 800663a:	f7f9 fde1 	bl	8000200 <memchr>
 800663e:	9a04      	ldr	r2, [sp, #16]
 8006640:	b9d8      	cbnz	r0, 800667a <_svfiprintf_r+0xe6>
 8006642:	06d0      	lsls	r0, r2, #27
 8006644:	bf44      	itt	mi
 8006646:	2320      	movmi	r3, #32
 8006648:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800664c:	0711      	lsls	r1, r2, #28
 800664e:	bf44      	itt	mi
 8006650:	232b      	movmi	r3, #43	; 0x2b
 8006652:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006656:	f89a 3000 	ldrb.w	r3, [sl]
 800665a:	2b2a      	cmp	r3, #42	; 0x2a
 800665c:	d015      	beq.n	800668a <_svfiprintf_r+0xf6>
 800665e:	9a07      	ldr	r2, [sp, #28]
 8006660:	4654      	mov	r4, sl
 8006662:	2000      	movs	r0, #0
 8006664:	f04f 0c0a 	mov.w	ip, #10
 8006668:	4621      	mov	r1, r4
 800666a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800666e:	3b30      	subs	r3, #48	; 0x30
 8006670:	2b09      	cmp	r3, #9
 8006672:	d94d      	bls.n	8006710 <_svfiprintf_r+0x17c>
 8006674:	b1b0      	cbz	r0, 80066a4 <_svfiprintf_r+0x110>
 8006676:	9207      	str	r2, [sp, #28]
 8006678:	e014      	b.n	80066a4 <_svfiprintf_r+0x110>
 800667a:	eba0 0308 	sub.w	r3, r0, r8
 800667e:	fa09 f303 	lsl.w	r3, r9, r3
 8006682:	4313      	orrs	r3, r2
 8006684:	9304      	str	r3, [sp, #16]
 8006686:	46a2      	mov	sl, r4
 8006688:	e7d2      	b.n	8006630 <_svfiprintf_r+0x9c>
 800668a:	9b03      	ldr	r3, [sp, #12]
 800668c:	1d19      	adds	r1, r3, #4
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	9103      	str	r1, [sp, #12]
 8006692:	2b00      	cmp	r3, #0
 8006694:	bfbb      	ittet	lt
 8006696:	425b      	neglt	r3, r3
 8006698:	f042 0202 	orrlt.w	r2, r2, #2
 800669c:	9307      	strge	r3, [sp, #28]
 800669e:	9307      	strlt	r3, [sp, #28]
 80066a0:	bfb8      	it	lt
 80066a2:	9204      	strlt	r2, [sp, #16]
 80066a4:	7823      	ldrb	r3, [r4, #0]
 80066a6:	2b2e      	cmp	r3, #46	; 0x2e
 80066a8:	d10c      	bne.n	80066c4 <_svfiprintf_r+0x130>
 80066aa:	7863      	ldrb	r3, [r4, #1]
 80066ac:	2b2a      	cmp	r3, #42	; 0x2a
 80066ae:	d134      	bne.n	800671a <_svfiprintf_r+0x186>
 80066b0:	9b03      	ldr	r3, [sp, #12]
 80066b2:	1d1a      	adds	r2, r3, #4
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	9203      	str	r2, [sp, #12]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	bfb8      	it	lt
 80066bc:	f04f 33ff 	movlt.w	r3, #4294967295
 80066c0:	3402      	adds	r4, #2
 80066c2:	9305      	str	r3, [sp, #20]
 80066c4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800678c <_svfiprintf_r+0x1f8>
 80066c8:	7821      	ldrb	r1, [r4, #0]
 80066ca:	2203      	movs	r2, #3
 80066cc:	4650      	mov	r0, sl
 80066ce:	f7f9 fd97 	bl	8000200 <memchr>
 80066d2:	b138      	cbz	r0, 80066e4 <_svfiprintf_r+0x150>
 80066d4:	9b04      	ldr	r3, [sp, #16]
 80066d6:	eba0 000a 	sub.w	r0, r0, sl
 80066da:	2240      	movs	r2, #64	; 0x40
 80066dc:	4082      	lsls	r2, r0
 80066de:	4313      	orrs	r3, r2
 80066e0:	3401      	adds	r4, #1
 80066e2:	9304      	str	r3, [sp, #16]
 80066e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066e8:	4825      	ldr	r0, [pc, #148]	; (8006780 <_svfiprintf_r+0x1ec>)
 80066ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80066ee:	2206      	movs	r2, #6
 80066f0:	f7f9 fd86 	bl	8000200 <memchr>
 80066f4:	2800      	cmp	r0, #0
 80066f6:	d038      	beq.n	800676a <_svfiprintf_r+0x1d6>
 80066f8:	4b22      	ldr	r3, [pc, #136]	; (8006784 <_svfiprintf_r+0x1f0>)
 80066fa:	bb1b      	cbnz	r3, 8006744 <_svfiprintf_r+0x1b0>
 80066fc:	9b03      	ldr	r3, [sp, #12]
 80066fe:	3307      	adds	r3, #7
 8006700:	f023 0307 	bic.w	r3, r3, #7
 8006704:	3308      	adds	r3, #8
 8006706:	9303      	str	r3, [sp, #12]
 8006708:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800670a:	4433      	add	r3, r6
 800670c:	9309      	str	r3, [sp, #36]	; 0x24
 800670e:	e768      	b.n	80065e2 <_svfiprintf_r+0x4e>
 8006710:	fb0c 3202 	mla	r2, ip, r2, r3
 8006714:	460c      	mov	r4, r1
 8006716:	2001      	movs	r0, #1
 8006718:	e7a6      	b.n	8006668 <_svfiprintf_r+0xd4>
 800671a:	2300      	movs	r3, #0
 800671c:	3401      	adds	r4, #1
 800671e:	9305      	str	r3, [sp, #20]
 8006720:	4619      	mov	r1, r3
 8006722:	f04f 0c0a 	mov.w	ip, #10
 8006726:	4620      	mov	r0, r4
 8006728:	f810 2b01 	ldrb.w	r2, [r0], #1
 800672c:	3a30      	subs	r2, #48	; 0x30
 800672e:	2a09      	cmp	r2, #9
 8006730:	d903      	bls.n	800673a <_svfiprintf_r+0x1a6>
 8006732:	2b00      	cmp	r3, #0
 8006734:	d0c6      	beq.n	80066c4 <_svfiprintf_r+0x130>
 8006736:	9105      	str	r1, [sp, #20]
 8006738:	e7c4      	b.n	80066c4 <_svfiprintf_r+0x130>
 800673a:	fb0c 2101 	mla	r1, ip, r1, r2
 800673e:	4604      	mov	r4, r0
 8006740:	2301      	movs	r3, #1
 8006742:	e7f0      	b.n	8006726 <_svfiprintf_r+0x192>
 8006744:	ab03      	add	r3, sp, #12
 8006746:	9300      	str	r3, [sp, #0]
 8006748:	462a      	mov	r2, r5
 800674a:	4b0f      	ldr	r3, [pc, #60]	; (8006788 <_svfiprintf_r+0x1f4>)
 800674c:	a904      	add	r1, sp, #16
 800674e:	4638      	mov	r0, r7
 8006750:	f3af 8000 	nop.w
 8006754:	1c42      	adds	r2, r0, #1
 8006756:	4606      	mov	r6, r0
 8006758:	d1d6      	bne.n	8006708 <_svfiprintf_r+0x174>
 800675a:	89ab      	ldrh	r3, [r5, #12]
 800675c:	065b      	lsls	r3, r3, #25
 800675e:	f53f af2d 	bmi.w	80065bc <_svfiprintf_r+0x28>
 8006762:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006764:	b01d      	add	sp, #116	; 0x74
 8006766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800676a:	ab03      	add	r3, sp, #12
 800676c:	9300      	str	r3, [sp, #0]
 800676e:	462a      	mov	r2, r5
 8006770:	4b05      	ldr	r3, [pc, #20]	; (8006788 <_svfiprintf_r+0x1f4>)
 8006772:	a904      	add	r1, sp, #16
 8006774:	4638      	mov	r0, r7
 8006776:	f000 f9bd 	bl	8006af4 <_printf_i>
 800677a:	e7eb      	b.n	8006754 <_svfiprintf_r+0x1c0>
 800677c:	08009cc8 	.word	0x08009cc8
 8006780:	08009cd2 	.word	0x08009cd2
 8006784:	00000000 	.word	0x00000000
 8006788:	080064e1 	.word	0x080064e1
 800678c:	08009cce 	.word	0x08009cce

08006790 <__sfputc_r>:
 8006790:	6893      	ldr	r3, [r2, #8]
 8006792:	3b01      	subs	r3, #1
 8006794:	2b00      	cmp	r3, #0
 8006796:	b410      	push	{r4}
 8006798:	6093      	str	r3, [r2, #8]
 800679a:	da08      	bge.n	80067ae <__sfputc_r+0x1e>
 800679c:	6994      	ldr	r4, [r2, #24]
 800679e:	42a3      	cmp	r3, r4
 80067a0:	db01      	blt.n	80067a6 <__sfputc_r+0x16>
 80067a2:	290a      	cmp	r1, #10
 80067a4:	d103      	bne.n	80067ae <__sfputc_r+0x1e>
 80067a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80067aa:	f7ff bc26 	b.w	8005ffa <__swbuf_r>
 80067ae:	6813      	ldr	r3, [r2, #0]
 80067b0:	1c58      	adds	r0, r3, #1
 80067b2:	6010      	str	r0, [r2, #0]
 80067b4:	7019      	strb	r1, [r3, #0]
 80067b6:	4608      	mov	r0, r1
 80067b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80067bc:	4770      	bx	lr

080067be <__sfputs_r>:
 80067be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067c0:	4606      	mov	r6, r0
 80067c2:	460f      	mov	r7, r1
 80067c4:	4614      	mov	r4, r2
 80067c6:	18d5      	adds	r5, r2, r3
 80067c8:	42ac      	cmp	r4, r5
 80067ca:	d101      	bne.n	80067d0 <__sfputs_r+0x12>
 80067cc:	2000      	movs	r0, #0
 80067ce:	e007      	b.n	80067e0 <__sfputs_r+0x22>
 80067d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067d4:	463a      	mov	r2, r7
 80067d6:	4630      	mov	r0, r6
 80067d8:	f7ff ffda 	bl	8006790 <__sfputc_r>
 80067dc:	1c43      	adds	r3, r0, #1
 80067de:	d1f3      	bne.n	80067c8 <__sfputs_r+0xa>
 80067e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080067e4 <_vfiprintf_r>:
 80067e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067e8:	460d      	mov	r5, r1
 80067ea:	b09d      	sub	sp, #116	; 0x74
 80067ec:	4614      	mov	r4, r2
 80067ee:	4698      	mov	r8, r3
 80067f0:	4606      	mov	r6, r0
 80067f2:	b118      	cbz	r0, 80067fc <_vfiprintf_r+0x18>
 80067f4:	6a03      	ldr	r3, [r0, #32]
 80067f6:	b90b      	cbnz	r3, 80067fc <_vfiprintf_r+0x18>
 80067f8:	f7ff faf8 	bl	8005dec <__sinit>
 80067fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80067fe:	07d9      	lsls	r1, r3, #31
 8006800:	d405      	bmi.n	800680e <_vfiprintf_r+0x2a>
 8006802:	89ab      	ldrh	r3, [r5, #12]
 8006804:	059a      	lsls	r2, r3, #22
 8006806:	d402      	bmi.n	800680e <_vfiprintf_r+0x2a>
 8006808:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800680a:	f7ff fd59 	bl	80062c0 <__retarget_lock_acquire_recursive>
 800680e:	89ab      	ldrh	r3, [r5, #12]
 8006810:	071b      	lsls	r3, r3, #28
 8006812:	d501      	bpl.n	8006818 <_vfiprintf_r+0x34>
 8006814:	692b      	ldr	r3, [r5, #16]
 8006816:	b99b      	cbnz	r3, 8006840 <_vfiprintf_r+0x5c>
 8006818:	4629      	mov	r1, r5
 800681a:	4630      	mov	r0, r6
 800681c:	f7ff fc2a 	bl	8006074 <__swsetup_r>
 8006820:	b170      	cbz	r0, 8006840 <_vfiprintf_r+0x5c>
 8006822:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006824:	07dc      	lsls	r4, r3, #31
 8006826:	d504      	bpl.n	8006832 <_vfiprintf_r+0x4e>
 8006828:	f04f 30ff 	mov.w	r0, #4294967295
 800682c:	b01d      	add	sp, #116	; 0x74
 800682e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006832:	89ab      	ldrh	r3, [r5, #12]
 8006834:	0598      	lsls	r0, r3, #22
 8006836:	d4f7      	bmi.n	8006828 <_vfiprintf_r+0x44>
 8006838:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800683a:	f7ff fd42 	bl	80062c2 <__retarget_lock_release_recursive>
 800683e:	e7f3      	b.n	8006828 <_vfiprintf_r+0x44>
 8006840:	2300      	movs	r3, #0
 8006842:	9309      	str	r3, [sp, #36]	; 0x24
 8006844:	2320      	movs	r3, #32
 8006846:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800684a:	f8cd 800c 	str.w	r8, [sp, #12]
 800684e:	2330      	movs	r3, #48	; 0x30
 8006850:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006a04 <_vfiprintf_r+0x220>
 8006854:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006858:	f04f 0901 	mov.w	r9, #1
 800685c:	4623      	mov	r3, r4
 800685e:	469a      	mov	sl, r3
 8006860:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006864:	b10a      	cbz	r2, 800686a <_vfiprintf_r+0x86>
 8006866:	2a25      	cmp	r2, #37	; 0x25
 8006868:	d1f9      	bne.n	800685e <_vfiprintf_r+0x7a>
 800686a:	ebba 0b04 	subs.w	fp, sl, r4
 800686e:	d00b      	beq.n	8006888 <_vfiprintf_r+0xa4>
 8006870:	465b      	mov	r3, fp
 8006872:	4622      	mov	r2, r4
 8006874:	4629      	mov	r1, r5
 8006876:	4630      	mov	r0, r6
 8006878:	f7ff ffa1 	bl	80067be <__sfputs_r>
 800687c:	3001      	adds	r0, #1
 800687e:	f000 80a9 	beq.w	80069d4 <_vfiprintf_r+0x1f0>
 8006882:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006884:	445a      	add	r2, fp
 8006886:	9209      	str	r2, [sp, #36]	; 0x24
 8006888:	f89a 3000 	ldrb.w	r3, [sl]
 800688c:	2b00      	cmp	r3, #0
 800688e:	f000 80a1 	beq.w	80069d4 <_vfiprintf_r+0x1f0>
 8006892:	2300      	movs	r3, #0
 8006894:	f04f 32ff 	mov.w	r2, #4294967295
 8006898:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800689c:	f10a 0a01 	add.w	sl, sl, #1
 80068a0:	9304      	str	r3, [sp, #16]
 80068a2:	9307      	str	r3, [sp, #28]
 80068a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80068a8:	931a      	str	r3, [sp, #104]	; 0x68
 80068aa:	4654      	mov	r4, sl
 80068ac:	2205      	movs	r2, #5
 80068ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068b2:	4854      	ldr	r0, [pc, #336]	; (8006a04 <_vfiprintf_r+0x220>)
 80068b4:	f7f9 fca4 	bl	8000200 <memchr>
 80068b8:	9a04      	ldr	r2, [sp, #16]
 80068ba:	b9d8      	cbnz	r0, 80068f4 <_vfiprintf_r+0x110>
 80068bc:	06d1      	lsls	r1, r2, #27
 80068be:	bf44      	itt	mi
 80068c0:	2320      	movmi	r3, #32
 80068c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80068c6:	0713      	lsls	r3, r2, #28
 80068c8:	bf44      	itt	mi
 80068ca:	232b      	movmi	r3, #43	; 0x2b
 80068cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80068d0:	f89a 3000 	ldrb.w	r3, [sl]
 80068d4:	2b2a      	cmp	r3, #42	; 0x2a
 80068d6:	d015      	beq.n	8006904 <_vfiprintf_r+0x120>
 80068d8:	9a07      	ldr	r2, [sp, #28]
 80068da:	4654      	mov	r4, sl
 80068dc:	2000      	movs	r0, #0
 80068de:	f04f 0c0a 	mov.w	ip, #10
 80068e2:	4621      	mov	r1, r4
 80068e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80068e8:	3b30      	subs	r3, #48	; 0x30
 80068ea:	2b09      	cmp	r3, #9
 80068ec:	d94d      	bls.n	800698a <_vfiprintf_r+0x1a6>
 80068ee:	b1b0      	cbz	r0, 800691e <_vfiprintf_r+0x13a>
 80068f0:	9207      	str	r2, [sp, #28]
 80068f2:	e014      	b.n	800691e <_vfiprintf_r+0x13a>
 80068f4:	eba0 0308 	sub.w	r3, r0, r8
 80068f8:	fa09 f303 	lsl.w	r3, r9, r3
 80068fc:	4313      	orrs	r3, r2
 80068fe:	9304      	str	r3, [sp, #16]
 8006900:	46a2      	mov	sl, r4
 8006902:	e7d2      	b.n	80068aa <_vfiprintf_r+0xc6>
 8006904:	9b03      	ldr	r3, [sp, #12]
 8006906:	1d19      	adds	r1, r3, #4
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	9103      	str	r1, [sp, #12]
 800690c:	2b00      	cmp	r3, #0
 800690e:	bfbb      	ittet	lt
 8006910:	425b      	neglt	r3, r3
 8006912:	f042 0202 	orrlt.w	r2, r2, #2
 8006916:	9307      	strge	r3, [sp, #28]
 8006918:	9307      	strlt	r3, [sp, #28]
 800691a:	bfb8      	it	lt
 800691c:	9204      	strlt	r2, [sp, #16]
 800691e:	7823      	ldrb	r3, [r4, #0]
 8006920:	2b2e      	cmp	r3, #46	; 0x2e
 8006922:	d10c      	bne.n	800693e <_vfiprintf_r+0x15a>
 8006924:	7863      	ldrb	r3, [r4, #1]
 8006926:	2b2a      	cmp	r3, #42	; 0x2a
 8006928:	d134      	bne.n	8006994 <_vfiprintf_r+0x1b0>
 800692a:	9b03      	ldr	r3, [sp, #12]
 800692c:	1d1a      	adds	r2, r3, #4
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	9203      	str	r2, [sp, #12]
 8006932:	2b00      	cmp	r3, #0
 8006934:	bfb8      	it	lt
 8006936:	f04f 33ff 	movlt.w	r3, #4294967295
 800693a:	3402      	adds	r4, #2
 800693c:	9305      	str	r3, [sp, #20]
 800693e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006a14 <_vfiprintf_r+0x230>
 8006942:	7821      	ldrb	r1, [r4, #0]
 8006944:	2203      	movs	r2, #3
 8006946:	4650      	mov	r0, sl
 8006948:	f7f9 fc5a 	bl	8000200 <memchr>
 800694c:	b138      	cbz	r0, 800695e <_vfiprintf_r+0x17a>
 800694e:	9b04      	ldr	r3, [sp, #16]
 8006950:	eba0 000a 	sub.w	r0, r0, sl
 8006954:	2240      	movs	r2, #64	; 0x40
 8006956:	4082      	lsls	r2, r0
 8006958:	4313      	orrs	r3, r2
 800695a:	3401      	adds	r4, #1
 800695c:	9304      	str	r3, [sp, #16]
 800695e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006962:	4829      	ldr	r0, [pc, #164]	; (8006a08 <_vfiprintf_r+0x224>)
 8006964:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006968:	2206      	movs	r2, #6
 800696a:	f7f9 fc49 	bl	8000200 <memchr>
 800696e:	2800      	cmp	r0, #0
 8006970:	d03f      	beq.n	80069f2 <_vfiprintf_r+0x20e>
 8006972:	4b26      	ldr	r3, [pc, #152]	; (8006a0c <_vfiprintf_r+0x228>)
 8006974:	bb1b      	cbnz	r3, 80069be <_vfiprintf_r+0x1da>
 8006976:	9b03      	ldr	r3, [sp, #12]
 8006978:	3307      	adds	r3, #7
 800697a:	f023 0307 	bic.w	r3, r3, #7
 800697e:	3308      	adds	r3, #8
 8006980:	9303      	str	r3, [sp, #12]
 8006982:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006984:	443b      	add	r3, r7
 8006986:	9309      	str	r3, [sp, #36]	; 0x24
 8006988:	e768      	b.n	800685c <_vfiprintf_r+0x78>
 800698a:	fb0c 3202 	mla	r2, ip, r2, r3
 800698e:	460c      	mov	r4, r1
 8006990:	2001      	movs	r0, #1
 8006992:	e7a6      	b.n	80068e2 <_vfiprintf_r+0xfe>
 8006994:	2300      	movs	r3, #0
 8006996:	3401      	adds	r4, #1
 8006998:	9305      	str	r3, [sp, #20]
 800699a:	4619      	mov	r1, r3
 800699c:	f04f 0c0a 	mov.w	ip, #10
 80069a0:	4620      	mov	r0, r4
 80069a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80069a6:	3a30      	subs	r2, #48	; 0x30
 80069a8:	2a09      	cmp	r2, #9
 80069aa:	d903      	bls.n	80069b4 <_vfiprintf_r+0x1d0>
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d0c6      	beq.n	800693e <_vfiprintf_r+0x15a>
 80069b0:	9105      	str	r1, [sp, #20]
 80069b2:	e7c4      	b.n	800693e <_vfiprintf_r+0x15a>
 80069b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80069b8:	4604      	mov	r4, r0
 80069ba:	2301      	movs	r3, #1
 80069bc:	e7f0      	b.n	80069a0 <_vfiprintf_r+0x1bc>
 80069be:	ab03      	add	r3, sp, #12
 80069c0:	9300      	str	r3, [sp, #0]
 80069c2:	462a      	mov	r2, r5
 80069c4:	4b12      	ldr	r3, [pc, #72]	; (8006a10 <_vfiprintf_r+0x22c>)
 80069c6:	a904      	add	r1, sp, #16
 80069c8:	4630      	mov	r0, r6
 80069ca:	f3af 8000 	nop.w
 80069ce:	4607      	mov	r7, r0
 80069d0:	1c78      	adds	r0, r7, #1
 80069d2:	d1d6      	bne.n	8006982 <_vfiprintf_r+0x19e>
 80069d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80069d6:	07d9      	lsls	r1, r3, #31
 80069d8:	d405      	bmi.n	80069e6 <_vfiprintf_r+0x202>
 80069da:	89ab      	ldrh	r3, [r5, #12]
 80069dc:	059a      	lsls	r2, r3, #22
 80069de:	d402      	bmi.n	80069e6 <_vfiprintf_r+0x202>
 80069e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80069e2:	f7ff fc6e 	bl	80062c2 <__retarget_lock_release_recursive>
 80069e6:	89ab      	ldrh	r3, [r5, #12]
 80069e8:	065b      	lsls	r3, r3, #25
 80069ea:	f53f af1d 	bmi.w	8006828 <_vfiprintf_r+0x44>
 80069ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 80069f0:	e71c      	b.n	800682c <_vfiprintf_r+0x48>
 80069f2:	ab03      	add	r3, sp, #12
 80069f4:	9300      	str	r3, [sp, #0]
 80069f6:	462a      	mov	r2, r5
 80069f8:	4b05      	ldr	r3, [pc, #20]	; (8006a10 <_vfiprintf_r+0x22c>)
 80069fa:	a904      	add	r1, sp, #16
 80069fc:	4630      	mov	r0, r6
 80069fe:	f000 f879 	bl	8006af4 <_printf_i>
 8006a02:	e7e4      	b.n	80069ce <_vfiprintf_r+0x1ea>
 8006a04:	08009cc8 	.word	0x08009cc8
 8006a08:	08009cd2 	.word	0x08009cd2
 8006a0c:	00000000 	.word	0x00000000
 8006a10:	080067bf 	.word	0x080067bf
 8006a14:	08009cce 	.word	0x08009cce

08006a18 <_printf_common>:
 8006a18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a1c:	4616      	mov	r6, r2
 8006a1e:	4699      	mov	r9, r3
 8006a20:	688a      	ldr	r2, [r1, #8]
 8006a22:	690b      	ldr	r3, [r1, #16]
 8006a24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	bfb8      	it	lt
 8006a2c:	4613      	movlt	r3, r2
 8006a2e:	6033      	str	r3, [r6, #0]
 8006a30:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006a34:	4607      	mov	r7, r0
 8006a36:	460c      	mov	r4, r1
 8006a38:	b10a      	cbz	r2, 8006a3e <_printf_common+0x26>
 8006a3a:	3301      	adds	r3, #1
 8006a3c:	6033      	str	r3, [r6, #0]
 8006a3e:	6823      	ldr	r3, [r4, #0]
 8006a40:	0699      	lsls	r1, r3, #26
 8006a42:	bf42      	ittt	mi
 8006a44:	6833      	ldrmi	r3, [r6, #0]
 8006a46:	3302      	addmi	r3, #2
 8006a48:	6033      	strmi	r3, [r6, #0]
 8006a4a:	6825      	ldr	r5, [r4, #0]
 8006a4c:	f015 0506 	ands.w	r5, r5, #6
 8006a50:	d106      	bne.n	8006a60 <_printf_common+0x48>
 8006a52:	f104 0a19 	add.w	sl, r4, #25
 8006a56:	68e3      	ldr	r3, [r4, #12]
 8006a58:	6832      	ldr	r2, [r6, #0]
 8006a5a:	1a9b      	subs	r3, r3, r2
 8006a5c:	42ab      	cmp	r3, r5
 8006a5e:	dc26      	bgt.n	8006aae <_printf_common+0x96>
 8006a60:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006a64:	1e13      	subs	r3, r2, #0
 8006a66:	6822      	ldr	r2, [r4, #0]
 8006a68:	bf18      	it	ne
 8006a6a:	2301      	movne	r3, #1
 8006a6c:	0692      	lsls	r2, r2, #26
 8006a6e:	d42b      	bmi.n	8006ac8 <_printf_common+0xb0>
 8006a70:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006a74:	4649      	mov	r1, r9
 8006a76:	4638      	mov	r0, r7
 8006a78:	47c0      	blx	r8
 8006a7a:	3001      	adds	r0, #1
 8006a7c:	d01e      	beq.n	8006abc <_printf_common+0xa4>
 8006a7e:	6823      	ldr	r3, [r4, #0]
 8006a80:	6922      	ldr	r2, [r4, #16]
 8006a82:	f003 0306 	and.w	r3, r3, #6
 8006a86:	2b04      	cmp	r3, #4
 8006a88:	bf02      	ittt	eq
 8006a8a:	68e5      	ldreq	r5, [r4, #12]
 8006a8c:	6833      	ldreq	r3, [r6, #0]
 8006a8e:	1aed      	subeq	r5, r5, r3
 8006a90:	68a3      	ldr	r3, [r4, #8]
 8006a92:	bf0c      	ite	eq
 8006a94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a98:	2500      	movne	r5, #0
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	bfc4      	itt	gt
 8006a9e:	1a9b      	subgt	r3, r3, r2
 8006aa0:	18ed      	addgt	r5, r5, r3
 8006aa2:	2600      	movs	r6, #0
 8006aa4:	341a      	adds	r4, #26
 8006aa6:	42b5      	cmp	r5, r6
 8006aa8:	d11a      	bne.n	8006ae0 <_printf_common+0xc8>
 8006aaa:	2000      	movs	r0, #0
 8006aac:	e008      	b.n	8006ac0 <_printf_common+0xa8>
 8006aae:	2301      	movs	r3, #1
 8006ab0:	4652      	mov	r2, sl
 8006ab2:	4649      	mov	r1, r9
 8006ab4:	4638      	mov	r0, r7
 8006ab6:	47c0      	blx	r8
 8006ab8:	3001      	adds	r0, #1
 8006aba:	d103      	bne.n	8006ac4 <_printf_common+0xac>
 8006abc:	f04f 30ff 	mov.w	r0, #4294967295
 8006ac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ac4:	3501      	adds	r5, #1
 8006ac6:	e7c6      	b.n	8006a56 <_printf_common+0x3e>
 8006ac8:	18e1      	adds	r1, r4, r3
 8006aca:	1c5a      	adds	r2, r3, #1
 8006acc:	2030      	movs	r0, #48	; 0x30
 8006ace:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006ad2:	4422      	add	r2, r4
 8006ad4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006ad8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006adc:	3302      	adds	r3, #2
 8006ade:	e7c7      	b.n	8006a70 <_printf_common+0x58>
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	4622      	mov	r2, r4
 8006ae4:	4649      	mov	r1, r9
 8006ae6:	4638      	mov	r0, r7
 8006ae8:	47c0      	blx	r8
 8006aea:	3001      	adds	r0, #1
 8006aec:	d0e6      	beq.n	8006abc <_printf_common+0xa4>
 8006aee:	3601      	adds	r6, #1
 8006af0:	e7d9      	b.n	8006aa6 <_printf_common+0x8e>
	...

08006af4 <_printf_i>:
 8006af4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006af8:	7e0f      	ldrb	r7, [r1, #24]
 8006afa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006afc:	2f78      	cmp	r7, #120	; 0x78
 8006afe:	4691      	mov	r9, r2
 8006b00:	4680      	mov	r8, r0
 8006b02:	460c      	mov	r4, r1
 8006b04:	469a      	mov	sl, r3
 8006b06:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006b0a:	d807      	bhi.n	8006b1c <_printf_i+0x28>
 8006b0c:	2f62      	cmp	r7, #98	; 0x62
 8006b0e:	d80a      	bhi.n	8006b26 <_printf_i+0x32>
 8006b10:	2f00      	cmp	r7, #0
 8006b12:	f000 80d4 	beq.w	8006cbe <_printf_i+0x1ca>
 8006b16:	2f58      	cmp	r7, #88	; 0x58
 8006b18:	f000 80c0 	beq.w	8006c9c <_printf_i+0x1a8>
 8006b1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006b24:	e03a      	b.n	8006b9c <_printf_i+0xa8>
 8006b26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006b2a:	2b15      	cmp	r3, #21
 8006b2c:	d8f6      	bhi.n	8006b1c <_printf_i+0x28>
 8006b2e:	a101      	add	r1, pc, #4	; (adr r1, 8006b34 <_printf_i+0x40>)
 8006b30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006b34:	08006b8d 	.word	0x08006b8d
 8006b38:	08006ba1 	.word	0x08006ba1
 8006b3c:	08006b1d 	.word	0x08006b1d
 8006b40:	08006b1d 	.word	0x08006b1d
 8006b44:	08006b1d 	.word	0x08006b1d
 8006b48:	08006b1d 	.word	0x08006b1d
 8006b4c:	08006ba1 	.word	0x08006ba1
 8006b50:	08006b1d 	.word	0x08006b1d
 8006b54:	08006b1d 	.word	0x08006b1d
 8006b58:	08006b1d 	.word	0x08006b1d
 8006b5c:	08006b1d 	.word	0x08006b1d
 8006b60:	08006ca5 	.word	0x08006ca5
 8006b64:	08006bcd 	.word	0x08006bcd
 8006b68:	08006c5f 	.word	0x08006c5f
 8006b6c:	08006b1d 	.word	0x08006b1d
 8006b70:	08006b1d 	.word	0x08006b1d
 8006b74:	08006cc7 	.word	0x08006cc7
 8006b78:	08006b1d 	.word	0x08006b1d
 8006b7c:	08006bcd 	.word	0x08006bcd
 8006b80:	08006b1d 	.word	0x08006b1d
 8006b84:	08006b1d 	.word	0x08006b1d
 8006b88:	08006c67 	.word	0x08006c67
 8006b8c:	682b      	ldr	r3, [r5, #0]
 8006b8e:	1d1a      	adds	r2, r3, #4
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	602a      	str	r2, [r5, #0]
 8006b94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	e09f      	b.n	8006ce0 <_printf_i+0x1ec>
 8006ba0:	6820      	ldr	r0, [r4, #0]
 8006ba2:	682b      	ldr	r3, [r5, #0]
 8006ba4:	0607      	lsls	r7, r0, #24
 8006ba6:	f103 0104 	add.w	r1, r3, #4
 8006baa:	6029      	str	r1, [r5, #0]
 8006bac:	d501      	bpl.n	8006bb2 <_printf_i+0xbe>
 8006bae:	681e      	ldr	r6, [r3, #0]
 8006bb0:	e003      	b.n	8006bba <_printf_i+0xc6>
 8006bb2:	0646      	lsls	r6, r0, #25
 8006bb4:	d5fb      	bpl.n	8006bae <_printf_i+0xba>
 8006bb6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006bba:	2e00      	cmp	r6, #0
 8006bbc:	da03      	bge.n	8006bc6 <_printf_i+0xd2>
 8006bbe:	232d      	movs	r3, #45	; 0x2d
 8006bc0:	4276      	negs	r6, r6
 8006bc2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bc6:	485a      	ldr	r0, [pc, #360]	; (8006d30 <_printf_i+0x23c>)
 8006bc8:	230a      	movs	r3, #10
 8006bca:	e012      	b.n	8006bf2 <_printf_i+0xfe>
 8006bcc:	682b      	ldr	r3, [r5, #0]
 8006bce:	6820      	ldr	r0, [r4, #0]
 8006bd0:	1d19      	adds	r1, r3, #4
 8006bd2:	6029      	str	r1, [r5, #0]
 8006bd4:	0605      	lsls	r5, r0, #24
 8006bd6:	d501      	bpl.n	8006bdc <_printf_i+0xe8>
 8006bd8:	681e      	ldr	r6, [r3, #0]
 8006bda:	e002      	b.n	8006be2 <_printf_i+0xee>
 8006bdc:	0641      	lsls	r1, r0, #25
 8006bde:	d5fb      	bpl.n	8006bd8 <_printf_i+0xe4>
 8006be0:	881e      	ldrh	r6, [r3, #0]
 8006be2:	4853      	ldr	r0, [pc, #332]	; (8006d30 <_printf_i+0x23c>)
 8006be4:	2f6f      	cmp	r7, #111	; 0x6f
 8006be6:	bf0c      	ite	eq
 8006be8:	2308      	moveq	r3, #8
 8006bea:	230a      	movne	r3, #10
 8006bec:	2100      	movs	r1, #0
 8006bee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006bf2:	6865      	ldr	r5, [r4, #4]
 8006bf4:	60a5      	str	r5, [r4, #8]
 8006bf6:	2d00      	cmp	r5, #0
 8006bf8:	bfa2      	ittt	ge
 8006bfa:	6821      	ldrge	r1, [r4, #0]
 8006bfc:	f021 0104 	bicge.w	r1, r1, #4
 8006c00:	6021      	strge	r1, [r4, #0]
 8006c02:	b90e      	cbnz	r6, 8006c08 <_printf_i+0x114>
 8006c04:	2d00      	cmp	r5, #0
 8006c06:	d04b      	beq.n	8006ca0 <_printf_i+0x1ac>
 8006c08:	4615      	mov	r5, r2
 8006c0a:	fbb6 f1f3 	udiv	r1, r6, r3
 8006c0e:	fb03 6711 	mls	r7, r3, r1, r6
 8006c12:	5dc7      	ldrb	r7, [r0, r7]
 8006c14:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006c18:	4637      	mov	r7, r6
 8006c1a:	42bb      	cmp	r3, r7
 8006c1c:	460e      	mov	r6, r1
 8006c1e:	d9f4      	bls.n	8006c0a <_printf_i+0x116>
 8006c20:	2b08      	cmp	r3, #8
 8006c22:	d10b      	bne.n	8006c3c <_printf_i+0x148>
 8006c24:	6823      	ldr	r3, [r4, #0]
 8006c26:	07de      	lsls	r6, r3, #31
 8006c28:	d508      	bpl.n	8006c3c <_printf_i+0x148>
 8006c2a:	6923      	ldr	r3, [r4, #16]
 8006c2c:	6861      	ldr	r1, [r4, #4]
 8006c2e:	4299      	cmp	r1, r3
 8006c30:	bfde      	ittt	le
 8006c32:	2330      	movle	r3, #48	; 0x30
 8006c34:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006c38:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006c3c:	1b52      	subs	r2, r2, r5
 8006c3e:	6122      	str	r2, [r4, #16]
 8006c40:	f8cd a000 	str.w	sl, [sp]
 8006c44:	464b      	mov	r3, r9
 8006c46:	aa03      	add	r2, sp, #12
 8006c48:	4621      	mov	r1, r4
 8006c4a:	4640      	mov	r0, r8
 8006c4c:	f7ff fee4 	bl	8006a18 <_printf_common>
 8006c50:	3001      	adds	r0, #1
 8006c52:	d14a      	bne.n	8006cea <_printf_i+0x1f6>
 8006c54:	f04f 30ff 	mov.w	r0, #4294967295
 8006c58:	b004      	add	sp, #16
 8006c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c5e:	6823      	ldr	r3, [r4, #0]
 8006c60:	f043 0320 	orr.w	r3, r3, #32
 8006c64:	6023      	str	r3, [r4, #0]
 8006c66:	4833      	ldr	r0, [pc, #204]	; (8006d34 <_printf_i+0x240>)
 8006c68:	2778      	movs	r7, #120	; 0x78
 8006c6a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006c6e:	6823      	ldr	r3, [r4, #0]
 8006c70:	6829      	ldr	r1, [r5, #0]
 8006c72:	061f      	lsls	r7, r3, #24
 8006c74:	f851 6b04 	ldr.w	r6, [r1], #4
 8006c78:	d402      	bmi.n	8006c80 <_printf_i+0x18c>
 8006c7a:	065f      	lsls	r7, r3, #25
 8006c7c:	bf48      	it	mi
 8006c7e:	b2b6      	uxthmi	r6, r6
 8006c80:	07df      	lsls	r7, r3, #31
 8006c82:	bf48      	it	mi
 8006c84:	f043 0320 	orrmi.w	r3, r3, #32
 8006c88:	6029      	str	r1, [r5, #0]
 8006c8a:	bf48      	it	mi
 8006c8c:	6023      	strmi	r3, [r4, #0]
 8006c8e:	b91e      	cbnz	r6, 8006c98 <_printf_i+0x1a4>
 8006c90:	6823      	ldr	r3, [r4, #0]
 8006c92:	f023 0320 	bic.w	r3, r3, #32
 8006c96:	6023      	str	r3, [r4, #0]
 8006c98:	2310      	movs	r3, #16
 8006c9a:	e7a7      	b.n	8006bec <_printf_i+0xf8>
 8006c9c:	4824      	ldr	r0, [pc, #144]	; (8006d30 <_printf_i+0x23c>)
 8006c9e:	e7e4      	b.n	8006c6a <_printf_i+0x176>
 8006ca0:	4615      	mov	r5, r2
 8006ca2:	e7bd      	b.n	8006c20 <_printf_i+0x12c>
 8006ca4:	682b      	ldr	r3, [r5, #0]
 8006ca6:	6826      	ldr	r6, [r4, #0]
 8006ca8:	6961      	ldr	r1, [r4, #20]
 8006caa:	1d18      	adds	r0, r3, #4
 8006cac:	6028      	str	r0, [r5, #0]
 8006cae:	0635      	lsls	r5, r6, #24
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	d501      	bpl.n	8006cb8 <_printf_i+0x1c4>
 8006cb4:	6019      	str	r1, [r3, #0]
 8006cb6:	e002      	b.n	8006cbe <_printf_i+0x1ca>
 8006cb8:	0670      	lsls	r0, r6, #25
 8006cba:	d5fb      	bpl.n	8006cb4 <_printf_i+0x1c0>
 8006cbc:	8019      	strh	r1, [r3, #0]
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	6123      	str	r3, [r4, #16]
 8006cc2:	4615      	mov	r5, r2
 8006cc4:	e7bc      	b.n	8006c40 <_printf_i+0x14c>
 8006cc6:	682b      	ldr	r3, [r5, #0]
 8006cc8:	1d1a      	adds	r2, r3, #4
 8006cca:	602a      	str	r2, [r5, #0]
 8006ccc:	681d      	ldr	r5, [r3, #0]
 8006cce:	6862      	ldr	r2, [r4, #4]
 8006cd0:	2100      	movs	r1, #0
 8006cd2:	4628      	mov	r0, r5
 8006cd4:	f7f9 fa94 	bl	8000200 <memchr>
 8006cd8:	b108      	cbz	r0, 8006cde <_printf_i+0x1ea>
 8006cda:	1b40      	subs	r0, r0, r5
 8006cdc:	6060      	str	r0, [r4, #4]
 8006cde:	6863      	ldr	r3, [r4, #4]
 8006ce0:	6123      	str	r3, [r4, #16]
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ce8:	e7aa      	b.n	8006c40 <_printf_i+0x14c>
 8006cea:	6923      	ldr	r3, [r4, #16]
 8006cec:	462a      	mov	r2, r5
 8006cee:	4649      	mov	r1, r9
 8006cf0:	4640      	mov	r0, r8
 8006cf2:	47d0      	blx	sl
 8006cf4:	3001      	adds	r0, #1
 8006cf6:	d0ad      	beq.n	8006c54 <_printf_i+0x160>
 8006cf8:	6823      	ldr	r3, [r4, #0]
 8006cfa:	079b      	lsls	r3, r3, #30
 8006cfc:	d413      	bmi.n	8006d26 <_printf_i+0x232>
 8006cfe:	68e0      	ldr	r0, [r4, #12]
 8006d00:	9b03      	ldr	r3, [sp, #12]
 8006d02:	4298      	cmp	r0, r3
 8006d04:	bfb8      	it	lt
 8006d06:	4618      	movlt	r0, r3
 8006d08:	e7a6      	b.n	8006c58 <_printf_i+0x164>
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	4632      	mov	r2, r6
 8006d0e:	4649      	mov	r1, r9
 8006d10:	4640      	mov	r0, r8
 8006d12:	47d0      	blx	sl
 8006d14:	3001      	adds	r0, #1
 8006d16:	d09d      	beq.n	8006c54 <_printf_i+0x160>
 8006d18:	3501      	adds	r5, #1
 8006d1a:	68e3      	ldr	r3, [r4, #12]
 8006d1c:	9903      	ldr	r1, [sp, #12]
 8006d1e:	1a5b      	subs	r3, r3, r1
 8006d20:	42ab      	cmp	r3, r5
 8006d22:	dcf2      	bgt.n	8006d0a <_printf_i+0x216>
 8006d24:	e7eb      	b.n	8006cfe <_printf_i+0x20a>
 8006d26:	2500      	movs	r5, #0
 8006d28:	f104 0619 	add.w	r6, r4, #25
 8006d2c:	e7f5      	b.n	8006d1a <_printf_i+0x226>
 8006d2e:	bf00      	nop
 8006d30:	08009cd9 	.word	0x08009cd9
 8006d34:	08009cea 	.word	0x08009cea

08006d38 <__sflush_r>:
 8006d38:	898a      	ldrh	r2, [r1, #12]
 8006d3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d3e:	4605      	mov	r5, r0
 8006d40:	0710      	lsls	r0, r2, #28
 8006d42:	460c      	mov	r4, r1
 8006d44:	d458      	bmi.n	8006df8 <__sflush_r+0xc0>
 8006d46:	684b      	ldr	r3, [r1, #4]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	dc05      	bgt.n	8006d58 <__sflush_r+0x20>
 8006d4c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	dc02      	bgt.n	8006d58 <__sflush_r+0x20>
 8006d52:	2000      	movs	r0, #0
 8006d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006d5a:	2e00      	cmp	r6, #0
 8006d5c:	d0f9      	beq.n	8006d52 <__sflush_r+0x1a>
 8006d5e:	2300      	movs	r3, #0
 8006d60:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006d64:	682f      	ldr	r7, [r5, #0]
 8006d66:	6a21      	ldr	r1, [r4, #32]
 8006d68:	602b      	str	r3, [r5, #0]
 8006d6a:	d032      	beq.n	8006dd2 <__sflush_r+0x9a>
 8006d6c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006d6e:	89a3      	ldrh	r3, [r4, #12]
 8006d70:	075a      	lsls	r2, r3, #29
 8006d72:	d505      	bpl.n	8006d80 <__sflush_r+0x48>
 8006d74:	6863      	ldr	r3, [r4, #4]
 8006d76:	1ac0      	subs	r0, r0, r3
 8006d78:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006d7a:	b10b      	cbz	r3, 8006d80 <__sflush_r+0x48>
 8006d7c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006d7e:	1ac0      	subs	r0, r0, r3
 8006d80:	2300      	movs	r3, #0
 8006d82:	4602      	mov	r2, r0
 8006d84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006d86:	6a21      	ldr	r1, [r4, #32]
 8006d88:	4628      	mov	r0, r5
 8006d8a:	47b0      	blx	r6
 8006d8c:	1c43      	adds	r3, r0, #1
 8006d8e:	89a3      	ldrh	r3, [r4, #12]
 8006d90:	d106      	bne.n	8006da0 <__sflush_r+0x68>
 8006d92:	6829      	ldr	r1, [r5, #0]
 8006d94:	291d      	cmp	r1, #29
 8006d96:	d82b      	bhi.n	8006df0 <__sflush_r+0xb8>
 8006d98:	4a29      	ldr	r2, [pc, #164]	; (8006e40 <__sflush_r+0x108>)
 8006d9a:	410a      	asrs	r2, r1
 8006d9c:	07d6      	lsls	r6, r2, #31
 8006d9e:	d427      	bmi.n	8006df0 <__sflush_r+0xb8>
 8006da0:	2200      	movs	r2, #0
 8006da2:	6062      	str	r2, [r4, #4]
 8006da4:	04d9      	lsls	r1, r3, #19
 8006da6:	6922      	ldr	r2, [r4, #16]
 8006da8:	6022      	str	r2, [r4, #0]
 8006daa:	d504      	bpl.n	8006db6 <__sflush_r+0x7e>
 8006dac:	1c42      	adds	r2, r0, #1
 8006dae:	d101      	bne.n	8006db4 <__sflush_r+0x7c>
 8006db0:	682b      	ldr	r3, [r5, #0]
 8006db2:	b903      	cbnz	r3, 8006db6 <__sflush_r+0x7e>
 8006db4:	6560      	str	r0, [r4, #84]	; 0x54
 8006db6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006db8:	602f      	str	r7, [r5, #0]
 8006dba:	2900      	cmp	r1, #0
 8006dbc:	d0c9      	beq.n	8006d52 <__sflush_r+0x1a>
 8006dbe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006dc2:	4299      	cmp	r1, r3
 8006dc4:	d002      	beq.n	8006dcc <__sflush_r+0x94>
 8006dc6:	4628      	mov	r0, r5
 8006dc8:	f7ff fa92 	bl	80062f0 <_free_r>
 8006dcc:	2000      	movs	r0, #0
 8006dce:	6360      	str	r0, [r4, #52]	; 0x34
 8006dd0:	e7c0      	b.n	8006d54 <__sflush_r+0x1c>
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	4628      	mov	r0, r5
 8006dd6:	47b0      	blx	r6
 8006dd8:	1c41      	adds	r1, r0, #1
 8006dda:	d1c8      	bne.n	8006d6e <__sflush_r+0x36>
 8006ddc:	682b      	ldr	r3, [r5, #0]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d0c5      	beq.n	8006d6e <__sflush_r+0x36>
 8006de2:	2b1d      	cmp	r3, #29
 8006de4:	d001      	beq.n	8006dea <__sflush_r+0xb2>
 8006de6:	2b16      	cmp	r3, #22
 8006de8:	d101      	bne.n	8006dee <__sflush_r+0xb6>
 8006dea:	602f      	str	r7, [r5, #0]
 8006dec:	e7b1      	b.n	8006d52 <__sflush_r+0x1a>
 8006dee:	89a3      	ldrh	r3, [r4, #12]
 8006df0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006df4:	81a3      	strh	r3, [r4, #12]
 8006df6:	e7ad      	b.n	8006d54 <__sflush_r+0x1c>
 8006df8:	690f      	ldr	r7, [r1, #16]
 8006dfa:	2f00      	cmp	r7, #0
 8006dfc:	d0a9      	beq.n	8006d52 <__sflush_r+0x1a>
 8006dfe:	0793      	lsls	r3, r2, #30
 8006e00:	680e      	ldr	r6, [r1, #0]
 8006e02:	bf08      	it	eq
 8006e04:	694b      	ldreq	r3, [r1, #20]
 8006e06:	600f      	str	r7, [r1, #0]
 8006e08:	bf18      	it	ne
 8006e0a:	2300      	movne	r3, #0
 8006e0c:	eba6 0807 	sub.w	r8, r6, r7
 8006e10:	608b      	str	r3, [r1, #8]
 8006e12:	f1b8 0f00 	cmp.w	r8, #0
 8006e16:	dd9c      	ble.n	8006d52 <__sflush_r+0x1a>
 8006e18:	6a21      	ldr	r1, [r4, #32]
 8006e1a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006e1c:	4643      	mov	r3, r8
 8006e1e:	463a      	mov	r2, r7
 8006e20:	4628      	mov	r0, r5
 8006e22:	47b0      	blx	r6
 8006e24:	2800      	cmp	r0, #0
 8006e26:	dc06      	bgt.n	8006e36 <__sflush_r+0xfe>
 8006e28:	89a3      	ldrh	r3, [r4, #12]
 8006e2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e2e:	81a3      	strh	r3, [r4, #12]
 8006e30:	f04f 30ff 	mov.w	r0, #4294967295
 8006e34:	e78e      	b.n	8006d54 <__sflush_r+0x1c>
 8006e36:	4407      	add	r7, r0
 8006e38:	eba8 0800 	sub.w	r8, r8, r0
 8006e3c:	e7e9      	b.n	8006e12 <__sflush_r+0xda>
 8006e3e:	bf00      	nop
 8006e40:	dfbffffe 	.word	0xdfbffffe

08006e44 <_fflush_r>:
 8006e44:	b538      	push	{r3, r4, r5, lr}
 8006e46:	690b      	ldr	r3, [r1, #16]
 8006e48:	4605      	mov	r5, r0
 8006e4a:	460c      	mov	r4, r1
 8006e4c:	b913      	cbnz	r3, 8006e54 <_fflush_r+0x10>
 8006e4e:	2500      	movs	r5, #0
 8006e50:	4628      	mov	r0, r5
 8006e52:	bd38      	pop	{r3, r4, r5, pc}
 8006e54:	b118      	cbz	r0, 8006e5e <_fflush_r+0x1a>
 8006e56:	6a03      	ldr	r3, [r0, #32]
 8006e58:	b90b      	cbnz	r3, 8006e5e <_fflush_r+0x1a>
 8006e5a:	f7fe ffc7 	bl	8005dec <__sinit>
 8006e5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d0f3      	beq.n	8006e4e <_fflush_r+0xa>
 8006e66:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006e68:	07d0      	lsls	r0, r2, #31
 8006e6a:	d404      	bmi.n	8006e76 <_fflush_r+0x32>
 8006e6c:	0599      	lsls	r1, r3, #22
 8006e6e:	d402      	bmi.n	8006e76 <_fflush_r+0x32>
 8006e70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e72:	f7ff fa25 	bl	80062c0 <__retarget_lock_acquire_recursive>
 8006e76:	4628      	mov	r0, r5
 8006e78:	4621      	mov	r1, r4
 8006e7a:	f7ff ff5d 	bl	8006d38 <__sflush_r>
 8006e7e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006e80:	07da      	lsls	r2, r3, #31
 8006e82:	4605      	mov	r5, r0
 8006e84:	d4e4      	bmi.n	8006e50 <_fflush_r+0xc>
 8006e86:	89a3      	ldrh	r3, [r4, #12]
 8006e88:	059b      	lsls	r3, r3, #22
 8006e8a:	d4e1      	bmi.n	8006e50 <_fflush_r+0xc>
 8006e8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e8e:	f7ff fa18 	bl	80062c2 <__retarget_lock_release_recursive>
 8006e92:	e7dd      	b.n	8006e50 <_fflush_r+0xc>

08006e94 <__swhatbuf_r>:
 8006e94:	b570      	push	{r4, r5, r6, lr}
 8006e96:	460c      	mov	r4, r1
 8006e98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e9c:	2900      	cmp	r1, #0
 8006e9e:	b096      	sub	sp, #88	; 0x58
 8006ea0:	4615      	mov	r5, r2
 8006ea2:	461e      	mov	r6, r3
 8006ea4:	da0d      	bge.n	8006ec2 <__swhatbuf_r+0x2e>
 8006ea6:	89a3      	ldrh	r3, [r4, #12]
 8006ea8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006eac:	f04f 0100 	mov.w	r1, #0
 8006eb0:	bf0c      	ite	eq
 8006eb2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006eb6:	2340      	movne	r3, #64	; 0x40
 8006eb8:	2000      	movs	r0, #0
 8006eba:	6031      	str	r1, [r6, #0]
 8006ebc:	602b      	str	r3, [r5, #0]
 8006ebe:	b016      	add	sp, #88	; 0x58
 8006ec0:	bd70      	pop	{r4, r5, r6, pc}
 8006ec2:	466a      	mov	r2, sp
 8006ec4:	f000 f862 	bl	8006f8c <_fstat_r>
 8006ec8:	2800      	cmp	r0, #0
 8006eca:	dbec      	blt.n	8006ea6 <__swhatbuf_r+0x12>
 8006ecc:	9901      	ldr	r1, [sp, #4]
 8006ece:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006ed2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006ed6:	4259      	negs	r1, r3
 8006ed8:	4159      	adcs	r1, r3
 8006eda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ede:	e7eb      	b.n	8006eb8 <__swhatbuf_r+0x24>

08006ee0 <__smakebuf_r>:
 8006ee0:	898b      	ldrh	r3, [r1, #12]
 8006ee2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006ee4:	079d      	lsls	r5, r3, #30
 8006ee6:	4606      	mov	r6, r0
 8006ee8:	460c      	mov	r4, r1
 8006eea:	d507      	bpl.n	8006efc <__smakebuf_r+0x1c>
 8006eec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006ef0:	6023      	str	r3, [r4, #0]
 8006ef2:	6123      	str	r3, [r4, #16]
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	6163      	str	r3, [r4, #20]
 8006ef8:	b002      	add	sp, #8
 8006efa:	bd70      	pop	{r4, r5, r6, pc}
 8006efc:	ab01      	add	r3, sp, #4
 8006efe:	466a      	mov	r2, sp
 8006f00:	f7ff ffc8 	bl	8006e94 <__swhatbuf_r>
 8006f04:	9900      	ldr	r1, [sp, #0]
 8006f06:	4605      	mov	r5, r0
 8006f08:	4630      	mov	r0, r6
 8006f0a:	f7ff fa5d 	bl	80063c8 <_malloc_r>
 8006f0e:	b948      	cbnz	r0, 8006f24 <__smakebuf_r+0x44>
 8006f10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f14:	059a      	lsls	r2, r3, #22
 8006f16:	d4ef      	bmi.n	8006ef8 <__smakebuf_r+0x18>
 8006f18:	f023 0303 	bic.w	r3, r3, #3
 8006f1c:	f043 0302 	orr.w	r3, r3, #2
 8006f20:	81a3      	strh	r3, [r4, #12]
 8006f22:	e7e3      	b.n	8006eec <__smakebuf_r+0xc>
 8006f24:	89a3      	ldrh	r3, [r4, #12]
 8006f26:	6020      	str	r0, [r4, #0]
 8006f28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f2c:	81a3      	strh	r3, [r4, #12]
 8006f2e:	9b00      	ldr	r3, [sp, #0]
 8006f30:	6163      	str	r3, [r4, #20]
 8006f32:	9b01      	ldr	r3, [sp, #4]
 8006f34:	6120      	str	r0, [r4, #16]
 8006f36:	b15b      	cbz	r3, 8006f50 <__smakebuf_r+0x70>
 8006f38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f3c:	4630      	mov	r0, r6
 8006f3e:	f000 f837 	bl	8006fb0 <_isatty_r>
 8006f42:	b128      	cbz	r0, 8006f50 <__smakebuf_r+0x70>
 8006f44:	89a3      	ldrh	r3, [r4, #12]
 8006f46:	f023 0303 	bic.w	r3, r3, #3
 8006f4a:	f043 0301 	orr.w	r3, r3, #1
 8006f4e:	81a3      	strh	r3, [r4, #12]
 8006f50:	89a3      	ldrh	r3, [r4, #12]
 8006f52:	431d      	orrs	r5, r3
 8006f54:	81a5      	strh	r5, [r4, #12]
 8006f56:	e7cf      	b.n	8006ef8 <__smakebuf_r+0x18>

08006f58 <memmove>:
 8006f58:	4288      	cmp	r0, r1
 8006f5a:	b510      	push	{r4, lr}
 8006f5c:	eb01 0402 	add.w	r4, r1, r2
 8006f60:	d902      	bls.n	8006f68 <memmove+0x10>
 8006f62:	4284      	cmp	r4, r0
 8006f64:	4623      	mov	r3, r4
 8006f66:	d807      	bhi.n	8006f78 <memmove+0x20>
 8006f68:	1e43      	subs	r3, r0, #1
 8006f6a:	42a1      	cmp	r1, r4
 8006f6c:	d008      	beq.n	8006f80 <memmove+0x28>
 8006f6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f72:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006f76:	e7f8      	b.n	8006f6a <memmove+0x12>
 8006f78:	4402      	add	r2, r0
 8006f7a:	4601      	mov	r1, r0
 8006f7c:	428a      	cmp	r2, r1
 8006f7e:	d100      	bne.n	8006f82 <memmove+0x2a>
 8006f80:	bd10      	pop	{r4, pc}
 8006f82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006f86:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006f8a:	e7f7      	b.n	8006f7c <memmove+0x24>

08006f8c <_fstat_r>:
 8006f8c:	b538      	push	{r3, r4, r5, lr}
 8006f8e:	4d07      	ldr	r5, [pc, #28]	; (8006fac <_fstat_r+0x20>)
 8006f90:	2300      	movs	r3, #0
 8006f92:	4604      	mov	r4, r0
 8006f94:	4608      	mov	r0, r1
 8006f96:	4611      	mov	r1, r2
 8006f98:	602b      	str	r3, [r5, #0]
 8006f9a:	f7fa fa4a 	bl	8001432 <_fstat>
 8006f9e:	1c43      	adds	r3, r0, #1
 8006fa0:	d102      	bne.n	8006fa8 <_fstat_r+0x1c>
 8006fa2:	682b      	ldr	r3, [r5, #0]
 8006fa4:	b103      	cbz	r3, 8006fa8 <_fstat_r+0x1c>
 8006fa6:	6023      	str	r3, [r4, #0]
 8006fa8:	bd38      	pop	{r3, r4, r5, pc}
 8006faa:	bf00      	nop
 8006fac:	20004e10 	.word	0x20004e10

08006fb0 <_isatty_r>:
 8006fb0:	b538      	push	{r3, r4, r5, lr}
 8006fb2:	4d06      	ldr	r5, [pc, #24]	; (8006fcc <_isatty_r+0x1c>)
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	4604      	mov	r4, r0
 8006fb8:	4608      	mov	r0, r1
 8006fba:	602b      	str	r3, [r5, #0]
 8006fbc:	f7fa fa3e 	bl	800143c <_isatty>
 8006fc0:	1c43      	adds	r3, r0, #1
 8006fc2:	d102      	bne.n	8006fca <_isatty_r+0x1a>
 8006fc4:	682b      	ldr	r3, [r5, #0]
 8006fc6:	b103      	cbz	r3, 8006fca <_isatty_r+0x1a>
 8006fc8:	6023      	str	r3, [r4, #0]
 8006fca:	bd38      	pop	{r3, r4, r5, pc}
 8006fcc:	20004e10 	.word	0x20004e10

08006fd0 <_sbrk_r>:
 8006fd0:	b538      	push	{r3, r4, r5, lr}
 8006fd2:	4d06      	ldr	r5, [pc, #24]	; (8006fec <_sbrk_r+0x1c>)
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	4604      	mov	r4, r0
 8006fd8:	4608      	mov	r0, r1
 8006fda:	602b      	str	r3, [r5, #0]
 8006fdc:	f7fa fa32 	bl	8001444 <_sbrk>
 8006fe0:	1c43      	adds	r3, r0, #1
 8006fe2:	d102      	bne.n	8006fea <_sbrk_r+0x1a>
 8006fe4:	682b      	ldr	r3, [r5, #0]
 8006fe6:	b103      	cbz	r3, 8006fea <_sbrk_r+0x1a>
 8006fe8:	6023      	str	r3, [r4, #0]
 8006fea:	bd38      	pop	{r3, r4, r5, pc}
 8006fec:	20004e10 	.word	0x20004e10

08006ff0 <_realloc_r>:
 8006ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ff4:	4680      	mov	r8, r0
 8006ff6:	4614      	mov	r4, r2
 8006ff8:	460e      	mov	r6, r1
 8006ffa:	b921      	cbnz	r1, 8007006 <_realloc_r+0x16>
 8006ffc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007000:	4611      	mov	r1, r2
 8007002:	f7ff b9e1 	b.w	80063c8 <_malloc_r>
 8007006:	b92a      	cbnz	r2, 8007014 <_realloc_r+0x24>
 8007008:	f7ff f972 	bl	80062f0 <_free_r>
 800700c:	4625      	mov	r5, r4
 800700e:	4628      	mov	r0, r5
 8007010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007014:	f000 f81b 	bl	800704e <_malloc_usable_size_r>
 8007018:	4284      	cmp	r4, r0
 800701a:	4607      	mov	r7, r0
 800701c:	d802      	bhi.n	8007024 <_realloc_r+0x34>
 800701e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007022:	d812      	bhi.n	800704a <_realloc_r+0x5a>
 8007024:	4621      	mov	r1, r4
 8007026:	4640      	mov	r0, r8
 8007028:	f7ff f9ce 	bl	80063c8 <_malloc_r>
 800702c:	4605      	mov	r5, r0
 800702e:	2800      	cmp	r0, #0
 8007030:	d0ed      	beq.n	800700e <_realloc_r+0x1e>
 8007032:	42bc      	cmp	r4, r7
 8007034:	4622      	mov	r2, r4
 8007036:	4631      	mov	r1, r6
 8007038:	bf28      	it	cs
 800703a:	463a      	movcs	r2, r7
 800703c:	f7ff f94a 	bl	80062d4 <memcpy>
 8007040:	4631      	mov	r1, r6
 8007042:	4640      	mov	r0, r8
 8007044:	f7ff f954 	bl	80062f0 <_free_r>
 8007048:	e7e1      	b.n	800700e <_realloc_r+0x1e>
 800704a:	4635      	mov	r5, r6
 800704c:	e7df      	b.n	800700e <_realloc_r+0x1e>

0800704e <_malloc_usable_size_r>:
 800704e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007052:	1f18      	subs	r0, r3, #4
 8007054:	2b00      	cmp	r3, #0
 8007056:	bfbc      	itt	lt
 8007058:	580b      	ldrlt	r3, [r1, r0]
 800705a:	18c0      	addlt	r0, r0, r3
 800705c:	4770      	bx	lr
	...

08007060 <acos>:
 8007060:	b538      	push	{r3, r4, r5, lr}
 8007062:	ed2d 8b02 	vpush	{d8}
 8007066:	ec55 4b10 	vmov	r4, r5, d0
 800706a:	f000 fc25 	bl	80078b8 <__ieee754_acos>
 800706e:	4622      	mov	r2, r4
 8007070:	462b      	mov	r3, r5
 8007072:	4620      	mov	r0, r4
 8007074:	4629      	mov	r1, r5
 8007076:	eeb0 8a40 	vmov.f32	s16, s0
 800707a:	eef0 8a60 	vmov.f32	s17, s1
 800707e:	f7f9 fd65 	bl	8000b4c <__aeabi_dcmpun>
 8007082:	b9a8      	cbnz	r0, 80070b0 <acos+0x50>
 8007084:	ec45 4b10 	vmov	d0, r4, r5
 8007088:	f000 f996 	bl	80073b8 <fabs>
 800708c:	4b0c      	ldr	r3, [pc, #48]	; (80070c0 <acos+0x60>)
 800708e:	ec51 0b10 	vmov	r0, r1, d0
 8007092:	2200      	movs	r2, #0
 8007094:	f7f9 fd50 	bl	8000b38 <__aeabi_dcmpgt>
 8007098:	b150      	cbz	r0, 80070b0 <acos+0x50>
 800709a:	f7ff f8e7 	bl	800626c <__errno>
 800709e:	ecbd 8b02 	vpop	{d8}
 80070a2:	2321      	movs	r3, #33	; 0x21
 80070a4:	6003      	str	r3, [r0, #0]
 80070a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80070aa:	4806      	ldr	r0, [pc, #24]	; (80070c4 <acos+0x64>)
 80070ac:	f000 b998 	b.w	80073e0 <nan>
 80070b0:	eeb0 0a48 	vmov.f32	s0, s16
 80070b4:	eef0 0a68 	vmov.f32	s1, s17
 80070b8:	ecbd 8b02 	vpop	{d8}
 80070bc:	bd38      	pop	{r3, r4, r5, pc}
 80070be:	bf00      	nop
 80070c0:	3ff00000 	.word	0x3ff00000
 80070c4:	08009ccd 	.word	0x08009ccd

080070c8 <exp>:
 80070c8:	b538      	push	{r3, r4, r5, lr}
 80070ca:	ed2d 8b02 	vpush	{d8}
 80070ce:	ec55 4b10 	vmov	r4, r5, d0
 80070d2:	f000 fe51 	bl	8007d78 <__ieee754_exp>
 80070d6:	eeb0 8a40 	vmov.f32	s16, s0
 80070da:	eef0 8a60 	vmov.f32	s17, s1
 80070de:	ec45 4b10 	vmov	d0, r4, r5
 80070e2:	f000 f972 	bl	80073ca <finite>
 80070e6:	b168      	cbz	r0, 8007104 <exp+0x3c>
 80070e8:	a317      	add	r3, pc, #92	; (adr r3, 8007148 <exp+0x80>)
 80070ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ee:	4620      	mov	r0, r4
 80070f0:	4629      	mov	r1, r5
 80070f2:	f7f9 fd21 	bl	8000b38 <__aeabi_dcmpgt>
 80070f6:	b160      	cbz	r0, 8007112 <exp+0x4a>
 80070f8:	f7ff f8b8 	bl	800626c <__errno>
 80070fc:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 8007138 <exp+0x70>
 8007100:	2322      	movs	r3, #34	; 0x22
 8007102:	6003      	str	r3, [r0, #0]
 8007104:	eeb0 0a48 	vmov.f32	s0, s16
 8007108:	eef0 0a68 	vmov.f32	s1, s17
 800710c:	ecbd 8b02 	vpop	{d8}
 8007110:	bd38      	pop	{r3, r4, r5, pc}
 8007112:	a30f      	add	r3, pc, #60	; (adr r3, 8007150 <exp+0x88>)
 8007114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007118:	4620      	mov	r0, r4
 800711a:	4629      	mov	r1, r5
 800711c:	f7f9 fcee 	bl	8000afc <__aeabi_dcmplt>
 8007120:	2800      	cmp	r0, #0
 8007122:	d0ef      	beq.n	8007104 <exp+0x3c>
 8007124:	f7ff f8a2 	bl	800626c <__errno>
 8007128:	2322      	movs	r3, #34	; 0x22
 800712a:	ed9f 8b05 	vldr	d8, [pc, #20]	; 8007140 <exp+0x78>
 800712e:	6003      	str	r3, [r0, #0]
 8007130:	e7e8      	b.n	8007104 <exp+0x3c>
 8007132:	bf00      	nop
 8007134:	f3af 8000 	nop.w
 8007138:	00000000 	.word	0x00000000
 800713c:	7ff00000 	.word	0x7ff00000
	...
 8007148:	fefa39ef 	.word	0xfefa39ef
 800714c:	40862e42 	.word	0x40862e42
 8007150:	d52d3051 	.word	0xd52d3051
 8007154:	c0874910 	.word	0xc0874910

08007158 <log>:
 8007158:	b538      	push	{r3, r4, r5, lr}
 800715a:	ed2d 8b02 	vpush	{d8}
 800715e:	ec55 4b10 	vmov	r4, r5, d0
 8007162:	f000 ff8d 	bl	8008080 <__ieee754_log>
 8007166:	4622      	mov	r2, r4
 8007168:	462b      	mov	r3, r5
 800716a:	4620      	mov	r0, r4
 800716c:	4629      	mov	r1, r5
 800716e:	eeb0 8a40 	vmov.f32	s16, s0
 8007172:	eef0 8a60 	vmov.f32	s17, s1
 8007176:	f7f9 fce9 	bl	8000b4c <__aeabi_dcmpun>
 800717a:	b998      	cbnz	r0, 80071a4 <log+0x4c>
 800717c:	2200      	movs	r2, #0
 800717e:	2300      	movs	r3, #0
 8007180:	4620      	mov	r0, r4
 8007182:	4629      	mov	r1, r5
 8007184:	f7f9 fcd8 	bl	8000b38 <__aeabi_dcmpgt>
 8007188:	b960      	cbnz	r0, 80071a4 <log+0x4c>
 800718a:	2200      	movs	r2, #0
 800718c:	2300      	movs	r3, #0
 800718e:	4620      	mov	r0, r4
 8007190:	4629      	mov	r1, r5
 8007192:	f7f9 fca9 	bl	8000ae8 <__aeabi_dcmpeq>
 8007196:	b160      	cbz	r0, 80071b2 <log+0x5a>
 8007198:	f7ff f868 	bl	800626c <__errno>
 800719c:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 80071c8 <log+0x70>
 80071a0:	2322      	movs	r3, #34	; 0x22
 80071a2:	6003      	str	r3, [r0, #0]
 80071a4:	eeb0 0a48 	vmov.f32	s0, s16
 80071a8:	eef0 0a68 	vmov.f32	s1, s17
 80071ac:	ecbd 8b02 	vpop	{d8}
 80071b0:	bd38      	pop	{r3, r4, r5, pc}
 80071b2:	f7ff f85b 	bl	800626c <__errno>
 80071b6:	ecbd 8b02 	vpop	{d8}
 80071ba:	2321      	movs	r3, #33	; 0x21
 80071bc:	6003      	str	r3, [r0, #0]
 80071be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80071c2:	4803      	ldr	r0, [pc, #12]	; (80071d0 <log+0x78>)
 80071c4:	f000 b90c 	b.w	80073e0 <nan>
 80071c8:	00000000 	.word	0x00000000
 80071cc:	fff00000 	.word	0xfff00000
 80071d0:	08009ccd 	.word	0x08009ccd

080071d4 <pow>:
 80071d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071d6:	ed2d 8b02 	vpush	{d8}
 80071da:	eeb0 8a40 	vmov.f32	s16, s0
 80071de:	eef0 8a60 	vmov.f32	s17, s1
 80071e2:	ec55 4b11 	vmov	r4, r5, d1
 80071e6:	f001 f907 	bl	80083f8 <__ieee754_pow>
 80071ea:	4622      	mov	r2, r4
 80071ec:	462b      	mov	r3, r5
 80071ee:	4620      	mov	r0, r4
 80071f0:	4629      	mov	r1, r5
 80071f2:	ec57 6b10 	vmov	r6, r7, d0
 80071f6:	f7f9 fca9 	bl	8000b4c <__aeabi_dcmpun>
 80071fa:	2800      	cmp	r0, #0
 80071fc:	d13b      	bne.n	8007276 <pow+0xa2>
 80071fe:	ec51 0b18 	vmov	r0, r1, d8
 8007202:	2200      	movs	r2, #0
 8007204:	2300      	movs	r3, #0
 8007206:	f7f9 fc6f 	bl	8000ae8 <__aeabi_dcmpeq>
 800720a:	b1b8      	cbz	r0, 800723c <pow+0x68>
 800720c:	2200      	movs	r2, #0
 800720e:	2300      	movs	r3, #0
 8007210:	4620      	mov	r0, r4
 8007212:	4629      	mov	r1, r5
 8007214:	f7f9 fc68 	bl	8000ae8 <__aeabi_dcmpeq>
 8007218:	2800      	cmp	r0, #0
 800721a:	d146      	bne.n	80072aa <pow+0xd6>
 800721c:	ec45 4b10 	vmov	d0, r4, r5
 8007220:	f000 f8d3 	bl	80073ca <finite>
 8007224:	b338      	cbz	r0, 8007276 <pow+0xa2>
 8007226:	2200      	movs	r2, #0
 8007228:	2300      	movs	r3, #0
 800722a:	4620      	mov	r0, r4
 800722c:	4629      	mov	r1, r5
 800722e:	f7f9 fc65 	bl	8000afc <__aeabi_dcmplt>
 8007232:	b300      	cbz	r0, 8007276 <pow+0xa2>
 8007234:	f7ff f81a 	bl	800626c <__errno>
 8007238:	2322      	movs	r3, #34	; 0x22
 800723a:	e01b      	b.n	8007274 <pow+0xa0>
 800723c:	ec47 6b10 	vmov	d0, r6, r7
 8007240:	f000 f8c3 	bl	80073ca <finite>
 8007244:	b9e0      	cbnz	r0, 8007280 <pow+0xac>
 8007246:	eeb0 0a48 	vmov.f32	s0, s16
 800724a:	eef0 0a68 	vmov.f32	s1, s17
 800724e:	f000 f8bc 	bl	80073ca <finite>
 8007252:	b1a8      	cbz	r0, 8007280 <pow+0xac>
 8007254:	ec45 4b10 	vmov	d0, r4, r5
 8007258:	f000 f8b7 	bl	80073ca <finite>
 800725c:	b180      	cbz	r0, 8007280 <pow+0xac>
 800725e:	4632      	mov	r2, r6
 8007260:	463b      	mov	r3, r7
 8007262:	4630      	mov	r0, r6
 8007264:	4639      	mov	r1, r7
 8007266:	f7f9 fc71 	bl	8000b4c <__aeabi_dcmpun>
 800726a:	2800      	cmp	r0, #0
 800726c:	d0e2      	beq.n	8007234 <pow+0x60>
 800726e:	f7fe fffd 	bl	800626c <__errno>
 8007272:	2321      	movs	r3, #33	; 0x21
 8007274:	6003      	str	r3, [r0, #0]
 8007276:	ecbd 8b02 	vpop	{d8}
 800727a:	ec47 6b10 	vmov	d0, r6, r7
 800727e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007280:	2200      	movs	r2, #0
 8007282:	2300      	movs	r3, #0
 8007284:	4630      	mov	r0, r6
 8007286:	4639      	mov	r1, r7
 8007288:	f7f9 fc2e 	bl	8000ae8 <__aeabi_dcmpeq>
 800728c:	2800      	cmp	r0, #0
 800728e:	d0f2      	beq.n	8007276 <pow+0xa2>
 8007290:	eeb0 0a48 	vmov.f32	s0, s16
 8007294:	eef0 0a68 	vmov.f32	s1, s17
 8007298:	f000 f897 	bl	80073ca <finite>
 800729c:	2800      	cmp	r0, #0
 800729e:	d0ea      	beq.n	8007276 <pow+0xa2>
 80072a0:	ec45 4b10 	vmov	d0, r4, r5
 80072a4:	f000 f891 	bl	80073ca <finite>
 80072a8:	e7c3      	b.n	8007232 <pow+0x5e>
 80072aa:	4f01      	ldr	r7, [pc, #4]	; (80072b0 <pow+0xdc>)
 80072ac:	2600      	movs	r6, #0
 80072ae:	e7e2      	b.n	8007276 <pow+0xa2>
 80072b0:	3ff00000 	.word	0x3ff00000

080072b4 <sqrt>:
 80072b4:	b538      	push	{r3, r4, r5, lr}
 80072b6:	ed2d 8b02 	vpush	{d8}
 80072ba:	ec55 4b10 	vmov	r4, r5, d0
 80072be:	f000 f897 	bl	80073f0 <__ieee754_sqrt>
 80072c2:	4622      	mov	r2, r4
 80072c4:	462b      	mov	r3, r5
 80072c6:	4620      	mov	r0, r4
 80072c8:	4629      	mov	r1, r5
 80072ca:	eeb0 8a40 	vmov.f32	s16, s0
 80072ce:	eef0 8a60 	vmov.f32	s17, s1
 80072d2:	f7f9 fc3b 	bl	8000b4c <__aeabi_dcmpun>
 80072d6:	b990      	cbnz	r0, 80072fe <sqrt+0x4a>
 80072d8:	2200      	movs	r2, #0
 80072da:	2300      	movs	r3, #0
 80072dc:	4620      	mov	r0, r4
 80072de:	4629      	mov	r1, r5
 80072e0:	f7f9 fc0c 	bl	8000afc <__aeabi_dcmplt>
 80072e4:	b158      	cbz	r0, 80072fe <sqrt+0x4a>
 80072e6:	f7fe ffc1 	bl	800626c <__errno>
 80072ea:	2321      	movs	r3, #33	; 0x21
 80072ec:	6003      	str	r3, [r0, #0]
 80072ee:	2200      	movs	r2, #0
 80072f0:	2300      	movs	r3, #0
 80072f2:	4610      	mov	r0, r2
 80072f4:	4619      	mov	r1, r3
 80072f6:	f7f9 fab9 	bl	800086c <__aeabi_ddiv>
 80072fa:	ec41 0b18 	vmov	d8, r0, r1
 80072fe:	eeb0 0a48 	vmov.f32	s0, s16
 8007302:	eef0 0a68 	vmov.f32	s1, s17
 8007306:	ecbd 8b02 	vpop	{d8}
 800730a:	bd38      	pop	{r3, r4, r5, pc}
 800730c:	0000      	movs	r0, r0
	...

08007310 <cos>:
 8007310:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007312:	ec53 2b10 	vmov	r2, r3, d0
 8007316:	4826      	ldr	r0, [pc, #152]	; (80073b0 <cos+0xa0>)
 8007318:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800731c:	4281      	cmp	r1, r0
 800731e:	dc06      	bgt.n	800732e <cos+0x1e>
 8007320:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80073a8 <cos+0x98>
 8007324:	b005      	add	sp, #20
 8007326:	f85d eb04 	ldr.w	lr, [sp], #4
 800732a:	f000 b93d 	b.w	80075a8 <__kernel_cos>
 800732e:	4821      	ldr	r0, [pc, #132]	; (80073b4 <cos+0xa4>)
 8007330:	4281      	cmp	r1, r0
 8007332:	dd09      	ble.n	8007348 <cos+0x38>
 8007334:	ee10 0a10 	vmov	r0, s0
 8007338:	4619      	mov	r1, r3
 800733a:	f7f8 ffb5 	bl	80002a8 <__aeabi_dsub>
 800733e:	ec41 0b10 	vmov	d0, r0, r1
 8007342:	b005      	add	sp, #20
 8007344:	f85d fb04 	ldr.w	pc, [sp], #4
 8007348:	4668      	mov	r0, sp
 800734a:	f001 fd81 	bl	8008e50 <__ieee754_rem_pio2>
 800734e:	f000 0003 	and.w	r0, r0, #3
 8007352:	2801      	cmp	r0, #1
 8007354:	d00b      	beq.n	800736e <cos+0x5e>
 8007356:	2802      	cmp	r0, #2
 8007358:	d016      	beq.n	8007388 <cos+0x78>
 800735a:	b9e0      	cbnz	r0, 8007396 <cos+0x86>
 800735c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007360:	ed9d 0b00 	vldr	d0, [sp]
 8007364:	f000 f920 	bl	80075a8 <__kernel_cos>
 8007368:	ec51 0b10 	vmov	r0, r1, d0
 800736c:	e7e7      	b.n	800733e <cos+0x2e>
 800736e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007372:	ed9d 0b00 	vldr	d0, [sp]
 8007376:	f000 f9df 	bl	8007738 <__kernel_sin>
 800737a:	ec53 2b10 	vmov	r2, r3, d0
 800737e:	ee10 0a10 	vmov	r0, s0
 8007382:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007386:	e7da      	b.n	800733e <cos+0x2e>
 8007388:	ed9d 1b02 	vldr	d1, [sp, #8]
 800738c:	ed9d 0b00 	vldr	d0, [sp]
 8007390:	f000 f90a 	bl	80075a8 <__kernel_cos>
 8007394:	e7f1      	b.n	800737a <cos+0x6a>
 8007396:	ed9d 1b02 	vldr	d1, [sp, #8]
 800739a:	ed9d 0b00 	vldr	d0, [sp]
 800739e:	2001      	movs	r0, #1
 80073a0:	f000 f9ca 	bl	8007738 <__kernel_sin>
 80073a4:	e7e0      	b.n	8007368 <cos+0x58>
 80073a6:	bf00      	nop
	...
 80073b0:	3fe921fb 	.word	0x3fe921fb
 80073b4:	7fefffff 	.word	0x7fefffff

080073b8 <fabs>:
 80073b8:	ec51 0b10 	vmov	r0, r1, d0
 80073bc:	ee10 2a10 	vmov	r2, s0
 80073c0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80073c4:	ec43 2b10 	vmov	d0, r2, r3
 80073c8:	4770      	bx	lr

080073ca <finite>:
 80073ca:	b082      	sub	sp, #8
 80073cc:	ed8d 0b00 	vstr	d0, [sp]
 80073d0:	9801      	ldr	r0, [sp, #4]
 80073d2:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80073d6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80073da:	0fc0      	lsrs	r0, r0, #31
 80073dc:	b002      	add	sp, #8
 80073de:	4770      	bx	lr

080073e0 <nan>:
 80073e0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80073e8 <nan+0x8>
 80073e4:	4770      	bx	lr
 80073e6:	bf00      	nop
 80073e8:	00000000 	.word	0x00000000
 80073ec:	7ff80000 	.word	0x7ff80000

080073f0 <__ieee754_sqrt>:
 80073f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073f4:	ec55 4b10 	vmov	r4, r5, d0
 80073f8:	4e67      	ldr	r6, [pc, #412]	; (8007598 <__ieee754_sqrt+0x1a8>)
 80073fa:	43ae      	bics	r6, r5
 80073fc:	ee10 0a10 	vmov	r0, s0
 8007400:	ee10 2a10 	vmov	r2, s0
 8007404:	4629      	mov	r1, r5
 8007406:	462b      	mov	r3, r5
 8007408:	d10d      	bne.n	8007426 <__ieee754_sqrt+0x36>
 800740a:	f7f9 f905 	bl	8000618 <__aeabi_dmul>
 800740e:	4602      	mov	r2, r0
 8007410:	460b      	mov	r3, r1
 8007412:	4620      	mov	r0, r4
 8007414:	4629      	mov	r1, r5
 8007416:	f7f8 ff49 	bl	80002ac <__adddf3>
 800741a:	4604      	mov	r4, r0
 800741c:	460d      	mov	r5, r1
 800741e:	ec45 4b10 	vmov	d0, r4, r5
 8007422:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007426:	2d00      	cmp	r5, #0
 8007428:	dc0b      	bgt.n	8007442 <__ieee754_sqrt+0x52>
 800742a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800742e:	4326      	orrs	r6, r4
 8007430:	d0f5      	beq.n	800741e <__ieee754_sqrt+0x2e>
 8007432:	b135      	cbz	r5, 8007442 <__ieee754_sqrt+0x52>
 8007434:	f7f8 ff38 	bl	80002a8 <__aeabi_dsub>
 8007438:	4602      	mov	r2, r0
 800743a:	460b      	mov	r3, r1
 800743c:	f7f9 fa16 	bl	800086c <__aeabi_ddiv>
 8007440:	e7eb      	b.n	800741a <__ieee754_sqrt+0x2a>
 8007442:	1509      	asrs	r1, r1, #20
 8007444:	f000 808d 	beq.w	8007562 <__ieee754_sqrt+0x172>
 8007448:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800744c:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8007450:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007454:	07c9      	lsls	r1, r1, #31
 8007456:	bf5c      	itt	pl
 8007458:	005b      	lslpl	r3, r3, #1
 800745a:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800745e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007462:	bf58      	it	pl
 8007464:	0052      	lslpl	r2, r2, #1
 8007466:	2500      	movs	r5, #0
 8007468:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800746c:	1076      	asrs	r6, r6, #1
 800746e:	0052      	lsls	r2, r2, #1
 8007470:	f04f 0e16 	mov.w	lr, #22
 8007474:	46ac      	mov	ip, r5
 8007476:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800747a:	eb0c 0001 	add.w	r0, ip, r1
 800747e:	4298      	cmp	r0, r3
 8007480:	bfde      	ittt	le
 8007482:	1a1b      	suble	r3, r3, r0
 8007484:	eb00 0c01 	addle.w	ip, r0, r1
 8007488:	186d      	addle	r5, r5, r1
 800748a:	005b      	lsls	r3, r3, #1
 800748c:	f1be 0e01 	subs.w	lr, lr, #1
 8007490:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8007494:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8007498:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800749c:	d1ed      	bne.n	800747a <__ieee754_sqrt+0x8a>
 800749e:	4674      	mov	r4, lr
 80074a0:	2720      	movs	r7, #32
 80074a2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80074a6:	4563      	cmp	r3, ip
 80074a8:	eb01 000e 	add.w	r0, r1, lr
 80074ac:	dc02      	bgt.n	80074b4 <__ieee754_sqrt+0xc4>
 80074ae:	d113      	bne.n	80074d8 <__ieee754_sqrt+0xe8>
 80074b0:	4290      	cmp	r0, r2
 80074b2:	d811      	bhi.n	80074d8 <__ieee754_sqrt+0xe8>
 80074b4:	2800      	cmp	r0, #0
 80074b6:	eb00 0e01 	add.w	lr, r0, r1
 80074ba:	da57      	bge.n	800756c <__ieee754_sqrt+0x17c>
 80074bc:	f1be 0f00 	cmp.w	lr, #0
 80074c0:	db54      	blt.n	800756c <__ieee754_sqrt+0x17c>
 80074c2:	f10c 0801 	add.w	r8, ip, #1
 80074c6:	eba3 030c 	sub.w	r3, r3, ip
 80074ca:	4290      	cmp	r0, r2
 80074cc:	bf88      	it	hi
 80074ce:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80074d2:	1a12      	subs	r2, r2, r0
 80074d4:	440c      	add	r4, r1
 80074d6:	46c4      	mov	ip, r8
 80074d8:	005b      	lsls	r3, r3, #1
 80074da:	3f01      	subs	r7, #1
 80074dc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80074e0:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80074e4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80074e8:	d1dd      	bne.n	80074a6 <__ieee754_sqrt+0xb6>
 80074ea:	4313      	orrs	r3, r2
 80074ec:	d01b      	beq.n	8007526 <__ieee754_sqrt+0x136>
 80074ee:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800759c <__ieee754_sqrt+0x1ac>
 80074f2:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 80075a0 <__ieee754_sqrt+0x1b0>
 80074f6:	e9da 0100 	ldrd	r0, r1, [sl]
 80074fa:	e9db 2300 	ldrd	r2, r3, [fp]
 80074fe:	f7f8 fed3 	bl	80002a8 <__aeabi_dsub>
 8007502:	e9da 8900 	ldrd	r8, r9, [sl]
 8007506:	4602      	mov	r2, r0
 8007508:	460b      	mov	r3, r1
 800750a:	4640      	mov	r0, r8
 800750c:	4649      	mov	r1, r9
 800750e:	f7f9 faff 	bl	8000b10 <__aeabi_dcmple>
 8007512:	b140      	cbz	r0, 8007526 <__ieee754_sqrt+0x136>
 8007514:	f1b4 3fff 	cmp.w	r4, #4294967295
 8007518:	e9da 0100 	ldrd	r0, r1, [sl]
 800751c:	e9db 2300 	ldrd	r2, r3, [fp]
 8007520:	d126      	bne.n	8007570 <__ieee754_sqrt+0x180>
 8007522:	3501      	adds	r5, #1
 8007524:	463c      	mov	r4, r7
 8007526:	106a      	asrs	r2, r5, #1
 8007528:	0863      	lsrs	r3, r4, #1
 800752a:	07e9      	lsls	r1, r5, #31
 800752c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8007530:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8007534:	bf48      	it	mi
 8007536:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800753a:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800753e:	461c      	mov	r4, r3
 8007540:	e76d      	b.n	800741e <__ieee754_sqrt+0x2e>
 8007542:	0ad3      	lsrs	r3, r2, #11
 8007544:	3815      	subs	r0, #21
 8007546:	0552      	lsls	r2, r2, #21
 8007548:	2b00      	cmp	r3, #0
 800754a:	d0fa      	beq.n	8007542 <__ieee754_sqrt+0x152>
 800754c:	02dc      	lsls	r4, r3, #11
 800754e:	d50a      	bpl.n	8007566 <__ieee754_sqrt+0x176>
 8007550:	f1c1 0420 	rsb	r4, r1, #32
 8007554:	fa22 f404 	lsr.w	r4, r2, r4
 8007558:	1e4d      	subs	r5, r1, #1
 800755a:	408a      	lsls	r2, r1
 800755c:	4323      	orrs	r3, r4
 800755e:	1b41      	subs	r1, r0, r5
 8007560:	e772      	b.n	8007448 <__ieee754_sqrt+0x58>
 8007562:	4608      	mov	r0, r1
 8007564:	e7f0      	b.n	8007548 <__ieee754_sqrt+0x158>
 8007566:	005b      	lsls	r3, r3, #1
 8007568:	3101      	adds	r1, #1
 800756a:	e7ef      	b.n	800754c <__ieee754_sqrt+0x15c>
 800756c:	46e0      	mov	r8, ip
 800756e:	e7aa      	b.n	80074c6 <__ieee754_sqrt+0xd6>
 8007570:	f7f8 fe9c 	bl	80002ac <__adddf3>
 8007574:	e9da 8900 	ldrd	r8, r9, [sl]
 8007578:	4602      	mov	r2, r0
 800757a:	460b      	mov	r3, r1
 800757c:	4640      	mov	r0, r8
 800757e:	4649      	mov	r1, r9
 8007580:	f7f9 fabc 	bl	8000afc <__aeabi_dcmplt>
 8007584:	b120      	cbz	r0, 8007590 <__ieee754_sqrt+0x1a0>
 8007586:	1ca0      	adds	r0, r4, #2
 8007588:	bf08      	it	eq
 800758a:	3501      	addeq	r5, #1
 800758c:	3402      	adds	r4, #2
 800758e:	e7ca      	b.n	8007526 <__ieee754_sqrt+0x136>
 8007590:	3401      	adds	r4, #1
 8007592:	f024 0401 	bic.w	r4, r4, #1
 8007596:	e7c6      	b.n	8007526 <__ieee754_sqrt+0x136>
 8007598:	7ff00000 	.word	0x7ff00000
 800759c:	20000070 	.word	0x20000070
 80075a0:	20000078 	.word	0x20000078
 80075a4:	00000000 	.word	0x00000000

080075a8 <__kernel_cos>:
 80075a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075ac:	ec57 6b10 	vmov	r6, r7, d0
 80075b0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80075b4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80075b8:	ed8d 1b00 	vstr	d1, [sp]
 80075bc:	da07      	bge.n	80075ce <__kernel_cos+0x26>
 80075be:	ee10 0a10 	vmov	r0, s0
 80075c2:	4639      	mov	r1, r7
 80075c4:	f7f9 fad8 	bl	8000b78 <__aeabi_d2iz>
 80075c8:	2800      	cmp	r0, #0
 80075ca:	f000 8088 	beq.w	80076de <__kernel_cos+0x136>
 80075ce:	4632      	mov	r2, r6
 80075d0:	463b      	mov	r3, r7
 80075d2:	4630      	mov	r0, r6
 80075d4:	4639      	mov	r1, r7
 80075d6:	f7f9 f81f 	bl	8000618 <__aeabi_dmul>
 80075da:	4b51      	ldr	r3, [pc, #324]	; (8007720 <__kernel_cos+0x178>)
 80075dc:	2200      	movs	r2, #0
 80075de:	4604      	mov	r4, r0
 80075e0:	460d      	mov	r5, r1
 80075e2:	f7f9 f819 	bl	8000618 <__aeabi_dmul>
 80075e6:	a340      	add	r3, pc, #256	; (adr r3, 80076e8 <__kernel_cos+0x140>)
 80075e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ec:	4682      	mov	sl, r0
 80075ee:	468b      	mov	fp, r1
 80075f0:	4620      	mov	r0, r4
 80075f2:	4629      	mov	r1, r5
 80075f4:	f7f9 f810 	bl	8000618 <__aeabi_dmul>
 80075f8:	a33d      	add	r3, pc, #244	; (adr r3, 80076f0 <__kernel_cos+0x148>)
 80075fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075fe:	f7f8 fe55 	bl	80002ac <__adddf3>
 8007602:	4622      	mov	r2, r4
 8007604:	462b      	mov	r3, r5
 8007606:	f7f9 f807 	bl	8000618 <__aeabi_dmul>
 800760a:	a33b      	add	r3, pc, #236	; (adr r3, 80076f8 <__kernel_cos+0x150>)
 800760c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007610:	f7f8 fe4a 	bl	80002a8 <__aeabi_dsub>
 8007614:	4622      	mov	r2, r4
 8007616:	462b      	mov	r3, r5
 8007618:	f7f8 fffe 	bl	8000618 <__aeabi_dmul>
 800761c:	a338      	add	r3, pc, #224	; (adr r3, 8007700 <__kernel_cos+0x158>)
 800761e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007622:	f7f8 fe43 	bl	80002ac <__adddf3>
 8007626:	4622      	mov	r2, r4
 8007628:	462b      	mov	r3, r5
 800762a:	f7f8 fff5 	bl	8000618 <__aeabi_dmul>
 800762e:	a336      	add	r3, pc, #216	; (adr r3, 8007708 <__kernel_cos+0x160>)
 8007630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007634:	f7f8 fe38 	bl	80002a8 <__aeabi_dsub>
 8007638:	4622      	mov	r2, r4
 800763a:	462b      	mov	r3, r5
 800763c:	f7f8 ffec 	bl	8000618 <__aeabi_dmul>
 8007640:	a333      	add	r3, pc, #204	; (adr r3, 8007710 <__kernel_cos+0x168>)
 8007642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007646:	f7f8 fe31 	bl	80002ac <__adddf3>
 800764a:	4622      	mov	r2, r4
 800764c:	462b      	mov	r3, r5
 800764e:	f7f8 ffe3 	bl	8000618 <__aeabi_dmul>
 8007652:	4622      	mov	r2, r4
 8007654:	462b      	mov	r3, r5
 8007656:	f7f8 ffdf 	bl	8000618 <__aeabi_dmul>
 800765a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800765e:	4604      	mov	r4, r0
 8007660:	460d      	mov	r5, r1
 8007662:	4630      	mov	r0, r6
 8007664:	4639      	mov	r1, r7
 8007666:	f7f8 ffd7 	bl	8000618 <__aeabi_dmul>
 800766a:	460b      	mov	r3, r1
 800766c:	4602      	mov	r2, r0
 800766e:	4629      	mov	r1, r5
 8007670:	4620      	mov	r0, r4
 8007672:	f7f8 fe19 	bl	80002a8 <__aeabi_dsub>
 8007676:	4b2b      	ldr	r3, [pc, #172]	; (8007724 <__kernel_cos+0x17c>)
 8007678:	4598      	cmp	r8, r3
 800767a:	4606      	mov	r6, r0
 800767c:	460f      	mov	r7, r1
 800767e:	dc10      	bgt.n	80076a2 <__kernel_cos+0xfa>
 8007680:	4602      	mov	r2, r0
 8007682:	460b      	mov	r3, r1
 8007684:	4650      	mov	r0, sl
 8007686:	4659      	mov	r1, fp
 8007688:	f7f8 fe0e 	bl	80002a8 <__aeabi_dsub>
 800768c:	460b      	mov	r3, r1
 800768e:	4926      	ldr	r1, [pc, #152]	; (8007728 <__kernel_cos+0x180>)
 8007690:	4602      	mov	r2, r0
 8007692:	2000      	movs	r0, #0
 8007694:	f7f8 fe08 	bl	80002a8 <__aeabi_dsub>
 8007698:	ec41 0b10 	vmov	d0, r0, r1
 800769c:	b003      	add	sp, #12
 800769e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076a2:	4b22      	ldr	r3, [pc, #136]	; (800772c <__kernel_cos+0x184>)
 80076a4:	4920      	ldr	r1, [pc, #128]	; (8007728 <__kernel_cos+0x180>)
 80076a6:	4598      	cmp	r8, r3
 80076a8:	bfcc      	ite	gt
 80076aa:	4d21      	ldrgt	r5, [pc, #132]	; (8007730 <__kernel_cos+0x188>)
 80076ac:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80076b0:	2400      	movs	r4, #0
 80076b2:	4622      	mov	r2, r4
 80076b4:	462b      	mov	r3, r5
 80076b6:	2000      	movs	r0, #0
 80076b8:	f7f8 fdf6 	bl	80002a8 <__aeabi_dsub>
 80076bc:	4622      	mov	r2, r4
 80076be:	4680      	mov	r8, r0
 80076c0:	4689      	mov	r9, r1
 80076c2:	462b      	mov	r3, r5
 80076c4:	4650      	mov	r0, sl
 80076c6:	4659      	mov	r1, fp
 80076c8:	f7f8 fdee 	bl	80002a8 <__aeabi_dsub>
 80076cc:	4632      	mov	r2, r6
 80076ce:	463b      	mov	r3, r7
 80076d0:	f7f8 fdea 	bl	80002a8 <__aeabi_dsub>
 80076d4:	4602      	mov	r2, r0
 80076d6:	460b      	mov	r3, r1
 80076d8:	4640      	mov	r0, r8
 80076da:	4649      	mov	r1, r9
 80076dc:	e7da      	b.n	8007694 <__kernel_cos+0xec>
 80076de:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8007718 <__kernel_cos+0x170>
 80076e2:	e7db      	b.n	800769c <__kernel_cos+0xf4>
 80076e4:	f3af 8000 	nop.w
 80076e8:	be8838d4 	.word	0xbe8838d4
 80076ec:	bda8fae9 	.word	0xbda8fae9
 80076f0:	bdb4b1c4 	.word	0xbdb4b1c4
 80076f4:	3e21ee9e 	.word	0x3e21ee9e
 80076f8:	809c52ad 	.word	0x809c52ad
 80076fc:	3e927e4f 	.word	0x3e927e4f
 8007700:	19cb1590 	.word	0x19cb1590
 8007704:	3efa01a0 	.word	0x3efa01a0
 8007708:	16c15177 	.word	0x16c15177
 800770c:	3f56c16c 	.word	0x3f56c16c
 8007710:	5555554c 	.word	0x5555554c
 8007714:	3fa55555 	.word	0x3fa55555
 8007718:	00000000 	.word	0x00000000
 800771c:	3ff00000 	.word	0x3ff00000
 8007720:	3fe00000 	.word	0x3fe00000
 8007724:	3fd33332 	.word	0x3fd33332
 8007728:	3ff00000 	.word	0x3ff00000
 800772c:	3fe90000 	.word	0x3fe90000
 8007730:	3fd20000 	.word	0x3fd20000
 8007734:	00000000 	.word	0x00000000

08007738 <__kernel_sin>:
 8007738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800773c:	ed2d 8b04 	vpush	{d8-d9}
 8007740:	eeb0 8a41 	vmov.f32	s16, s2
 8007744:	eef0 8a61 	vmov.f32	s17, s3
 8007748:	ec55 4b10 	vmov	r4, r5, d0
 800774c:	b083      	sub	sp, #12
 800774e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007752:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8007756:	9001      	str	r0, [sp, #4]
 8007758:	da06      	bge.n	8007768 <__kernel_sin+0x30>
 800775a:	ee10 0a10 	vmov	r0, s0
 800775e:	4629      	mov	r1, r5
 8007760:	f7f9 fa0a 	bl	8000b78 <__aeabi_d2iz>
 8007764:	2800      	cmp	r0, #0
 8007766:	d051      	beq.n	800780c <__kernel_sin+0xd4>
 8007768:	4622      	mov	r2, r4
 800776a:	462b      	mov	r3, r5
 800776c:	4620      	mov	r0, r4
 800776e:	4629      	mov	r1, r5
 8007770:	f7f8 ff52 	bl	8000618 <__aeabi_dmul>
 8007774:	4682      	mov	sl, r0
 8007776:	468b      	mov	fp, r1
 8007778:	4602      	mov	r2, r0
 800777a:	460b      	mov	r3, r1
 800777c:	4620      	mov	r0, r4
 800777e:	4629      	mov	r1, r5
 8007780:	f7f8 ff4a 	bl	8000618 <__aeabi_dmul>
 8007784:	a341      	add	r3, pc, #260	; (adr r3, 800788c <__kernel_sin+0x154>)
 8007786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800778a:	4680      	mov	r8, r0
 800778c:	4689      	mov	r9, r1
 800778e:	4650      	mov	r0, sl
 8007790:	4659      	mov	r1, fp
 8007792:	f7f8 ff41 	bl	8000618 <__aeabi_dmul>
 8007796:	a33f      	add	r3, pc, #252	; (adr r3, 8007894 <__kernel_sin+0x15c>)
 8007798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800779c:	f7f8 fd84 	bl	80002a8 <__aeabi_dsub>
 80077a0:	4652      	mov	r2, sl
 80077a2:	465b      	mov	r3, fp
 80077a4:	f7f8 ff38 	bl	8000618 <__aeabi_dmul>
 80077a8:	a33c      	add	r3, pc, #240	; (adr r3, 800789c <__kernel_sin+0x164>)
 80077aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ae:	f7f8 fd7d 	bl	80002ac <__adddf3>
 80077b2:	4652      	mov	r2, sl
 80077b4:	465b      	mov	r3, fp
 80077b6:	f7f8 ff2f 	bl	8000618 <__aeabi_dmul>
 80077ba:	a33a      	add	r3, pc, #232	; (adr r3, 80078a4 <__kernel_sin+0x16c>)
 80077bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077c0:	f7f8 fd72 	bl	80002a8 <__aeabi_dsub>
 80077c4:	4652      	mov	r2, sl
 80077c6:	465b      	mov	r3, fp
 80077c8:	f7f8 ff26 	bl	8000618 <__aeabi_dmul>
 80077cc:	a337      	add	r3, pc, #220	; (adr r3, 80078ac <__kernel_sin+0x174>)
 80077ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077d2:	f7f8 fd6b 	bl	80002ac <__adddf3>
 80077d6:	9b01      	ldr	r3, [sp, #4]
 80077d8:	4606      	mov	r6, r0
 80077da:	460f      	mov	r7, r1
 80077dc:	b9eb      	cbnz	r3, 800781a <__kernel_sin+0xe2>
 80077de:	4602      	mov	r2, r0
 80077e0:	460b      	mov	r3, r1
 80077e2:	4650      	mov	r0, sl
 80077e4:	4659      	mov	r1, fp
 80077e6:	f7f8 ff17 	bl	8000618 <__aeabi_dmul>
 80077ea:	a325      	add	r3, pc, #148	; (adr r3, 8007880 <__kernel_sin+0x148>)
 80077ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f0:	f7f8 fd5a 	bl	80002a8 <__aeabi_dsub>
 80077f4:	4642      	mov	r2, r8
 80077f6:	464b      	mov	r3, r9
 80077f8:	f7f8 ff0e 	bl	8000618 <__aeabi_dmul>
 80077fc:	4602      	mov	r2, r0
 80077fe:	460b      	mov	r3, r1
 8007800:	4620      	mov	r0, r4
 8007802:	4629      	mov	r1, r5
 8007804:	f7f8 fd52 	bl	80002ac <__adddf3>
 8007808:	4604      	mov	r4, r0
 800780a:	460d      	mov	r5, r1
 800780c:	ec45 4b10 	vmov	d0, r4, r5
 8007810:	b003      	add	sp, #12
 8007812:	ecbd 8b04 	vpop	{d8-d9}
 8007816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800781a:	4b1b      	ldr	r3, [pc, #108]	; (8007888 <__kernel_sin+0x150>)
 800781c:	ec51 0b18 	vmov	r0, r1, d8
 8007820:	2200      	movs	r2, #0
 8007822:	f7f8 fef9 	bl	8000618 <__aeabi_dmul>
 8007826:	4632      	mov	r2, r6
 8007828:	ec41 0b19 	vmov	d9, r0, r1
 800782c:	463b      	mov	r3, r7
 800782e:	4640      	mov	r0, r8
 8007830:	4649      	mov	r1, r9
 8007832:	f7f8 fef1 	bl	8000618 <__aeabi_dmul>
 8007836:	4602      	mov	r2, r0
 8007838:	460b      	mov	r3, r1
 800783a:	ec51 0b19 	vmov	r0, r1, d9
 800783e:	f7f8 fd33 	bl	80002a8 <__aeabi_dsub>
 8007842:	4652      	mov	r2, sl
 8007844:	465b      	mov	r3, fp
 8007846:	f7f8 fee7 	bl	8000618 <__aeabi_dmul>
 800784a:	ec53 2b18 	vmov	r2, r3, d8
 800784e:	f7f8 fd2b 	bl	80002a8 <__aeabi_dsub>
 8007852:	a30b      	add	r3, pc, #44	; (adr r3, 8007880 <__kernel_sin+0x148>)
 8007854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007858:	4606      	mov	r6, r0
 800785a:	460f      	mov	r7, r1
 800785c:	4640      	mov	r0, r8
 800785e:	4649      	mov	r1, r9
 8007860:	f7f8 feda 	bl	8000618 <__aeabi_dmul>
 8007864:	4602      	mov	r2, r0
 8007866:	460b      	mov	r3, r1
 8007868:	4630      	mov	r0, r6
 800786a:	4639      	mov	r1, r7
 800786c:	f7f8 fd1e 	bl	80002ac <__adddf3>
 8007870:	4602      	mov	r2, r0
 8007872:	460b      	mov	r3, r1
 8007874:	4620      	mov	r0, r4
 8007876:	4629      	mov	r1, r5
 8007878:	f7f8 fd16 	bl	80002a8 <__aeabi_dsub>
 800787c:	e7c4      	b.n	8007808 <__kernel_sin+0xd0>
 800787e:	bf00      	nop
 8007880:	55555549 	.word	0x55555549
 8007884:	3fc55555 	.word	0x3fc55555
 8007888:	3fe00000 	.word	0x3fe00000
 800788c:	5acfd57c 	.word	0x5acfd57c
 8007890:	3de5d93a 	.word	0x3de5d93a
 8007894:	8a2b9ceb 	.word	0x8a2b9ceb
 8007898:	3e5ae5e6 	.word	0x3e5ae5e6
 800789c:	57b1fe7d 	.word	0x57b1fe7d
 80078a0:	3ec71de3 	.word	0x3ec71de3
 80078a4:	19c161d5 	.word	0x19c161d5
 80078a8:	3f2a01a0 	.word	0x3f2a01a0
 80078ac:	1110f8a6 	.word	0x1110f8a6
 80078b0:	3f811111 	.word	0x3f811111
 80078b4:	00000000 	.word	0x00000000

080078b8 <__ieee754_acos>:
 80078b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078bc:	ec55 4b10 	vmov	r4, r5, d0
 80078c0:	49b7      	ldr	r1, [pc, #732]	; (8007ba0 <__ieee754_acos+0x2e8>)
 80078c2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80078c6:	428b      	cmp	r3, r1
 80078c8:	dd1b      	ble.n	8007902 <__ieee754_acos+0x4a>
 80078ca:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 80078ce:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80078d2:	4323      	orrs	r3, r4
 80078d4:	d106      	bne.n	80078e4 <__ieee754_acos+0x2c>
 80078d6:	2d00      	cmp	r5, #0
 80078d8:	f300 8211 	bgt.w	8007cfe <__ieee754_acos+0x446>
 80078dc:	ed9f 0b96 	vldr	d0, [pc, #600]	; 8007b38 <__ieee754_acos+0x280>
 80078e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078e4:	ee10 2a10 	vmov	r2, s0
 80078e8:	462b      	mov	r3, r5
 80078ea:	ee10 0a10 	vmov	r0, s0
 80078ee:	4629      	mov	r1, r5
 80078f0:	f7f8 fcda 	bl	80002a8 <__aeabi_dsub>
 80078f4:	4602      	mov	r2, r0
 80078f6:	460b      	mov	r3, r1
 80078f8:	f7f8 ffb8 	bl	800086c <__aeabi_ddiv>
 80078fc:	ec41 0b10 	vmov	d0, r0, r1
 8007900:	e7ee      	b.n	80078e0 <__ieee754_acos+0x28>
 8007902:	49a8      	ldr	r1, [pc, #672]	; (8007ba4 <__ieee754_acos+0x2ec>)
 8007904:	428b      	cmp	r3, r1
 8007906:	f300 8087 	bgt.w	8007a18 <__ieee754_acos+0x160>
 800790a:	4aa7      	ldr	r2, [pc, #668]	; (8007ba8 <__ieee754_acos+0x2f0>)
 800790c:	4293      	cmp	r3, r2
 800790e:	f340 81f9 	ble.w	8007d04 <__ieee754_acos+0x44c>
 8007912:	ee10 2a10 	vmov	r2, s0
 8007916:	ee10 0a10 	vmov	r0, s0
 800791a:	462b      	mov	r3, r5
 800791c:	4629      	mov	r1, r5
 800791e:	f7f8 fe7b 	bl	8000618 <__aeabi_dmul>
 8007922:	a387      	add	r3, pc, #540	; (adr r3, 8007b40 <__ieee754_acos+0x288>)
 8007924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007928:	4606      	mov	r6, r0
 800792a:	460f      	mov	r7, r1
 800792c:	f7f8 fe74 	bl	8000618 <__aeabi_dmul>
 8007930:	a385      	add	r3, pc, #532	; (adr r3, 8007b48 <__ieee754_acos+0x290>)
 8007932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007936:	f7f8 fcb9 	bl	80002ac <__adddf3>
 800793a:	4632      	mov	r2, r6
 800793c:	463b      	mov	r3, r7
 800793e:	f7f8 fe6b 	bl	8000618 <__aeabi_dmul>
 8007942:	a383      	add	r3, pc, #524	; (adr r3, 8007b50 <__ieee754_acos+0x298>)
 8007944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007948:	f7f8 fcae 	bl	80002a8 <__aeabi_dsub>
 800794c:	4632      	mov	r2, r6
 800794e:	463b      	mov	r3, r7
 8007950:	f7f8 fe62 	bl	8000618 <__aeabi_dmul>
 8007954:	a380      	add	r3, pc, #512	; (adr r3, 8007b58 <__ieee754_acos+0x2a0>)
 8007956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800795a:	f7f8 fca7 	bl	80002ac <__adddf3>
 800795e:	4632      	mov	r2, r6
 8007960:	463b      	mov	r3, r7
 8007962:	f7f8 fe59 	bl	8000618 <__aeabi_dmul>
 8007966:	a37e      	add	r3, pc, #504	; (adr r3, 8007b60 <__ieee754_acos+0x2a8>)
 8007968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800796c:	f7f8 fc9c 	bl	80002a8 <__aeabi_dsub>
 8007970:	4632      	mov	r2, r6
 8007972:	463b      	mov	r3, r7
 8007974:	f7f8 fe50 	bl	8000618 <__aeabi_dmul>
 8007978:	a37b      	add	r3, pc, #492	; (adr r3, 8007b68 <__ieee754_acos+0x2b0>)
 800797a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800797e:	f7f8 fc95 	bl	80002ac <__adddf3>
 8007982:	4632      	mov	r2, r6
 8007984:	463b      	mov	r3, r7
 8007986:	f7f8 fe47 	bl	8000618 <__aeabi_dmul>
 800798a:	a379      	add	r3, pc, #484	; (adr r3, 8007b70 <__ieee754_acos+0x2b8>)
 800798c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007990:	4680      	mov	r8, r0
 8007992:	4689      	mov	r9, r1
 8007994:	4630      	mov	r0, r6
 8007996:	4639      	mov	r1, r7
 8007998:	f7f8 fe3e 	bl	8000618 <__aeabi_dmul>
 800799c:	a376      	add	r3, pc, #472	; (adr r3, 8007b78 <__ieee754_acos+0x2c0>)
 800799e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079a2:	f7f8 fc81 	bl	80002a8 <__aeabi_dsub>
 80079a6:	4632      	mov	r2, r6
 80079a8:	463b      	mov	r3, r7
 80079aa:	f7f8 fe35 	bl	8000618 <__aeabi_dmul>
 80079ae:	a374      	add	r3, pc, #464	; (adr r3, 8007b80 <__ieee754_acos+0x2c8>)
 80079b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079b4:	f7f8 fc7a 	bl	80002ac <__adddf3>
 80079b8:	4632      	mov	r2, r6
 80079ba:	463b      	mov	r3, r7
 80079bc:	f7f8 fe2c 	bl	8000618 <__aeabi_dmul>
 80079c0:	a371      	add	r3, pc, #452	; (adr r3, 8007b88 <__ieee754_acos+0x2d0>)
 80079c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079c6:	f7f8 fc6f 	bl	80002a8 <__aeabi_dsub>
 80079ca:	4632      	mov	r2, r6
 80079cc:	463b      	mov	r3, r7
 80079ce:	f7f8 fe23 	bl	8000618 <__aeabi_dmul>
 80079d2:	4b76      	ldr	r3, [pc, #472]	; (8007bac <__ieee754_acos+0x2f4>)
 80079d4:	2200      	movs	r2, #0
 80079d6:	f7f8 fc69 	bl	80002ac <__adddf3>
 80079da:	4602      	mov	r2, r0
 80079dc:	460b      	mov	r3, r1
 80079de:	4640      	mov	r0, r8
 80079e0:	4649      	mov	r1, r9
 80079e2:	f7f8 ff43 	bl	800086c <__aeabi_ddiv>
 80079e6:	4622      	mov	r2, r4
 80079e8:	462b      	mov	r3, r5
 80079ea:	f7f8 fe15 	bl	8000618 <__aeabi_dmul>
 80079ee:	4602      	mov	r2, r0
 80079f0:	460b      	mov	r3, r1
 80079f2:	a167      	add	r1, pc, #412	; (adr r1, 8007b90 <__ieee754_acos+0x2d8>)
 80079f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80079f8:	f7f8 fc56 	bl	80002a8 <__aeabi_dsub>
 80079fc:	4602      	mov	r2, r0
 80079fe:	460b      	mov	r3, r1
 8007a00:	4620      	mov	r0, r4
 8007a02:	4629      	mov	r1, r5
 8007a04:	f7f8 fc50 	bl	80002a8 <__aeabi_dsub>
 8007a08:	4602      	mov	r2, r0
 8007a0a:	460b      	mov	r3, r1
 8007a0c:	a162      	add	r1, pc, #392	; (adr r1, 8007b98 <__ieee754_acos+0x2e0>)
 8007a0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a12:	f7f8 fc49 	bl	80002a8 <__aeabi_dsub>
 8007a16:	e771      	b.n	80078fc <__ieee754_acos+0x44>
 8007a18:	2d00      	cmp	r5, #0
 8007a1a:	f280 80cb 	bge.w	8007bb4 <__ieee754_acos+0x2fc>
 8007a1e:	ee10 0a10 	vmov	r0, s0
 8007a22:	4b62      	ldr	r3, [pc, #392]	; (8007bac <__ieee754_acos+0x2f4>)
 8007a24:	2200      	movs	r2, #0
 8007a26:	4629      	mov	r1, r5
 8007a28:	f7f8 fc40 	bl	80002ac <__adddf3>
 8007a2c:	4b60      	ldr	r3, [pc, #384]	; (8007bb0 <__ieee754_acos+0x2f8>)
 8007a2e:	2200      	movs	r2, #0
 8007a30:	f7f8 fdf2 	bl	8000618 <__aeabi_dmul>
 8007a34:	a342      	add	r3, pc, #264	; (adr r3, 8007b40 <__ieee754_acos+0x288>)
 8007a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a3a:	4604      	mov	r4, r0
 8007a3c:	460d      	mov	r5, r1
 8007a3e:	f7f8 fdeb 	bl	8000618 <__aeabi_dmul>
 8007a42:	a341      	add	r3, pc, #260	; (adr r3, 8007b48 <__ieee754_acos+0x290>)
 8007a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a48:	f7f8 fc30 	bl	80002ac <__adddf3>
 8007a4c:	4622      	mov	r2, r4
 8007a4e:	462b      	mov	r3, r5
 8007a50:	f7f8 fde2 	bl	8000618 <__aeabi_dmul>
 8007a54:	a33e      	add	r3, pc, #248	; (adr r3, 8007b50 <__ieee754_acos+0x298>)
 8007a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a5a:	f7f8 fc25 	bl	80002a8 <__aeabi_dsub>
 8007a5e:	4622      	mov	r2, r4
 8007a60:	462b      	mov	r3, r5
 8007a62:	f7f8 fdd9 	bl	8000618 <__aeabi_dmul>
 8007a66:	a33c      	add	r3, pc, #240	; (adr r3, 8007b58 <__ieee754_acos+0x2a0>)
 8007a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a6c:	f7f8 fc1e 	bl	80002ac <__adddf3>
 8007a70:	4622      	mov	r2, r4
 8007a72:	462b      	mov	r3, r5
 8007a74:	f7f8 fdd0 	bl	8000618 <__aeabi_dmul>
 8007a78:	a339      	add	r3, pc, #228	; (adr r3, 8007b60 <__ieee754_acos+0x2a8>)
 8007a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a7e:	f7f8 fc13 	bl	80002a8 <__aeabi_dsub>
 8007a82:	4622      	mov	r2, r4
 8007a84:	462b      	mov	r3, r5
 8007a86:	f7f8 fdc7 	bl	8000618 <__aeabi_dmul>
 8007a8a:	a337      	add	r3, pc, #220	; (adr r3, 8007b68 <__ieee754_acos+0x2b0>)
 8007a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a90:	f7f8 fc0c 	bl	80002ac <__adddf3>
 8007a94:	4622      	mov	r2, r4
 8007a96:	462b      	mov	r3, r5
 8007a98:	f7f8 fdbe 	bl	8000618 <__aeabi_dmul>
 8007a9c:	ec45 4b10 	vmov	d0, r4, r5
 8007aa0:	4680      	mov	r8, r0
 8007aa2:	4689      	mov	r9, r1
 8007aa4:	f7ff fca4 	bl	80073f0 <__ieee754_sqrt>
 8007aa8:	a331      	add	r3, pc, #196	; (adr r3, 8007b70 <__ieee754_acos+0x2b8>)
 8007aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aae:	4620      	mov	r0, r4
 8007ab0:	4629      	mov	r1, r5
 8007ab2:	ec57 6b10 	vmov	r6, r7, d0
 8007ab6:	f7f8 fdaf 	bl	8000618 <__aeabi_dmul>
 8007aba:	a32f      	add	r3, pc, #188	; (adr r3, 8007b78 <__ieee754_acos+0x2c0>)
 8007abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ac0:	f7f8 fbf2 	bl	80002a8 <__aeabi_dsub>
 8007ac4:	4622      	mov	r2, r4
 8007ac6:	462b      	mov	r3, r5
 8007ac8:	f7f8 fda6 	bl	8000618 <__aeabi_dmul>
 8007acc:	a32c      	add	r3, pc, #176	; (adr r3, 8007b80 <__ieee754_acos+0x2c8>)
 8007ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ad2:	f7f8 fbeb 	bl	80002ac <__adddf3>
 8007ad6:	4622      	mov	r2, r4
 8007ad8:	462b      	mov	r3, r5
 8007ada:	f7f8 fd9d 	bl	8000618 <__aeabi_dmul>
 8007ade:	a32a      	add	r3, pc, #168	; (adr r3, 8007b88 <__ieee754_acos+0x2d0>)
 8007ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ae4:	f7f8 fbe0 	bl	80002a8 <__aeabi_dsub>
 8007ae8:	4622      	mov	r2, r4
 8007aea:	462b      	mov	r3, r5
 8007aec:	f7f8 fd94 	bl	8000618 <__aeabi_dmul>
 8007af0:	4b2e      	ldr	r3, [pc, #184]	; (8007bac <__ieee754_acos+0x2f4>)
 8007af2:	2200      	movs	r2, #0
 8007af4:	f7f8 fbda 	bl	80002ac <__adddf3>
 8007af8:	4602      	mov	r2, r0
 8007afa:	460b      	mov	r3, r1
 8007afc:	4640      	mov	r0, r8
 8007afe:	4649      	mov	r1, r9
 8007b00:	f7f8 feb4 	bl	800086c <__aeabi_ddiv>
 8007b04:	4632      	mov	r2, r6
 8007b06:	463b      	mov	r3, r7
 8007b08:	f7f8 fd86 	bl	8000618 <__aeabi_dmul>
 8007b0c:	a320      	add	r3, pc, #128	; (adr r3, 8007b90 <__ieee754_acos+0x2d8>)
 8007b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b12:	f7f8 fbc9 	bl	80002a8 <__aeabi_dsub>
 8007b16:	4632      	mov	r2, r6
 8007b18:	463b      	mov	r3, r7
 8007b1a:	f7f8 fbc7 	bl	80002ac <__adddf3>
 8007b1e:	4602      	mov	r2, r0
 8007b20:	460b      	mov	r3, r1
 8007b22:	f7f8 fbc3 	bl	80002ac <__adddf3>
 8007b26:	4602      	mov	r2, r0
 8007b28:	460b      	mov	r3, r1
 8007b2a:	a103      	add	r1, pc, #12	; (adr r1, 8007b38 <__ieee754_acos+0x280>)
 8007b2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b30:	e76f      	b.n	8007a12 <__ieee754_acos+0x15a>
 8007b32:	bf00      	nop
 8007b34:	f3af 8000 	nop.w
 8007b38:	54442d18 	.word	0x54442d18
 8007b3c:	400921fb 	.word	0x400921fb
 8007b40:	0dfdf709 	.word	0x0dfdf709
 8007b44:	3f023de1 	.word	0x3f023de1
 8007b48:	7501b288 	.word	0x7501b288
 8007b4c:	3f49efe0 	.word	0x3f49efe0
 8007b50:	b5688f3b 	.word	0xb5688f3b
 8007b54:	3fa48228 	.word	0x3fa48228
 8007b58:	0e884455 	.word	0x0e884455
 8007b5c:	3fc9c155 	.word	0x3fc9c155
 8007b60:	03eb6f7d 	.word	0x03eb6f7d
 8007b64:	3fd4d612 	.word	0x3fd4d612
 8007b68:	55555555 	.word	0x55555555
 8007b6c:	3fc55555 	.word	0x3fc55555
 8007b70:	b12e9282 	.word	0xb12e9282
 8007b74:	3fb3b8c5 	.word	0x3fb3b8c5
 8007b78:	1b8d0159 	.word	0x1b8d0159
 8007b7c:	3fe6066c 	.word	0x3fe6066c
 8007b80:	9c598ac8 	.word	0x9c598ac8
 8007b84:	40002ae5 	.word	0x40002ae5
 8007b88:	1c8a2d4b 	.word	0x1c8a2d4b
 8007b8c:	40033a27 	.word	0x40033a27
 8007b90:	33145c07 	.word	0x33145c07
 8007b94:	3c91a626 	.word	0x3c91a626
 8007b98:	54442d18 	.word	0x54442d18
 8007b9c:	3ff921fb 	.word	0x3ff921fb
 8007ba0:	3fefffff 	.word	0x3fefffff
 8007ba4:	3fdfffff 	.word	0x3fdfffff
 8007ba8:	3c600000 	.word	0x3c600000
 8007bac:	3ff00000 	.word	0x3ff00000
 8007bb0:	3fe00000 	.word	0x3fe00000
 8007bb4:	ee10 2a10 	vmov	r2, s0
 8007bb8:	462b      	mov	r3, r5
 8007bba:	496d      	ldr	r1, [pc, #436]	; (8007d70 <__ieee754_acos+0x4b8>)
 8007bbc:	2000      	movs	r0, #0
 8007bbe:	f7f8 fb73 	bl	80002a8 <__aeabi_dsub>
 8007bc2:	4b6c      	ldr	r3, [pc, #432]	; (8007d74 <__ieee754_acos+0x4bc>)
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	f7f8 fd27 	bl	8000618 <__aeabi_dmul>
 8007bca:	4604      	mov	r4, r0
 8007bcc:	460d      	mov	r5, r1
 8007bce:	ec45 4b10 	vmov	d0, r4, r5
 8007bd2:	f7ff fc0d 	bl	80073f0 <__ieee754_sqrt>
 8007bd6:	a34e      	add	r3, pc, #312	; (adr r3, 8007d10 <__ieee754_acos+0x458>)
 8007bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bdc:	4620      	mov	r0, r4
 8007bde:	4629      	mov	r1, r5
 8007be0:	ec59 8b10 	vmov	r8, r9, d0
 8007be4:	f7f8 fd18 	bl	8000618 <__aeabi_dmul>
 8007be8:	a34b      	add	r3, pc, #300	; (adr r3, 8007d18 <__ieee754_acos+0x460>)
 8007bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bee:	f7f8 fb5d 	bl	80002ac <__adddf3>
 8007bf2:	4622      	mov	r2, r4
 8007bf4:	462b      	mov	r3, r5
 8007bf6:	f7f8 fd0f 	bl	8000618 <__aeabi_dmul>
 8007bfa:	a349      	add	r3, pc, #292	; (adr r3, 8007d20 <__ieee754_acos+0x468>)
 8007bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c00:	f7f8 fb52 	bl	80002a8 <__aeabi_dsub>
 8007c04:	4622      	mov	r2, r4
 8007c06:	462b      	mov	r3, r5
 8007c08:	f7f8 fd06 	bl	8000618 <__aeabi_dmul>
 8007c0c:	a346      	add	r3, pc, #280	; (adr r3, 8007d28 <__ieee754_acos+0x470>)
 8007c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c12:	f7f8 fb4b 	bl	80002ac <__adddf3>
 8007c16:	4622      	mov	r2, r4
 8007c18:	462b      	mov	r3, r5
 8007c1a:	f7f8 fcfd 	bl	8000618 <__aeabi_dmul>
 8007c1e:	a344      	add	r3, pc, #272	; (adr r3, 8007d30 <__ieee754_acos+0x478>)
 8007c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c24:	f7f8 fb40 	bl	80002a8 <__aeabi_dsub>
 8007c28:	4622      	mov	r2, r4
 8007c2a:	462b      	mov	r3, r5
 8007c2c:	f7f8 fcf4 	bl	8000618 <__aeabi_dmul>
 8007c30:	a341      	add	r3, pc, #260	; (adr r3, 8007d38 <__ieee754_acos+0x480>)
 8007c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c36:	f7f8 fb39 	bl	80002ac <__adddf3>
 8007c3a:	4622      	mov	r2, r4
 8007c3c:	462b      	mov	r3, r5
 8007c3e:	f7f8 fceb 	bl	8000618 <__aeabi_dmul>
 8007c42:	a33f      	add	r3, pc, #252	; (adr r3, 8007d40 <__ieee754_acos+0x488>)
 8007c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c48:	4682      	mov	sl, r0
 8007c4a:	468b      	mov	fp, r1
 8007c4c:	4620      	mov	r0, r4
 8007c4e:	4629      	mov	r1, r5
 8007c50:	f7f8 fce2 	bl	8000618 <__aeabi_dmul>
 8007c54:	a33c      	add	r3, pc, #240	; (adr r3, 8007d48 <__ieee754_acos+0x490>)
 8007c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c5a:	f7f8 fb25 	bl	80002a8 <__aeabi_dsub>
 8007c5e:	4622      	mov	r2, r4
 8007c60:	462b      	mov	r3, r5
 8007c62:	f7f8 fcd9 	bl	8000618 <__aeabi_dmul>
 8007c66:	a33a      	add	r3, pc, #232	; (adr r3, 8007d50 <__ieee754_acos+0x498>)
 8007c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c6c:	f7f8 fb1e 	bl	80002ac <__adddf3>
 8007c70:	4622      	mov	r2, r4
 8007c72:	462b      	mov	r3, r5
 8007c74:	f7f8 fcd0 	bl	8000618 <__aeabi_dmul>
 8007c78:	a337      	add	r3, pc, #220	; (adr r3, 8007d58 <__ieee754_acos+0x4a0>)
 8007c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c7e:	f7f8 fb13 	bl	80002a8 <__aeabi_dsub>
 8007c82:	4622      	mov	r2, r4
 8007c84:	462b      	mov	r3, r5
 8007c86:	f7f8 fcc7 	bl	8000618 <__aeabi_dmul>
 8007c8a:	4b39      	ldr	r3, [pc, #228]	; (8007d70 <__ieee754_acos+0x4b8>)
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	f7f8 fb0d 	bl	80002ac <__adddf3>
 8007c92:	4602      	mov	r2, r0
 8007c94:	460b      	mov	r3, r1
 8007c96:	4650      	mov	r0, sl
 8007c98:	4659      	mov	r1, fp
 8007c9a:	f7f8 fde7 	bl	800086c <__aeabi_ddiv>
 8007c9e:	4642      	mov	r2, r8
 8007ca0:	464b      	mov	r3, r9
 8007ca2:	f7f8 fcb9 	bl	8000618 <__aeabi_dmul>
 8007ca6:	2600      	movs	r6, #0
 8007ca8:	4682      	mov	sl, r0
 8007caa:	468b      	mov	fp, r1
 8007cac:	4632      	mov	r2, r6
 8007cae:	464b      	mov	r3, r9
 8007cb0:	4630      	mov	r0, r6
 8007cb2:	4649      	mov	r1, r9
 8007cb4:	f7f8 fcb0 	bl	8000618 <__aeabi_dmul>
 8007cb8:	4602      	mov	r2, r0
 8007cba:	460b      	mov	r3, r1
 8007cbc:	4620      	mov	r0, r4
 8007cbe:	4629      	mov	r1, r5
 8007cc0:	f7f8 faf2 	bl	80002a8 <__aeabi_dsub>
 8007cc4:	4632      	mov	r2, r6
 8007cc6:	4604      	mov	r4, r0
 8007cc8:	460d      	mov	r5, r1
 8007cca:	464b      	mov	r3, r9
 8007ccc:	4640      	mov	r0, r8
 8007cce:	4649      	mov	r1, r9
 8007cd0:	f7f8 faec 	bl	80002ac <__adddf3>
 8007cd4:	4602      	mov	r2, r0
 8007cd6:	460b      	mov	r3, r1
 8007cd8:	4620      	mov	r0, r4
 8007cda:	4629      	mov	r1, r5
 8007cdc:	f7f8 fdc6 	bl	800086c <__aeabi_ddiv>
 8007ce0:	4602      	mov	r2, r0
 8007ce2:	460b      	mov	r3, r1
 8007ce4:	4650      	mov	r0, sl
 8007ce6:	4659      	mov	r1, fp
 8007ce8:	f7f8 fae0 	bl	80002ac <__adddf3>
 8007cec:	4632      	mov	r2, r6
 8007cee:	464b      	mov	r3, r9
 8007cf0:	f7f8 fadc 	bl	80002ac <__adddf3>
 8007cf4:	4602      	mov	r2, r0
 8007cf6:	460b      	mov	r3, r1
 8007cf8:	f7f8 fad8 	bl	80002ac <__adddf3>
 8007cfc:	e5fe      	b.n	80078fc <__ieee754_acos+0x44>
 8007cfe:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8007d60 <__ieee754_acos+0x4a8>
 8007d02:	e5ed      	b.n	80078e0 <__ieee754_acos+0x28>
 8007d04:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8007d68 <__ieee754_acos+0x4b0>
 8007d08:	e5ea      	b.n	80078e0 <__ieee754_acos+0x28>
 8007d0a:	bf00      	nop
 8007d0c:	f3af 8000 	nop.w
 8007d10:	0dfdf709 	.word	0x0dfdf709
 8007d14:	3f023de1 	.word	0x3f023de1
 8007d18:	7501b288 	.word	0x7501b288
 8007d1c:	3f49efe0 	.word	0x3f49efe0
 8007d20:	b5688f3b 	.word	0xb5688f3b
 8007d24:	3fa48228 	.word	0x3fa48228
 8007d28:	0e884455 	.word	0x0e884455
 8007d2c:	3fc9c155 	.word	0x3fc9c155
 8007d30:	03eb6f7d 	.word	0x03eb6f7d
 8007d34:	3fd4d612 	.word	0x3fd4d612
 8007d38:	55555555 	.word	0x55555555
 8007d3c:	3fc55555 	.word	0x3fc55555
 8007d40:	b12e9282 	.word	0xb12e9282
 8007d44:	3fb3b8c5 	.word	0x3fb3b8c5
 8007d48:	1b8d0159 	.word	0x1b8d0159
 8007d4c:	3fe6066c 	.word	0x3fe6066c
 8007d50:	9c598ac8 	.word	0x9c598ac8
 8007d54:	40002ae5 	.word	0x40002ae5
 8007d58:	1c8a2d4b 	.word	0x1c8a2d4b
 8007d5c:	40033a27 	.word	0x40033a27
	...
 8007d68:	54442d18 	.word	0x54442d18
 8007d6c:	3ff921fb 	.word	0x3ff921fb
 8007d70:	3ff00000 	.word	0x3ff00000
 8007d74:	3fe00000 	.word	0x3fe00000

08007d78 <__ieee754_exp>:
 8007d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d7c:	ec55 4b10 	vmov	r4, r5, d0
 8007d80:	49b5      	ldr	r1, [pc, #724]	; (8008058 <__ieee754_exp+0x2e0>)
 8007d82:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8007d86:	428a      	cmp	r2, r1
 8007d88:	ed2d 8b04 	vpush	{d8-d9}
 8007d8c:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8007d90:	d93b      	bls.n	8007e0a <__ieee754_exp+0x92>
 8007d92:	49b2      	ldr	r1, [pc, #712]	; (800805c <__ieee754_exp+0x2e4>)
 8007d94:	428a      	cmp	r2, r1
 8007d96:	d916      	bls.n	8007dc6 <__ieee754_exp+0x4e>
 8007d98:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8007d9c:	4323      	orrs	r3, r4
 8007d9e:	ee10 2a10 	vmov	r2, s0
 8007da2:	d007      	beq.n	8007db4 <__ieee754_exp+0x3c>
 8007da4:	462b      	mov	r3, r5
 8007da6:	4620      	mov	r0, r4
 8007da8:	4629      	mov	r1, r5
 8007daa:	f7f8 fa7f 	bl	80002ac <__adddf3>
 8007dae:	4604      	mov	r4, r0
 8007db0:	460d      	mov	r5, r1
 8007db2:	e002      	b.n	8007dba <__ieee754_exp+0x42>
 8007db4:	b10e      	cbz	r6, 8007dba <__ieee754_exp+0x42>
 8007db6:	2400      	movs	r4, #0
 8007db8:	2500      	movs	r5, #0
 8007dba:	ecbd 8b04 	vpop	{d8-d9}
 8007dbe:	ec45 4b10 	vmov	d0, r4, r5
 8007dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dc6:	a38e      	add	r3, pc, #568	; (adr r3, 8008000 <__ieee754_exp+0x288>)
 8007dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dcc:	ee10 0a10 	vmov	r0, s0
 8007dd0:	4629      	mov	r1, r5
 8007dd2:	f7f8 feb1 	bl	8000b38 <__aeabi_dcmpgt>
 8007dd6:	4607      	mov	r7, r0
 8007dd8:	b130      	cbz	r0, 8007de8 <__ieee754_exp+0x70>
 8007dda:	ecbd 8b04 	vpop	{d8-d9}
 8007dde:	2000      	movs	r0, #0
 8007de0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007de4:	f001 bae1 	b.w	80093aa <__math_oflow>
 8007de8:	a387      	add	r3, pc, #540	; (adr r3, 8008008 <__ieee754_exp+0x290>)
 8007dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dee:	4620      	mov	r0, r4
 8007df0:	4629      	mov	r1, r5
 8007df2:	f7f8 fe83 	bl	8000afc <__aeabi_dcmplt>
 8007df6:	2800      	cmp	r0, #0
 8007df8:	f000 808b 	beq.w	8007f12 <__ieee754_exp+0x19a>
 8007dfc:	ecbd 8b04 	vpop	{d8-d9}
 8007e00:	4638      	mov	r0, r7
 8007e02:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e06:	f001 bac7 	b.w	8009398 <__math_uflow>
 8007e0a:	4b95      	ldr	r3, [pc, #596]	; (8008060 <__ieee754_exp+0x2e8>)
 8007e0c:	429a      	cmp	r2, r3
 8007e0e:	f240 80ac 	bls.w	8007f6a <__ieee754_exp+0x1f2>
 8007e12:	4b94      	ldr	r3, [pc, #592]	; (8008064 <__ieee754_exp+0x2ec>)
 8007e14:	429a      	cmp	r2, r3
 8007e16:	d87c      	bhi.n	8007f12 <__ieee754_exp+0x19a>
 8007e18:	4b93      	ldr	r3, [pc, #588]	; (8008068 <__ieee754_exp+0x2f0>)
 8007e1a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e22:	ee10 0a10 	vmov	r0, s0
 8007e26:	4629      	mov	r1, r5
 8007e28:	f7f8 fa3e 	bl	80002a8 <__aeabi_dsub>
 8007e2c:	4b8f      	ldr	r3, [pc, #572]	; (800806c <__ieee754_exp+0x2f4>)
 8007e2e:	00f7      	lsls	r7, r6, #3
 8007e30:	443b      	add	r3, r7
 8007e32:	ed93 7b00 	vldr	d7, [r3]
 8007e36:	f1c6 0a01 	rsb	sl, r6, #1
 8007e3a:	4680      	mov	r8, r0
 8007e3c:	4689      	mov	r9, r1
 8007e3e:	ebaa 0a06 	sub.w	sl, sl, r6
 8007e42:	eeb0 8a47 	vmov.f32	s16, s14
 8007e46:	eef0 8a67 	vmov.f32	s17, s15
 8007e4a:	ec53 2b18 	vmov	r2, r3, d8
 8007e4e:	4640      	mov	r0, r8
 8007e50:	4649      	mov	r1, r9
 8007e52:	f7f8 fa29 	bl	80002a8 <__aeabi_dsub>
 8007e56:	4604      	mov	r4, r0
 8007e58:	460d      	mov	r5, r1
 8007e5a:	4622      	mov	r2, r4
 8007e5c:	462b      	mov	r3, r5
 8007e5e:	4620      	mov	r0, r4
 8007e60:	4629      	mov	r1, r5
 8007e62:	f7f8 fbd9 	bl	8000618 <__aeabi_dmul>
 8007e66:	a36a      	add	r3, pc, #424	; (adr r3, 8008010 <__ieee754_exp+0x298>)
 8007e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e6c:	4606      	mov	r6, r0
 8007e6e:	460f      	mov	r7, r1
 8007e70:	f7f8 fbd2 	bl	8000618 <__aeabi_dmul>
 8007e74:	a368      	add	r3, pc, #416	; (adr r3, 8008018 <__ieee754_exp+0x2a0>)
 8007e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e7a:	f7f8 fa15 	bl	80002a8 <__aeabi_dsub>
 8007e7e:	4632      	mov	r2, r6
 8007e80:	463b      	mov	r3, r7
 8007e82:	f7f8 fbc9 	bl	8000618 <__aeabi_dmul>
 8007e86:	a366      	add	r3, pc, #408	; (adr r3, 8008020 <__ieee754_exp+0x2a8>)
 8007e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e8c:	f7f8 fa0e 	bl	80002ac <__adddf3>
 8007e90:	4632      	mov	r2, r6
 8007e92:	463b      	mov	r3, r7
 8007e94:	f7f8 fbc0 	bl	8000618 <__aeabi_dmul>
 8007e98:	a363      	add	r3, pc, #396	; (adr r3, 8008028 <__ieee754_exp+0x2b0>)
 8007e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e9e:	f7f8 fa03 	bl	80002a8 <__aeabi_dsub>
 8007ea2:	4632      	mov	r2, r6
 8007ea4:	463b      	mov	r3, r7
 8007ea6:	f7f8 fbb7 	bl	8000618 <__aeabi_dmul>
 8007eaa:	a361      	add	r3, pc, #388	; (adr r3, 8008030 <__ieee754_exp+0x2b8>)
 8007eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eb0:	f7f8 f9fc 	bl	80002ac <__adddf3>
 8007eb4:	4632      	mov	r2, r6
 8007eb6:	463b      	mov	r3, r7
 8007eb8:	f7f8 fbae 	bl	8000618 <__aeabi_dmul>
 8007ebc:	4602      	mov	r2, r0
 8007ebe:	460b      	mov	r3, r1
 8007ec0:	4620      	mov	r0, r4
 8007ec2:	4629      	mov	r1, r5
 8007ec4:	f7f8 f9f0 	bl	80002a8 <__aeabi_dsub>
 8007ec8:	4602      	mov	r2, r0
 8007eca:	460b      	mov	r3, r1
 8007ecc:	4606      	mov	r6, r0
 8007ece:	460f      	mov	r7, r1
 8007ed0:	4620      	mov	r0, r4
 8007ed2:	4629      	mov	r1, r5
 8007ed4:	f7f8 fba0 	bl	8000618 <__aeabi_dmul>
 8007ed8:	ec41 0b19 	vmov	d9, r0, r1
 8007edc:	f1ba 0f00 	cmp.w	sl, #0
 8007ee0:	d15d      	bne.n	8007f9e <__ieee754_exp+0x226>
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007ee8:	4630      	mov	r0, r6
 8007eea:	4639      	mov	r1, r7
 8007eec:	f7f8 f9dc 	bl	80002a8 <__aeabi_dsub>
 8007ef0:	4602      	mov	r2, r0
 8007ef2:	460b      	mov	r3, r1
 8007ef4:	ec51 0b19 	vmov	r0, r1, d9
 8007ef8:	f7f8 fcb8 	bl	800086c <__aeabi_ddiv>
 8007efc:	4622      	mov	r2, r4
 8007efe:	462b      	mov	r3, r5
 8007f00:	f7f8 f9d2 	bl	80002a8 <__aeabi_dsub>
 8007f04:	4602      	mov	r2, r0
 8007f06:	460b      	mov	r3, r1
 8007f08:	2000      	movs	r0, #0
 8007f0a:	4959      	ldr	r1, [pc, #356]	; (8008070 <__ieee754_exp+0x2f8>)
 8007f0c:	f7f8 f9cc 	bl	80002a8 <__aeabi_dsub>
 8007f10:	e74d      	b.n	8007dae <__ieee754_exp+0x36>
 8007f12:	4b58      	ldr	r3, [pc, #352]	; (8008074 <__ieee754_exp+0x2fc>)
 8007f14:	4620      	mov	r0, r4
 8007f16:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8007f1a:	4629      	mov	r1, r5
 8007f1c:	a346      	add	r3, pc, #280	; (adr r3, 8008038 <__ieee754_exp+0x2c0>)
 8007f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f22:	f7f8 fb79 	bl	8000618 <__aeabi_dmul>
 8007f26:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007f2a:	f7f8 f9bf 	bl	80002ac <__adddf3>
 8007f2e:	f7f8 fe23 	bl	8000b78 <__aeabi_d2iz>
 8007f32:	4682      	mov	sl, r0
 8007f34:	f7f8 fb06 	bl	8000544 <__aeabi_i2d>
 8007f38:	a341      	add	r3, pc, #260	; (adr r3, 8008040 <__ieee754_exp+0x2c8>)
 8007f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f3e:	4606      	mov	r6, r0
 8007f40:	460f      	mov	r7, r1
 8007f42:	f7f8 fb69 	bl	8000618 <__aeabi_dmul>
 8007f46:	4602      	mov	r2, r0
 8007f48:	460b      	mov	r3, r1
 8007f4a:	4620      	mov	r0, r4
 8007f4c:	4629      	mov	r1, r5
 8007f4e:	f7f8 f9ab 	bl	80002a8 <__aeabi_dsub>
 8007f52:	a33d      	add	r3, pc, #244	; (adr r3, 8008048 <__ieee754_exp+0x2d0>)
 8007f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f58:	4680      	mov	r8, r0
 8007f5a:	4689      	mov	r9, r1
 8007f5c:	4630      	mov	r0, r6
 8007f5e:	4639      	mov	r1, r7
 8007f60:	f7f8 fb5a 	bl	8000618 <__aeabi_dmul>
 8007f64:	ec41 0b18 	vmov	d8, r0, r1
 8007f68:	e76f      	b.n	8007e4a <__ieee754_exp+0xd2>
 8007f6a:	4b43      	ldr	r3, [pc, #268]	; (8008078 <__ieee754_exp+0x300>)
 8007f6c:	429a      	cmp	r2, r3
 8007f6e:	d811      	bhi.n	8007f94 <__ieee754_exp+0x21c>
 8007f70:	a337      	add	r3, pc, #220	; (adr r3, 8008050 <__ieee754_exp+0x2d8>)
 8007f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f76:	ee10 0a10 	vmov	r0, s0
 8007f7a:	4629      	mov	r1, r5
 8007f7c:	f7f8 f996 	bl	80002ac <__adddf3>
 8007f80:	4b3b      	ldr	r3, [pc, #236]	; (8008070 <__ieee754_exp+0x2f8>)
 8007f82:	2200      	movs	r2, #0
 8007f84:	f7f8 fdd8 	bl	8000b38 <__aeabi_dcmpgt>
 8007f88:	b138      	cbz	r0, 8007f9a <__ieee754_exp+0x222>
 8007f8a:	4b39      	ldr	r3, [pc, #228]	; (8008070 <__ieee754_exp+0x2f8>)
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	4620      	mov	r0, r4
 8007f90:	4629      	mov	r1, r5
 8007f92:	e70a      	b.n	8007daa <__ieee754_exp+0x32>
 8007f94:	f04f 0a00 	mov.w	sl, #0
 8007f98:	e75f      	b.n	8007e5a <__ieee754_exp+0xe2>
 8007f9a:	4682      	mov	sl, r0
 8007f9c:	e75d      	b.n	8007e5a <__ieee754_exp+0xe2>
 8007f9e:	4632      	mov	r2, r6
 8007fa0:	463b      	mov	r3, r7
 8007fa2:	2000      	movs	r0, #0
 8007fa4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8007fa8:	f7f8 f97e 	bl	80002a8 <__aeabi_dsub>
 8007fac:	4602      	mov	r2, r0
 8007fae:	460b      	mov	r3, r1
 8007fb0:	ec51 0b19 	vmov	r0, r1, d9
 8007fb4:	f7f8 fc5a 	bl	800086c <__aeabi_ddiv>
 8007fb8:	4602      	mov	r2, r0
 8007fba:	460b      	mov	r3, r1
 8007fbc:	ec51 0b18 	vmov	r0, r1, d8
 8007fc0:	f7f8 f972 	bl	80002a8 <__aeabi_dsub>
 8007fc4:	4642      	mov	r2, r8
 8007fc6:	464b      	mov	r3, r9
 8007fc8:	f7f8 f96e 	bl	80002a8 <__aeabi_dsub>
 8007fcc:	4602      	mov	r2, r0
 8007fce:	460b      	mov	r3, r1
 8007fd0:	2000      	movs	r0, #0
 8007fd2:	4927      	ldr	r1, [pc, #156]	; (8008070 <__ieee754_exp+0x2f8>)
 8007fd4:	f7f8 f968 	bl	80002a8 <__aeabi_dsub>
 8007fd8:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 8007fdc:	4592      	cmp	sl, r2
 8007fde:	db02      	blt.n	8007fe6 <__ieee754_exp+0x26e>
 8007fe0:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8007fe4:	e6e3      	b.n	8007dae <__ieee754_exp+0x36>
 8007fe6:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 8007fea:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8007fee:	2200      	movs	r2, #0
 8007ff0:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8007ff4:	f7f8 fb10 	bl	8000618 <__aeabi_dmul>
 8007ff8:	e6d9      	b.n	8007dae <__ieee754_exp+0x36>
 8007ffa:	bf00      	nop
 8007ffc:	f3af 8000 	nop.w
 8008000:	fefa39ef 	.word	0xfefa39ef
 8008004:	40862e42 	.word	0x40862e42
 8008008:	d52d3051 	.word	0xd52d3051
 800800c:	c0874910 	.word	0xc0874910
 8008010:	72bea4d0 	.word	0x72bea4d0
 8008014:	3e663769 	.word	0x3e663769
 8008018:	c5d26bf1 	.word	0xc5d26bf1
 800801c:	3ebbbd41 	.word	0x3ebbbd41
 8008020:	af25de2c 	.word	0xaf25de2c
 8008024:	3f11566a 	.word	0x3f11566a
 8008028:	16bebd93 	.word	0x16bebd93
 800802c:	3f66c16c 	.word	0x3f66c16c
 8008030:	5555553e 	.word	0x5555553e
 8008034:	3fc55555 	.word	0x3fc55555
 8008038:	652b82fe 	.word	0x652b82fe
 800803c:	3ff71547 	.word	0x3ff71547
 8008040:	fee00000 	.word	0xfee00000
 8008044:	3fe62e42 	.word	0x3fe62e42
 8008048:	35793c76 	.word	0x35793c76
 800804c:	3dea39ef 	.word	0x3dea39ef
 8008050:	8800759c 	.word	0x8800759c
 8008054:	7e37e43c 	.word	0x7e37e43c
 8008058:	40862e41 	.word	0x40862e41
 800805c:	7fefffff 	.word	0x7fefffff
 8008060:	3fd62e42 	.word	0x3fd62e42
 8008064:	3ff0a2b1 	.word	0x3ff0a2b1
 8008068:	08009d10 	.word	0x08009d10
 800806c:	08009d20 	.word	0x08009d20
 8008070:	3ff00000 	.word	0x3ff00000
 8008074:	08009d00 	.word	0x08009d00
 8008078:	3defffff 	.word	0x3defffff
 800807c:	00000000 	.word	0x00000000

08008080 <__ieee754_log>:
 8008080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008084:	ec51 0b10 	vmov	r0, r1, d0
 8008088:	ed2d 8b04 	vpush	{d8-d9}
 800808c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8008090:	b083      	sub	sp, #12
 8008092:	460d      	mov	r5, r1
 8008094:	da29      	bge.n	80080ea <__ieee754_log+0x6a>
 8008096:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800809a:	4303      	orrs	r3, r0
 800809c:	ee10 2a10 	vmov	r2, s0
 80080a0:	d10c      	bne.n	80080bc <__ieee754_log+0x3c>
 80080a2:	49cf      	ldr	r1, [pc, #828]	; (80083e0 <__ieee754_log+0x360>)
 80080a4:	2200      	movs	r2, #0
 80080a6:	2300      	movs	r3, #0
 80080a8:	2000      	movs	r0, #0
 80080aa:	f7f8 fbdf 	bl	800086c <__aeabi_ddiv>
 80080ae:	ec41 0b10 	vmov	d0, r0, r1
 80080b2:	b003      	add	sp, #12
 80080b4:	ecbd 8b04 	vpop	{d8-d9}
 80080b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080bc:	2900      	cmp	r1, #0
 80080be:	da05      	bge.n	80080cc <__ieee754_log+0x4c>
 80080c0:	460b      	mov	r3, r1
 80080c2:	f7f8 f8f1 	bl	80002a8 <__aeabi_dsub>
 80080c6:	2200      	movs	r2, #0
 80080c8:	2300      	movs	r3, #0
 80080ca:	e7ee      	b.n	80080aa <__ieee754_log+0x2a>
 80080cc:	4bc5      	ldr	r3, [pc, #788]	; (80083e4 <__ieee754_log+0x364>)
 80080ce:	2200      	movs	r2, #0
 80080d0:	f7f8 faa2 	bl	8000618 <__aeabi_dmul>
 80080d4:	f06f 0335 	mvn.w	r3, #53	; 0x35
 80080d8:	460d      	mov	r5, r1
 80080da:	4ac3      	ldr	r2, [pc, #780]	; (80083e8 <__ieee754_log+0x368>)
 80080dc:	4295      	cmp	r5, r2
 80080de:	dd06      	ble.n	80080ee <__ieee754_log+0x6e>
 80080e0:	4602      	mov	r2, r0
 80080e2:	460b      	mov	r3, r1
 80080e4:	f7f8 f8e2 	bl	80002ac <__adddf3>
 80080e8:	e7e1      	b.n	80080ae <__ieee754_log+0x2e>
 80080ea:	2300      	movs	r3, #0
 80080ec:	e7f5      	b.n	80080da <__ieee754_log+0x5a>
 80080ee:	152c      	asrs	r4, r5, #20
 80080f0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80080f4:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80080f8:	441c      	add	r4, r3
 80080fa:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 80080fe:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8008102:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008106:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800810a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800810e:	ea42 0105 	orr.w	r1, r2, r5
 8008112:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8008116:	2200      	movs	r2, #0
 8008118:	4bb4      	ldr	r3, [pc, #720]	; (80083ec <__ieee754_log+0x36c>)
 800811a:	f7f8 f8c5 	bl	80002a8 <__aeabi_dsub>
 800811e:	1cab      	adds	r3, r5, #2
 8008120:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008124:	2b02      	cmp	r3, #2
 8008126:	4682      	mov	sl, r0
 8008128:	468b      	mov	fp, r1
 800812a:	f04f 0200 	mov.w	r2, #0
 800812e:	dc53      	bgt.n	80081d8 <__ieee754_log+0x158>
 8008130:	2300      	movs	r3, #0
 8008132:	f7f8 fcd9 	bl	8000ae8 <__aeabi_dcmpeq>
 8008136:	b1d0      	cbz	r0, 800816e <__ieee754_log+0xee>
 8008138:	2c00      	cmp	r4, #0
 800813a:	f000 8122 	beq.w	8008382 <__ieee754_log+0x302>
 800813e:	4620      	mov	r0, r4
 8008140:	f7f8 fa00 	bl	8000544 <__aeabi_i2d>
 8008144:	a390      	add	r3, pc, #576	; (adr r3, 8008388 <__ieee754_log+0x308>)
 8008146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800814a:	4606      	mov	r6, r0
 800814c:	460f      	mov	r7, r1
 800814e:	f7f8 fa63 	bl	8000618 <__aeabi_dmul>
 8008152:	a38f      	add	r3, pc, #572	; (adr r3, 8008390 <__ieee754_log+0x310>)
 8008154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008158:	4604      	mov	r4, r0
 800815a:	460d      	mov	r5, r1
 800815c:	4630      	mov	r0, r6
 800815e:	4639      	mov	r1, r7
 8008160:	f7f8 fa5a 	bl	8000618 <__aeabi_dmul>
 8008164:	4602      	mov	r2, r0
 8008166:	460b      	mov	r3, r1
 8008168:	4620      	mov	r0, r4
 800816a:	4629      	mov	r1, r5
 800816c:	e7ba      	b.n	80080e4 <__ieee754_log+0x64>
 800816e:	a38a      	add	r3, pc, #552	; (adr r3, 8008398 <__ieee754_log+0x318>)
 8008170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008174:	4650      	mov	r0, sl
 8008176:	4659      	mov	r1, fp
 8008178:	f7f8 fa4e 	bl	8000618 <__aeabi_dmul>
 800817c:	4602      	mov	r2, r0
 800817e:	460b      	mov	r3, r1
 8008180:	2000      	movs	r0, #0
 8008182:	499b      	ldr	r1, [pc, #620]	; (80083f0 <__ieee754_log+0x370>)
 8008184:	f7f8 f890 	bl	80002a8 <__aeabi_dsub>
 8008188:	4652      	mov	r2, sl
 800818a:	4606      	mov	r6, r0
 800818c:	460f      	mov	r7, r1
 800818e:	465b      	mov	r3, fp
 8008190:	4650      	mov	r0, sl
 8008192:	4659      	mov	r1, fp
 8008194:	f7f8 fa40 	bl	8000618 <__aeabi_dmul>
 8008198:	4602      	mov	r2, r0
 800819a:	460b      	mov	r3, r1
 800819c:	4630      	mov	r0, r6
 800819e:	4639      	mov	r1, r7
 80081a0:	f7f8 fa3a 	bl	8000618 <__aeabi_dmul>
 80081a4:	4606      	mov	r6, r0
 80081a6:	460f      	mov	r7, r1
 80081a8:	b914      	cbnz	r4, 80081b0 <__ieee754_log+0x130>
 80081aa:	4632      	mov	r2, r6
 80081ac:	463b      	mov	r3, r7
 80081ae:	e0a2      	b.n	80082f6 <__ieee754_log+0x276>
 80081b0:	4620      	mov	r0, r4
 80081b2:	f7f8 f9c7 	bl	8000544 <__aeabi_i2d>
 80081b6:	a374      	add	r3, pc, #464	; (adr r3, 8008388 <__ieee754_log+0x308>)
 80081b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081bc:	4680      	mov	r8, r0
 80081be:	4689      	mov	r9, r1
 80081c0:	f7f8 fa2a 	bl	8000618 <__aeabi_dmul>
 80081c4:	a372      	add	r3, pc, #456	; (adr r3, 8008390 <__ieee754_log+0x310>)
 80081c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ca:	4604      	mov	r4, r0
 80081cc:	460d      	mov	r5, r1
 80081ce:	4640      	mov	r0, r8
 80081d0:	4649      	mov	r1, r9
 80081d2:	f7f8 fa21 	bl	8000618 <__aeabi_dmul>
 80081d6:	e0a7      	b.n	8008328 <__ieee754_log+0x2a8>
 80081d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80081dc:	f7f8 f866 	bl	80002ac <__adddf3>
 80081e0:	4602      	mov	r2, r0
 80081e2:	460b      	mov	r3, r1
 80081e4:	4650      	mov	r0, sl
 80081e6:	4659      	mov	r1, fp
 80081e8:	f7f8 fb40 	bl	800086c <__aeabi_ddiv>
 80081ec:	ec41 0b18 	vmov	d8, r0, r1
 80081f0:	4620      	mov	r0, r4
 80081f2:	f7f8 f9a7 	bl	8000544 <__aeabi_i2d>
 80081f6:	ec53 2b18 	vmov	r2, r3, d8
 80081fa:	ec41 0b19 	vmov	d9, r0, r1
 80081fe:	ec51 0b18 	vmov	r0, r1, d8
 8008202:	f7f8 fa09 	bl	8000618 <__aeabi_dmul>
 8008206:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800820a:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800820e:	9301      	str	r3, [sp, #4]
 8008210:	4602      	mov	r2, r0
 8008212:	460b      	mov	r3, r1
 8008214:	4680      	mov	r8, r0
 8008216:	4689      	mov	r9, r1
 8008218:	f7f8 f9fe 	bl	8000618 <__aeabi_dmul>
 800821c:	a360      	add	r3, pc, #384	; (adr r3, 80083a0 <__ieee754_log+0x320>)
 800821e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008222:	4606      	mov	r6, r0
 8008224:	460f      	mov	r7, r1
 8008226:	f7f8 f9f7 	bl	8000618 <__aeabi_dmul>
 800822a:	a35f      	add	r3, pc, #380	; (adr r3, 80083a8 <__ieee754_log+0x328>)
 800822c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008230:	f7f8 f83c 	bl	80002ac <__adddf3>
 8008234:	4632      	mov	r2, r6
 8008236:	463b      	mov	r3, r7
 8008238:	f7f8 f9ee 	bl	8000618 <__aeabi_dmul>
 800823c:	a35c      	add	r3, pc, #368	; (adr r3, 80083b0 <__ieee754_log+0x330>)
 800823e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008242:	f7f8 f833 	bl	80002ac <__adddf3>
 8008246:	4632      	mov	r2, r6
 8008248:	463b      	mov	r3, r7
 800824a:	f7f8 f9e5 	bl	8000618 <__aeabi_dmul>
 800824e:	a35a      	add	r3, pc, #360	; (adr r3, 80083b8 <__ieee754_log+0x338>)
 8008250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008254:	f7f8 f82a 	bl	80002ac <__adddf3>
 8008258:	4642      	mov	r2, r8
 800825a:	464b      	mov	r3, r9
 800825c:	f7f8 f9dc 	bl	8000618 <__aeabi_dmul>
 8008260:	a357      	add	r3, pc, #348	; (adr r3, 80083c0 <__ieee754_log+0x340>)
 8008262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008266:	4680      	mov	r8, r0
 8008268:	4689      	mov	r9, r1
 800826a:	4630      	mov	r0, r6
 800826c:	4639      	mov	r1, r7
 800826e:	f7f8 f9d3 	bl	8000618 <__aeabi_dmul>
 8008272:	a355      	add	r3, pc, #340	; (adr r3, 80083c8 <__ieee754_log+0x348>)
 8008274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008278:	f7f8 f818 	bl	80002ac <__adddf3>
 800827c:	4632      	mov	r2, r6
 800827e:	463b      	mov	r3, r7
 8008280:	f7f8 f9ca 	bl	8000618 <__aeabi_dmul>
 8008284:	a352      	add	r3, pc, #328	; (adr r3, 80083d0 <__ieee754_log+0x350>)
 8008286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800828a:	f7f8 f80f 	bl	80002ac <__adddf3>
 800828e:	4632      	mov	r2, r6
 8008290:	463b      	mov	r3, r7
 8008292:	f7f8 f9c1 	bl	8000618 <__aeabi_dmul>
 8008296:	460b      	mov	r3, r1
 8008298:	4602      	mov	r2, r0
 800829a:	4649      	mov	r1, r9
 800829c:	4640      	mov	r0, r8
 800829e:	f7f8 f805 	bl	80002ac <__adddf3>
 80082a2:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 80082a6:	9b01      	ldr	r3, [sp, #4]
 80082a8:	3551      	adds	r5, #81	; 0x51
 80082aa:	431d      	orrs	r5, r3
 80082ac:	2d00      	cmp	r5, #0
 80082ae:	4680      	mov	r8, r0
 80082b0:	4689      	mov	r9, r1
 80082b2:	dd48      	ble.n	8008346 <__ieee754_log+0x2c6>
 80082b4:	4b4e      	ldr	r3, [pc, #312]	; (80083f0 <__ieee754_log+0x370>)
 80082b6:	2200      	movs	r2, #0
 80082b8:	4650      	mov	r0, sl
 80082ba:	4659      	mov	r1, fp
 80082bc:	f7f8 f9ac 	bl	8000618 <__aeabi_dmul>
 80082c0:	4652      	mov	r2, sl
 80082c2:	465b      	mov	r3, fp
 80082c4:	f7f8 f9a8 	bl	8000618 <__aeabi_dmul>
 80082c8:	4602      	mov	r2, r0
 80082ca:	460b      	mov	r3, r1
 80082cc:	4606      	mov	r6, r0
 80082ce:	460f      	mov	r7, r1
 80082d0:	4640      	mov	r0, r8
 80082d2:	4649      	mov	r1, r9
 80082d4:	f7f7 ffea 	bl	80002ac <__adddf3>
 80082d8:	ec53 2b18 	vmov	r2, r3, d8
 80082dc:	f7f8 f99c 	bl	8000618 <__aeabi_dmul>
 80082e0:	4680      	mov	r8, r0
 80082e2:	4689      	mov	r9, r1
 80082e4:	b964      	cbnz	r4, 8008300 <__ieee754_log+0x280>
 80082e6:	4602      	mov	r2, r0
 80082e8:	460b      	mov	r3, r1
 80082ea:	4630      	mov	r0, r6
 80082ec:	4639      	mov	r1, r7
 80082ee:	f7f7 ffdb 	bl	80002a8 <__aeabi_dsub>
 80082f2:	4602      	mov	r2, r0
 80082f4:	460b      	mov	r3, r1
 80082f6:	4650      	mov	r0, sl
 80082f8:	4659      	mov	r1, fp
 80082fa:	f7f7 ffd5 	bl	80002a8 <__aeabi_dsub>
 80082fe:	e6d6      	b.n	80080ae <__ieee754_log+0x2e>
 8008300:	a321      	add	r3, pc, #132	; (adr r3, 8008388 <__ieee754_log+0x308>)
 8008302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008306:	ec51 0b19 	vmov	r0, r1, d9
 800830a:	f7f8 f985 	bl	8000618 <__aeabi_dmul>
 800830e:	a320      	add	r3, pc, #128	; (adr r3, 8008390 <__ieee754_log+0x310>)
 8008310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008314:	4604      	mov	r4, r0
 8008316:	460d      	mov	r5, r1
 8008318:	ec51 0b19 	vmov	r0, r1, d9
 800831c:	f7f8 f97c 	bl	8000618 <__aeabi_dmul>
 8008320:	4642      	mov	r2, r8
 8008322:	464b      	mov	r3, r9
 8008324:	f7f7 ffc2 	bl	80002ac <__adddf3>
 8008328:	4602      	mov	r2, r0
 800832a:	460b      	mov	r3, r1
 800832c:	4630      	mov	r0, r6
 800832e:	4639      	mov	r1, r7
 8008330:	f7f7 ffba 	bl	80002a8 <__aeabi_dsub>
 8008334:	4652      	mov	r2, sl
 8008336:	465b      	mov	r3, fp
 8008338:	f7f7 ffb6 	bl	80002a8 <__aeabi_dsub>
 800833c:	4602      	mov	r2, r0
 800833e:	460b      	mov	r3, r1
 8008340:	4620      	mov	r0, r4
 8008342:	4629      	mov	r1, r5
 8008344:	e7d9      	b.n	80082fa <__ieee754_log+0x27a>
 8008346:	4602      	mov	r2, r0
 8008348:	460b      	mov	r3, r1
 800834a:	4650      	mov	r0, sl
 800834c:	4659      	mov	r1, fp
 800834e:	f7f7 ffab 	bl	80002a8 <__aeabi_dsub>
 8008352:	ec53 2b18 	vmov	r2, r3, d8
 8008356:	f7f8 f95f 	bl	8000618 <__aeabi_dmul>
 800835a:	4606      	mov	r6, r0
 800835c:	460f      	mov	r7, r1
 800835e:	2c00      	cmp	r4, #0
 8008360:	f43f af23 	beq.w	80081aa <__ieee754_log+0x12a>
 8008364:	a308      	add	r3, pc, #32	; (adr r3, 8008388 <__ieee754_log+0x308>)
 8008366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800836a:	ec51 0b19 	vmov	r0, r1, d9
 800836e:	f7f8 f953 	bl	8000618 <__aeabi_dmul>
 8008372:	a307      	add	r3, pc, #28	; (adr r3, 8008390 <__ieee754_log+0x310>)
 8008374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008378:	4604      	mov	r4, r0
 800837a:	460d      	mov	r5, r1
 800837c:	ec51 0b19 	vmov	r0, r1, d9
 8008380:	e727      	b.n	80081d2 <__ieee754_log+0x152>
 8008382:	ed9f 0b15 	vldr	d0, [pc, #84]	; 80083d8 <__ieee754_log+0x358>
 8008386:	e694      	b.n	80080b2 <__ieee754_log+0x32>
 8008388:	fee00000 	.word	0xfee00000
 800838c:	3fe62e42 	.word	0x3fe62e42
 8008390:	35793c76 	.word	0x35793c76
 8008394:	3dea39ef 	.word	0x3dea39ef
 8008398:	55555555 	.word	0x55555555
 800839c:	3fd55555 	.word	0x3fd55555
 80083a0:	df3e5244 	.word	0xdf3e5244
 80083a4:	3fc2f112 	.word	0x3fc2f112
 80083a8:	96cb03de 	.word	0x96cb03de
 80083ac:	3fc74664 	.word	0x3fc74664
 80083b0:	94229359 	.word	0x94229359
 80083b4:	3fd24924 	.word	0x3fd24924
 80083b8:	55555593 	.word	0x55555593
 80083bc:	3fe55555 	.word	0x3fe55555
 80083c0:	d078c69f 	.word	0xd078c69f
 80083c4:	3fc39a09 	.word	0x3fc39a09
 80083c8:	1d8e78af 	.word	0x1d8e78af
 80083cc:	3fcc71c5 	.word	0x3fcc71c5
 80083d0:	9997fa04 	.word	0x9997fa04
 80083d4:	3fd99999 	.word	0x3fd99999
	...
 80083e0:	c3500000 	.word	0xc3500000
 80083e4:	43500000 	.word	0x43500000
 80083e8:	7fefffff 	.word	0x7fefffff
 80083ec:	3ff00000 	.word	0x3ff00000
 80083f0:	3fe00000 	.word	0x3fe00000
 80083f4:	00000000 	.word	0x00000000

080083f8 <__ieee754_pow>:
 80083f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083fc:	ed2d 8b06 	vpush	{d8-d10}
 8008400:	b089      	sub	sp, #36	; 0x24
 8008402:	ed8d 1b00 	vstr	d1, [sp]
 8008406:	e9dd 2900 	ldrd	r2, r9, [sp]
 800840a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800840e:	ea58 0102 	orrs.w	r1, r8, r2
 8008412:	ec57 6b10 	vmov	r6, r7, d0
 8008416:	d115      	bne.n	8008444 <__ieee754_pow+0x4c>
 8008418:	19b3      	adds	r3, r6, r6
 800841a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800841e:	4152      	adcs	r2, r2
 8008420:	4299      	cmp	r1, r3
 8008422:	4b89      	ldr	r3, [pc, #548]	; (8008648 <__ieee754_pow+0x250>)
 8008424:	4193      	sbcs	r3, r2
 8008426:	f080 84d1 	bcs.w	8008dcc <__ieee754_pow+0x9d4>
 800842a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800842e:	4630      	mov	r0, r6
 8008430:	4639      	mov	r1, r7
 8008432:	f7f7 ff3b 	bl	80002ac <__adddf3>
 8008436:	ec41 0b10 	vmov	d0, r0, r1
 800843a:	b009      	add	sp, #36	; 0x24
 800843c:	ecbd 8b06 	vpop	{d8-d10}
 8008440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008444:	4b81      	ldr	r3, [pc, #516]	; (800864c <__ieee754_pow+0x254>)
 8008446:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800844a:	429c      	cmp	r4, r3
 800844c:	ee10 aa10 	vmov	sl, s0
 8008450:	463d      	mov	r5, r7
 8008452:	dc06      	bgt.n	8008462 <__ieee754_pow+0x6a>
 8008454:	d101      	bne.n	800845a <__ieee754_pow+0x62>
 8008456:	2e00      	cmp	r6, #0
 8008458:	d1e7      	bne.n	800842a <__ieee754_pow+0x32>
 800845a:	4598      	cmp	r8, r3
 800845c:	dc01      	bgt.n	8008462 <__ieee754_pow+0x6a>
 800845e:	d10f      	bne.n	8008480 <__ieee754_pow+0x88>
 8008460:	b172      	cbz	r2, 8008480 <__ieee754_pow+0x88>
 8008462:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8008466:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800846a:	ea55 050a 	orrs.w	r5, r5, sl
 800846e:	d1dc      	bne.n	800842a <__ieee754_pow+0x32>
 8008470:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008474:	18db      	adds	r3, r3, r3
 8008476:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800847a:	4152      	adcs	r2, r2
 800847c:	429d      	cmp	r5, r3
 800847e:	e7d0      	b.n	8008422 <__ieee754_pow+0x2a>
 8008480:	2d00      	cmp	r5, #0
 8008482:	da3b      	bge.n	80084fc <__ieee754_pow+0x104>
 8008484:	4b72      	ldr	r3, [pc, #456]	; (8008650 <__ieee754_pow+0x258>)
 8008486:	4598      	cmp	r8, r3
 8008488:	dc51      	bgt.n	800852e <__ieee754_pow+0x136>
 800848a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800848e:	4598      	cmp	r8, r3
 8008490:	f340 84ab 	ble.w	8008dea <__ieee754_pow+0x9f2>
 8008494:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008498:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800849c:	2b14      	cmp	r3, #20
 800849e:	dd0f      	ble.n	80084c0 <__ieee754_pow+0xc8>
 80084a0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80084a4:	fa22 f103 	lsr.w	r1, r2, r3
 80084a8:	fa01 f303 	lsl.w	r3, r1, r3
 80084ac:	4293      	cmp	r3, r2
 80084ae:	f040 849c 	bne.w	8008dea <__ieee754_pow+0x9f2>
 80084b2:	f001 0101 	and.w	r1, r1, #1
 80084b6:	f1c1 0302 	rsb	r3, r1, #2
 80084ba:	9304      	str	r3, [sp, #16]
 80084bc:	b182      	cbz	r2, 80084e0 <__ieee754_pow+0xe8>
 80084be:	e05f      	b.n	8008580 <__ieee754_pow+0x188>
 80084c0:	2a00      	cmp	r2, #0
 80084c2:	d15b      	bne.n	800857c <__ieee754_pow+0x184>
 80084c4:	f1c3 0314 	rsb	r3, r3, #20
 80084c8:	fa48 f103 	asr.w	r1, r8, r3
 80084cc:	fa01 f303 	lsl.w	r3, r1, r3
 80084d0:	4543      	cmp	r3, r8
 80084d2:	f040 8487 	bne.w	8008de4 <__ieee754_pow+0x9ec>
 80084d6:	f001 0101 	and.w	r1, r1, #1
 80084da:	f1c1 0302 	rsb	r3, r1, #2
 80084de:	9304      	str	r3, [sp, #16]
 80084e0:	4b5c      	ldr	r3, [pc, #368]	; (8008654 <__ieee754_pow+0x25c>)
 80084e2:	4598      	cmp	r8, r3
 80084e4:	d132      	bne.n	800854c <__ieee754_pow+0x154>
 80084e6:	f1b9 0f00 	cmp.w	r9, #0
 80084ea:	f280 8477 	bge.w	8008ddc <__ieee754_pow+0x9e4>
 80084ee:	4959      	ldr	r1, [pc, #356]	; (8008654 <__ieee754_pow+0x25c>)
 80084f0:	4632      	mov	r2, r6
 80084f2:	463b      	mov	r3, r7
 80084f4:	2000      	movs	r0, #0
 80084f6:	f7f8 f9b9 	bl	800086c <__aeabi_ddiv>
 80084fa:	e79c      	b.n	8008436 <__ieee754_pow+0x3e>
 80084fc:	2300      	movs	r3, #0
 80084fe:	9304      	str	r3, [sp, #16]
 8008500:	2a00      	cmp	r2, #0
 8008502:	d13d      	bne.n	8008580 <__ieee754_pow+0x188>
 8008504:	4b51      	ldr	r3, [pc, #324]	; (800864c <__ieee754_pow+0x254>)
 8008506:	4598      	cmp	r8, r3
 8008508:	d1ea      	bne.n	80084e0 <__ieee754_pow+0xe8>
 800850a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800850e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8008512:	ea53 030a 	orrs.w	r3, r3, sl
 8008516:	f000 8459 	beq.w	8008dcc <__ieee754_pow+0x9d4>
 800851a:	4b4f      	ldr	r3, [pc, #316]	; (8008658 <__ieee754_pow+0x260>)
 800851c:	429c      	cmp	r4, r3
 800851e:	dd08      	ble.n	8008532 <__ieee754_pow+0x13a>
 8008520:	f1b9 0f00 	cmp.w	r9, #0
 8008524:	f2c0 8456 	blt.w	8008dd4 <__ieee754_pow+0x9dc>
 8008528:	e9dd 0100 	ldrd	r0, r1, [sp]
 800852c:	e783      	b.n	8008436 <__ieee754_pow+0x3e>
 800852e:	2302      	movs	r3, #2
 8008530:	e7e5      	b.n	80084fe <__ieee754_pow+0x106>
 8008532:	f1b9 0f00 	cmp.w	r9, #0
 8008536:	f04f 0000 	mov.w	r0, #0
 800853a:	f04f 0100 	mov.w	r1, #0
 800853e:	f6bf af7a 	bge.w	8008436 <__ieee754_pow+0x3e>
 8008542:	e9dd 0300 	ldrd	r0, r3, [sp]
 8008546:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800854a:	e774      	b.n	8008436 <__ieee754_pow+0x3e>
 800854c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8008550:	d106      	bne.n	8008560 <__ieee754_pow+0x168>
 8008552:	4632      	mov	r2, r6
 8008554:	463b      	mov	r3, r7
 8008556:	4630      	mov	r0, r6
 8008558:	4639      	mov	r1, r7
 800855a:	f7f8 f85d 	bl	8000618 <__aeabi_dmul>
 800855e:	e76a      	b.n	8008436 <__ieee754_pow+0x3e>
 8008560:	4b3e      	ldr	r3, [pc, #248]	; (800865c <__ieee754_pow+0x264>)
 8008562:	4599      	cmp	r9, r3
 8008564:	d10c      	bne.n	8008580 <__ieee754_pow+0x188>
 8008566:	2d00      	cmp	r5, #0
 8008568:	db0a      	blt.n	8008580 <__ieee754_pow+0x188>
 800856a:	ec47 6b10 	vmov	d0, r6, r7
 800856e:	b009      	add	sp, #36	; 0x24
 8008570:	ecbd 8b06 	vpop	{d8-d10}
 8008574:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008578:	f7fe bf3a 	b.w	80073f0 <__ieee754_sqrt>
 800857c:	2300      	movs	r3, #0
 800857e:	9304      	str	r3, [sp, #16]
 8008580:	ec47 6b10 	vmov	d0, r6, r7
 8008584:	f7fe ff18 	bl	80073b8 <fabs>
 8008588:	ec51 0b10 	vmov	r0, r1, d0
 800858c:	f1ba 0f00 	cmp.w	sl, #0
 8008590:	d129      	bne.n	80085e6 <__ieee754_pow+0x1ee>
 8008592:	b124      	cbz	r4, 800859e <__ieee754_pow+0x1a6>
 8008594:	4b2f      	ldr	r3, [pc, #188]	; (8008654 <__ieee754_pow+0x25c>)
 8008596:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800859a:	429a      	cmp	r2, r3
 800859c:	d123      	bne.n	80085e6 <__ieee754_pow+0x1ee>
 800859e:	f1b9 0f00 	cmp.w	r9, #0
 80085a2:	da05      	bge.n	80085b0 <__ieee754_pow+0x1b8>
 80085a4:	4602      	mov	r2, r0
 80085a6:	460b      	mov	r3, r1
 80085a8:	2000      	movs	r0, #0
 80085aa:	492a      	ldr	r1, [pc, #168]	; (8008654 <__ieee754_pow+0x25c>)
 80085ac:	f7f8 f95e 	bl	800086c <__aeabi_ddiv>
 80085b0:	2d00      	cmp	r5, #0
 80085b2:	f6bf af40 	bge.w	8008436 <__ieee754_pow+0x3e>
 80085b6:	9b04      	ldr	r3, [sp, #16]
 80085b8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80085bc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80085c0:	431c      	orrs	r4, r3
 80085c2:	d108      	bne.n	80085d6 <__ieee754_pow+0x1de>
 80085c4:	4602      	mov	r2, r0
 80085c6:	460b      	mov	r3, r1
 80085c8:	4610      	mov	r0, r2
 80085ca:	4619      	mov	r1, r3
 80085cc:	f7f7 fe6c 	bl	80002a8 <__aeabi_dsub>
 80085d0:	4602      	mov	r2, r0
 80085d2:	460b      	mov	r3, r1
 80085d4:	e78f      	b.n	80084f6 <__ieee754_pow+0xfe>
 80085d6:	9b04      	ldr	r3, [sp, #16]
 80085d8:	2b01      	cmp	r3, #1
 80085da:	f47f af2c 	bne.w	8008436 <__ieee754_pow+0x3e>
 80085de:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80085e2:	4619      	mov	r1, r3
 80085e4:	e727      	b.n	8008436 <__ieee754_pow+0x3e>
 80085e6:	0feb      	lsrs	r3, r5, #31
 80085e8:	3b01      	subs	r3, #1
 80085ea:	9306      	str	r3, [sp, #24]
 80085ec:	9a06      	ldr	r2, [sp, #24]
 80085ee:	9b04      	ldr	r3, [sp, #16]
 80085f0:	4313      	orrs	r3, r2
 80085f2:	d102      	bne.n	80085fa <__ieee754_pow+0x202>
 80085f4:	4632      	mov	r2, r6
 80085f6:	463b      	mov	r3, r7
 80085f8:	e7e6      	b.n	80085c8 <__ieee754_pow+0x1d0>
 80085fa:	4b19      	ldr	r3, [pc, #100]	; (8008660 <__ieee754_pow+0x268>)
 80085fc:	4598      	cmp	r8, r3
 80085fe:	f340 80fb 	ble.w	80087f8 <__ieee754_pow+0x400>
 8008602:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8008606:	4598      	cmp	r8, r3
 8008608:	4b13      	ldr	r3, [pc, #76]	; (8008658 <__ieee754_pow+0x260>)
 800860a:	dd0c      	ble.n	8008626 <__ieee754_pow+0x22e>
 800860c:	429c      	cmp	r4, r3
 800860e:	dc0f      	bgt.n	8008630 <__ieee754_pow+0x238>
 8008610:	f1b9 0f00 	cmp.w	r9, #0
 8008614:	da0f      	bge.n	8008636 <__ieee754_pow+0x23e>
 8008616:	2000      	movs	r0, #0
 8008618:	b009      	add	sp, #36	; 0x24
 800861a:	ecbd 8b06 	vpop	{d8-d10}
 800861e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008622:	f000 bec2 	b.w	80093aa <__math_oflow>
 8008626:	429c      	cmp	r4, r3
 8008628:	dbf2      	blt.n	8008610 <__ieee754_pow+0x218>
 800862a:	4b0a      	ldr	r3, [pc, #40]	; (8008654 <__ieee754_pow+0x25c>)
 800862c:	429c      	cmp	r4, r3
 800862e:	dd19      	ble.n	8008664 <__ieee754_pow+0x26c>
 8008630:	f1b9 0f00 	cmp.w	r9, #0
 8008634:	dcef      	bgt.n	8008616 <__ieee754_pow+0x21e>
 8008636:	2000      	movs	r0, #0
 8008638:	b009      	add	sp, #36	; 0x24
 800863a:	ecbd 8b06 	vpop	{d8-d10}
 800863e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008642:	f000 bea9 	b.w	8009398 <__math_uflow>
 8008646:	bf00      	nop
 8008648:	fff00000 	.word	0xfff00000
 800864c:	7ff00000 	.word	0x7ff00000
 8008650:	433fffff 	.word	0x433fffff
 8008654:	3ff00000 	.word	0x3ff00000
 8008658:	3fefffff 	.word	0x3fefffff
 800865c:	3fe00000 	.word	0x3fe00000
 8008660:	41e00000 	.word	0x41e00000
 8008664:	4b60      	ldr	r3, [pc, #384]	; (80087e8 <__ieee754_pow+0x3f0>)
 8008666:	2200      	movs	r2, #0
 8008668:	f7f7 fe1e 	bl	80002a8 <__aeabi_dsub>
 800866c:	a354      	add	r3, pc, #336	; (adr r3, 80087c0 <__ieee754_pow+0x3c8>)
 800866e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008672:	4604      	mov	r4, r0
 8008674:	460d      	mov	r5, r1
 8008676:	f7f7 ffcf 	bl	8000618 <__aeabi_dmul>
 800867a:	a353      	add	r3, pc, #332	; (adr r3, 80087c8 <__ieee754_pow+0x3d0>)
 800867c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008680:	4606      	mov	r6, r0
 8008682:	460f      	mov	r7, r1
 8008684:	4620      	mov	r0, r4
 8008686:	4629      	mov	r1, r5
 8008688:	f7f7 ffc6 	bl	8000618 <__aeabi_dmul>
 800868c:	4b57      	ldr	r3, [pc, #348]	; (80087ec <__ieee754_pow+0x3f4>)
 800868e:	4682      	mov	sl, r0
 8008690:	468b      	mov	fp, r1
 8008692:	2200      	movs	r2, #0
 8008694:	4620      	mov	r0, r4
 8008696:	4629      	mov	r1, r5
 8008698:	f7f7 ffbe 	bl	8000618 <__aeabi_dmul>
 800869c:	4602      	mov	r2, r0
 800869e:	460b      	mov	r3, r1
 80086a0:	a14b      	add	r1, pc, #300	; (adr r1, 80087d0 <__ieee754_pow+0x3d8>)
 80086a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80086a6:	f7f7 fdff 	bl	80002a8 <__aeabi_dsub>
 80086aa:	4622      	mov	r2, r4
 80086ac:	462b      	mov	r3, r5
 80086ae:	f7f7 ffb3 	bl	8000618 <__aeabi_dmul>
 80086b2:	4602      	mov	r2, r0
 80086b4:	460b      	mov	r3, r1
 80086b6:	2000      	movs	r0, #0
 80086b8:	494d      	ldr	r1, [pc, #308]	; (80087f0 <__ieee754_pow+0x3f8>)
 80086ba:	f7f7 fdf5 	bl	80002a8 <__aeabi_dsub>
 80086be:	4622      	mov	r2, r4
 80086c0:	4680      	mov	r8, r0
 80086c2:	4689      	mov	r9, r1
 80086c4:	462b      	mov	r3, r5
 80086c6:	4620      	mov	r0, r4
 80086c8:	4629      	mov	r1, r5
 80086ca:	f7f7 ffa5 	bl	8000618 <__aeabi_dmul>
 80086ce:	4602      	mov	r2, r0
 80086d0:	460b      	mov	r3, r1
 80086d2:	4640      	mov	r0, r8
 80086d4:	4649      	mov	r1, r9
 80086d6:	f7f7 ff9f 	bl	8000618 <__aeabi_dmul>
 80086da:	a33f      	add	r3, pc, #252	; (adr r3, 80087d8 <__ieee754_pow+0x3e0>)
 80086dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086e0:	f7f7 ff9a 	bl	8000618 <__aeabi_dmul>
 80086e4:	4602      	mov	r2, r0
 80086e6:	460b      	mov	r3, r1
 80086e8:	4650      	mov	r0, sl
 80086ea:	4659      	mov	r1, fp
 80086ec:	f7f7 fddc 	bl	80002a8 <__aeabi_dsub>
 80086f0:	4602      	mov	r2, r0
 80086f2:	460b      	mov	r3, r1
 80086f4:	4680      	mov	r8, r0
 80086f6:	4689      	mov	r9, r1
 80086f8:	4630      	mov	r0, r6
 80086fa:	4639      	mov	r1, r7
 80086fc:	f7f7 fdd6 	bl	80002ac <__adddf3>
 8008700:	2000      	movs	r0, #0
 8008702:	4632      	mov	r2, r6
 8008704:	463b      	mov	r3, r7
 8008706:	4604      	mov	r4, r0
 8008708:	460d      	mov	r5, r1
 800870a:	f7f7 fdcd 	bl	80002a8 <__aeabi_dsub>
 800870e:	4602      	mov	r2, r0
 8008710:	460b      	mov	r3, r1
 8008712:	4640      	mov	r0, r8
 8008714:	4649      	mov	r1, r9
 8008716:	f7f7 fdc7 	bl	80002a8 <__aeabi_dsub>
 800871a:	9b04      	ldr	r3, [sp, #16]
 800871c:	9a06      	ldr	r2, [sp, #24]
 800871e:	3b01      	subs	r3, #1
 8008720:	4313      	orrs	r3, r2
 8008722:	4682      	mov	sl, r0
 8008724:	468b      	mov	fp, r1
 8008726:	f040 81e7 	bne.w	8008af8 <__ieee754_pow+0x700>
 800872a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80087e0 <__ieee754_pow+0x3e8>
 800872e:	eeb0 8a47 	vmov.f32	s16, s14
 8008732:	eef0 8a67 	vmov.f32	s17, s15
 8008736:	e9dd 6700 	ldrd	r6, r7, [sp]
 800873a:	2600      	movs	r6, #0
 800873c:	4632      	mov	r2, r6
 800873e:	463b      	mov	r3, r7
 8008740:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008744:	f7f7 fdb0 	bl	80002a8 <__aeabi_dsub>
 8008748:	4622      	mov	r2, r4
 800874a:	462b      	mov	r3, r5
 800874c:	f7f7 ff64 	bl	8000618 <__aeabi_dmul>
 8008750:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008754:	4680      	mov	r8, r0
 8008756:	4689      	mov	r9, r1
 8008758:	4650      	mov	r0, sl
 800875a:	4659      	mov	r1, fp
 800875c:	f7f7 ff5c 	bl	8000618 <__aeabi_dmul>
 8008760:	4602      	mov	r2, r0
 8008762:	460b      	mov	r3, r1
 8008764:	4640      	mov	r0, r8
 8008766:	4649      	mov	r1, r9
 8008768:	f7f7 fda0 	bl	80002ac <__adddf3>
 800876c:	4632      	mov	r2, r6
 800876e:	463b      	mov	r3, r7
 8008770:	4680      	mov	r8, r0
 8008772:	4689      	mov	r9, r1
 8008774:	4620      	mov	r0, r4
 8008776:	4629      	mov	r1, r5
 8008778:	f7f7 ff4e 	bl	8000618 <__aeabi_dmul>
 800877c:	460b      	mov	r3, r1
 800877e:	4604      	mov	r4, r0
 8008780:	460d      	mov	r5, r1
 8008782:	4602      	mov	r2, r0
 8008784:	4649      	mov	r1, r9
 8008786:	4640      	mov	r0, r8
 8008788:	f7f7 fd90 	bl	80002ac <__adddf3>
 800878c:	4b19      	ldr	r3, [pc, #100]	; (80087f4 <__ieee754_pow+0x3fc>)
 800878e:	4299      	cmp	r1, r3
 8008790:	ec45 4b19 	vmov	d9, r4, r5
 8008794:	4606      	mov	r6, r0
 8008796:	460f      	mov	r7, r1
 8008798:	468b      	mov	fp, r1
 800879a:	f340 82f0 	ble.w	8008d7e <__ieee754_pow+0x986>
 800879e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80087a2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80087a6:	4303      	orrs	r3, r0
 80087a8:	f000 81e4 	beq.w	8008b74 <__ieee754_pow+0x77c>
 80087ac:	ec51 0b18 	vmov	r0, r1, d8
 80087b0:	2200      	movs	r2, #0
 80087b2:	2300      	movs	r3, #0
 80087b4:	f7f8 f9a2 	bl	8000afc <__aeabi_dcmplt>
 80087b8:	3800      	subs	r0, #0
 80087ba:	bf18      	it	ne
 80087bc:	2001      	movne	r0, #1
 80087be:	e72b      	b.n	8008618 <__ieee754_pow+0x220>
 80087c0:	60000000 	.word	0x60000000
 80087c4:	3ff71547 	.word	0x3ff71547
 80087c8:	f85ddf44 	.word	0xf85ddf44
 80087cc:	3e54ae0b 	.word	0x3e54ae0b
 80087d0:	55555555 	.word	0x55555555
 80087d4:	3fd55555 	.word	0x3fd55555
 80087d8:	652b82fe 	.word	0x652b82fe
 80087dc:	3ff71547 	.word	0x3ff71547
 80087e0:	00000000 	.word	0x00000000
 80087e4:	bff00000 	.word	0xbff00000
 80087e8:	3ff00000 	.word	0x3ff00000
 80087ec:	3fd00000 	.word	0x3fd00000
 80087f0:	3fe00000 	.word	0x3fe00000
 80087f4:	408fffff 	.word	0x408fffff
 80087f8:	4bd5      	ldr	r3, [pc, #852]	; (8008b50 <__ieee754_pow+0x758>)
 80087fa:	402b      	ands	r3, r5
 80087fc:	2200      	movs	r2, #0
 80087fe:	b92b      	cbnz	r3, 800880c <__ieee754_pow+0x414>
 8008800:	4bd4      	ldr	r3, [pc, #848]	; (8008b54 <__ieee754_pow+0x75c>)
 8008802:	f7f7 ff09 	bl	8000618 <__aeabi_dmul>
 8008806:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800880a:	460c      	mov	r4, r1
 800880c:	1523      	asrs	r3, r4, #20
 800880e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008812:	4413      	add	r3, r2
 8008814:	9305      	str	r3, [sp, #20]
 8008816:	4bd0      	ldr	r3, [pc, #832]	; (8008b58 <__ieee754_pow+0x760>)
 8008818:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800881c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8008820:	429c      	cmp	r4, r3
 8008822:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008826:	dd08      	ble.n	800883a <__ieee754_pow+0x442>
 8008828:	4bcc      	ldr	r3, [pc, #816]	; (8008b5c <__ieee754_pow+0x764>)
 800882a:	429c      	cmp	r4, r3
 800882c:	f340 8162 	ble.w	8008af4 <__ieee754_pow+0x6fc>
 8008830:	9b05      	ldr	r3, [sp, #20]
 8008832:	3301      	adds	r3, #1
 8008834:	9305      	str	r3, [sp, #20]
 8008836:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800883a:	2400      	movs	r4, #0
 800883c:	00e3      	lsls	r3, r4, #3
 800883e:	9307      	str	r3, [sp, #28]
 8008840:	4bc7      	ldr	r3, [pc, #796]	; (8008b60 <__ieee754_pow+0x768>)
 8008842:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008846:	ed93 7b00 	vldr	d7, [r3]
 800884a:	4629      	mov	r1, r5
 800884c:	ec53 2b17 	vmov	r2, r3, d7
 8008850:	eeb0 9a47 	vmov.f32	s18, s14
 8008854:	eef0 9a67 	vmov.f32	s19, s15
 8008858:	4682      	mov	sl, r0
 800885a:	f7f7 fd25 	bl	80002a8 <__aeabi_dsub>
 800885e:	4652      	mov	r2, sl
 8008860:	4606      	mov	r6, r0
 8008862:	460f      	mov	r7, r1
 8008864:	462b      	mov	r3, r5
 8008866:	ec51 0b19 	vmov	r0, r1, d9
 800886a:	f7f7 fd1f 	bl	80002ac <__adddf3>
 800886e:	4602      	mov	r2, r0
 8008870:	460b      	mov	r3, r1
 8008872:	2000      	movs	r0, #0
 8008874:	49bb      	ldr	r1, [pc, #748]	; (8008b64 <__ieee754_pow+0x76c>)
 8008876:	f7f7 fff9 	bl	800086c <__aeabi_ddiv>
 800887a:	ec41 0b1a 	vmov	d10, r0, r1
 800887e:	4602      	mov	r2, r0
 8008880:	460b      	mov	r3, r1
 8008882:	4630      	mov	r0, r6
 8008884:	4639      	mov	r1, r7
 8008886:	f7f7 fec7 	bl	8000618 <__aeabi_dmul>
 800888a:	2300      	movs	r3, #0
 800888c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008890:	9302      	str	r3, [sp, #8]
 8008892:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008896:	46ab      	mov	fp, r5
 8008898:	106d      	asrs	r5, r5, #1
 800889a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800889e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80088a2:	ec41 0b18 	vmov	d8, r0, r1
 80088a6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80088aa:	2200      	movs	r2, #0
 80088ac:	4640      	mov	r0, r8
 80088ae:	4649      	mov	r1, r9
 80088b0:	4614      	mov	r4, r2
 80088b2:	461d      	mov	r5, r3
 80088b4:	f7f7 feb0 	bl	8000618 <__aeabi_dmul>
 80088b8:	4602      	mov	r2, r0
 80088ba:	460b      	mov	r3, r1
 80088bc:	4630      	mov	r0, r6
 80088be:	4639      	mov	r1, r7
 80088c0:	f7f7 fcf2 	bl	80002a8 <__aeabi_dsub>
 80088c4:	ec53 2b19 	vmov	r2, r3, d9
 80088c8:	4606      	mov	r6, r0
 80088ca:	460f      	mov	r7, r1
 80088cc:	4620      	mov	r0, r4
 80088ce:	4629      	mov	r1, r5
 80088d0:	f7f7 fcea 	bl	80002a8 <__aeabi_dsub>
 80088d4:	4602      	mov	r2, r0
 80088d6:	460b      	mov	r3, r1
 80088d8:	4650      	mov	r0, sl
 80088da:	4659      	mov	r1, fp
 80088dc:	f7f7 fce4 	bl	80002a8 <__aeabi_dsub>
 80088e0:	4642      	mov	r2, r8
 80088e2:	464b      	mov	r3, r9
 80088e4:	f7f7 fe98 	bl	8000618 <__aeabi_dmul>
 80088e8:	4602      	mov	r2, r0
 80088ea:	460b      	mov	r3, r1
 80088ec:	4630      	mov	r0, r6
 80088ee:	4639      	mov	r1, r7
 80088f0:	f7f7 fcda 	bl	80002a8 <__aeabi_dsub>
 80088f4:	ec53 2b1a 	vmov	r2, r3, d10
 80088f8:	f7f7 fe8e 	bl	8000618 <__aeabi_dmul>
 80088fc:	ec53 2b18 	vmov	r2, r3, d8
 8008900:	ec41 0b19 	vmov	d9, r0, r1
 8008904:	ec51 0b18 	vmov	r0, r1, d8
 8008908:	f7f7 fe86 	bl	8000618 <__aeabi_dmul>
 800890c:	a37c      	add	r3, pc, #496	; (adr r3, 8008b00 <__ieee754_pow+0x708>)
 800890e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008912:	4604      	mov	r4, r0
 8008914:	460d      	mov	r5, r1
 8008916:	f7f7 fe7f 	bl	8000618 <__aeabi_dmul>
 800891a:	a37b      	add	r3, pc, #492	; (adr r3, 8008b08 <__ieee754_pow+0x710>)
 800891c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008920:	f7f7 fcc4 	bl	80002ac <__adddf3>
 8008924:	4622      	mov	r2, r4
 8008926:	462b      	mov	r3, r5
 8008928:	f7f7 fe76 	bl	8000618 <__aeabi_dmul>
 800892c:	a378      	add	r3, pc, #480	; (adr r3, 8008b10 <__ieee754_pow+0x718>)
 800892e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008932:	f7f7 fcbb 	bl	80002ac <__adddf3>
 8008936:	4622      	mov	r2, r4
 8008938:	462b      	mov	r3, r5
 800893a:	f7f7 fe6d 	bl	8000618 <__aeabi_dmul>
 800893e:	a376      	add	r3, pc, #472	; (adr r3, 8008b18 <__ieee754_pow+0x720>)
 8008940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008944:	f7f7 fcb2 	bl	80002ac <__adddf3>
 8008948:	4622      	mov	r2, r4
 800894a:	462b      	mov	r3, r5
 800894c:	f7f7 fe64 	bl	8000618 <__aeabi_dmul>
 8008950:	a373      	add	r3, pc, #460	; (adr r3, 8008b20 <__ieee754_pow+0x728>)
 8008952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008956:	f7f7 fca9 	bl	80002ac <__adddf3>
 800895a:	4622      	mov	r2, r4
 800895c:	462b      	mov	r3, r5
 800895e:	f7f7 fe5b 	bl	8000618 <__aeabi_dmul>
 8008962:	a371      	add	r3, pc, #452	; (adr r3, 8008b28 <__ieee754_pow+0x730>)
 8008964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008968:	f7f7 fca0 	bl	80002ac <__adddf3>
 800896c:	4622      	mov	r2, r4
 800896e:	4606      	mov	r6, r0
 8008970:	460f      	mov	r7, r1
 8008972:	462b      	mov	r3, r5
 8008974:	4620      	mov	r0, r4
 8008976:	4629      	mov	r1, r5
 8008978:	f7f7 fe4e 	bl	8000618 <__aeabi_dmul>
 800897c:	4602      	mov	r2, r0
 800897e:	460b      	mov	r3, r1
 8008980:	4630      	mov	r0, r6
 8008982:	4639      	mov	r1, r7
 8008984:	f7f7 fe48 	bl	8000618 <__aeabi_dmul>
 8008988:	4642      	mov	r2, r8
 800898a:	4604      	mov	r4, r0
 800898c:	460d      	mov	r5, r1
 800898e:	464b      	mov	r3, r9
 8008990:	ec51 0b18 	vmov	r0, r1, d8
 8008994:	f7f7 fc8a 	bl	80002ac <__adddf3>
 8008998:	ec53 2b19 	vmov	r2, r3, d9
 800899c:	f7f7 fe3c 	bl	8000618 <__aeabi_dmul>
 80089a0:	4622      	mov	r2, r4
 80089a2:	462b      	mov	r3, r5
 80089a4:	f7f7 fc82 	bl	80002ac <__adddf3>
 80089a8:	4642      	mov	r2, r8
 80089aa:	4682      	mov	sl, r0
 80089ac:	468b      	mov	fp, r1
 80089ae:	464b      	mov	r3, r9
 80089b0:	4640      	mov	r0, r8
 80089b2:	4649      	mov	r1, r9
 80089b4:	f7f7 fe30 	bl	8000618 <__aeabi_dmul>
 80089b8:	4b6b      	ldr	r3, [pc, #428]	; (8008b68 <__ieee754_pow+0x770>)
 80089ba:	2200      	movs	r2, #0
 80089bc:	4606      	mov	r6, r0
 80089be:	460f      	mov	r7, r1
 80089c0:	f7f7 fc74 	bl	80002ac <__adddf3>
 80089c4:	4652      	mov	r2, sl
 80089c6:	465b      	mov	r3, fp
 80089c8:	f7f7 fc70 	bl	80002ac <__adddf3>
 80089cc:	2000      	movs	r0, #0
 80089ce:	4604      	mov	r4, r0
 80089d0:	460d      	mov	r5, r1
 80089d2:	4602      	mov	r2, r0
 80089d4:	460b      	mov	r3, r1
 80089d6:	4640      	mov	r0, r8
 80089d8:	4649      	mov	r1, r9
 80089da:	f7f7 fe1d 	bl	8000618 <__aeabi_dmul>
 80089de:	4b62      	ldr	r3, [pc, #392]	; (8008b68 <__ieee754_pow+0x770>)
 80089e0:	4680      	mov	r8, r0
 80089e2:	4689      	mov	r9, r1
 80089e4:	2200      	movs	r2, #0
 80089e6:	4620      	mov	r0, r4
 80089e8:	4629      	mov	r1, r5
 80089ea:	f7f7 fc5d 	bl	80002a8 <__aeabi_dsub>
 80089ee:	4632      	mov	r2, r6
 80089f0:	463b      	mov	r3, r7
 80089f2:	f7f7 fc59 	bl	80002a8 <__aeabi_dsub>
 80089f6:	4602      	mov	r2, r0
 80089f8:	460b      	mov	r3, r1
 80089fa:	4650      	mov	r0, sl
 80089fc:	4659      	mov	r1, fp
 80089fe:	f7f7 fc53 	bl	80002a8 <__aeabi_dsub>
 8008a02:	ec53 2b18 	vmov	r2, r3, d8
 8008a06:	f7f7 fe07 	bl	8000618 <__aeabi_dmul>
 8008a0a:	4622      	mov	r2, r4
 8008a0c:	4606      	mov	r6, r0
 8008a0e:	460f      	mov	r7, r1
 8008a10:	462b      	mov	r3, r5
 8008a12:	ec51 0b19 	vmov	r0, r1, d9
 8008a16:	f7f7 fdff 	bl	8000618 <__aeabi_dmul>
 8008a1a:	4602      	mov	r2, r0
 8008a1c:	460b      	mov	r3, r1
 8008a1e:	4630      	mov	r0, r6
 8008a20:	4639      	mov	r1, r7
 8008a22:	f7f7 fc43 	bl	80002ac <__adddf3>
 8008a26:	4606      	mov	r6, r0
 8008a28:	460f      	mov	r7, r1
 8008a2a:	4602      	mov	r2, r0
 8008a2c:	460b      	mov	r3, r1
 8008a2e:	4640      	mov	r0, r8
 8008a30:	4649      	mov	r1, r9
 8008a32:	f7f7 fc3b 	bl	80002ac <__adddf3>
 8008a36:	a33e      	add	r3, pc, #248	; (adr r3, 8008b30 <__ieee754_pow+0x738>)
 8008a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a3c:	2000      	movs	r0, #0
 8008a3e:	4604      	mov	r4, r0
 8008a40:	460d      	mov	r5, r1
 8008a42:	f7f7 fde9 	bl	8000618 <__aeabi_dmul>
 8008a46:	4642      	mov	r2, r8
 8008a48:	ec41 0b18 	vmov	d8, r0, r1
 8008a4c:	464b      	mov	r3, r9
 8008a4e:	4620      	mov	r0, r4
 8008a50:	4629      	mov	r1, r5
 8008a52:	f7f7 fc29 	bl	80002a8 <__aeabi_dsub>
 8008a56:	4602      	mov	r2, r0
 8008a58:	460b      	mov	r3, r1
 8008a5a:	4630      	mov	r0, r6
 8008a5c:	4639      	mov	r1, r7
 8008a5e:	f7f7 fc23 	bl	80002a8 <__aeabi_dsub>
 8008a62:	a335      	add	r3, pc, #212	; (adr r3, 8008b38 <__ieee754_pow+0x740>)
 8008a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a68:	f7f7 fdd6 	bl	8000618 <__aeabi_dmul>
 8008a6c:	a334      	add	r3, pc, #208	; (adr r3, 8008b40 <__ieee754_pow+0x748>)
 8008a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a72:	4606      	mov	r6, r0
 8008a74:	460f      	mov	r7, r1
 8008a76:	4620      	mov	r0, r4
 8008a78:	4629      	mov	r1, r5
 8008a7a:	f7f7 fdcd 	bl	8000618 <__aeabi_dmul>
 8008a7e:	4602      	mov	r2, r0
 8008a80:	460b      	mov	r3, r1
 8008a82:	4630      	mov	r0, r6
 8008a84:	4639      	mov	r1, r7
 8008a86:	f7f7 fc11 	bl	80002ac <__adddf3>
 8008a8a:	9a07      	ldr	r2, [sp, #28]
 8008a8c:	4b37      	ldr	r3, [pc, #220]	; (8008b6c <__ieee754_pow+0x774>)
 8008a8e:	4413      	add	r3, r2
 8008a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a94:	f7f7 fc0a 	bl	80002ac <__adddf3>
 8008a98:	4682      	mov	sl, r0
 8008a9a:	9805      	ldr	r0, [sp, #20]
 8008a9c:	468b      	mov	fp, r1
 8008a9e:	f7f7 fd51 	bl	8000544 <__aeabi_i2d>
 8008aa2:	9a07      	ldr	r2, [sp, #28]
 8008aa4:	4b32      	ldr	r3, [pc, #200]	; (8008b70 <__ieee754_pow+0x778>)
 8008aa6:	4413      	add	r3, r2
 8008aa8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008aac:	4606      	mov	r6, r0
 8008aae:	460f      	mov	r7, r1
 8008ab0:	4652      	mov	r2, sl
 8008ab2:	465b      	mov	r3, fp
 8008ab4:	ec51 0b18 	vmov	r0, r1, d8
 8008ab8:	f7f7 fbf8 	bl	80002ac <__adddf3>
 8008abc:	4642      	mov	r2, r8
 8008abe:	464b      	mov	r3, r9
 8008ac0:	f7f7 fbf4 	bl	80002ac <__adddf3>
 8008ac4:	4632      	mov	r2, r6
 8008ac6:	463b      	mov	r3, r7
 8008ac8:	f7f7 fbf0 	bl	80002ac <__adddf3>
 8008acc:	2000      	movs	r0, #0
 8008ace:	4632      	mov	r2, r6
 8008ad0:	463b      	mov	r3, r7
 8008ad2:	4604      	mov	r4, r0
 8008ad4:	460d      	mov	r5, r1
 8008ad6:	f7f7 fbe7 	bl	80002a8 <__aeabi_dsub>
 8008ada:	4642      	mov	r2, r8
 8008adc:	464b      	mov	r3, r9
 8008ade:	f7f7 fbe3 	bl	80002a8 <__aeabi_dsub>
 8008ae2:	ec53 2b18 	vmov	r2, r3, d8
 8008ae6:	f7f7 fbdf 	bl	80002a8 <__aeabi_dsub>
 8008aea:	4602      	mov	r2, r0
 8008aec:	460b      	mov	r3, r1
 8008aee:	4650      	mov	r0, sl
 8008af0:	4659      	mov	r1, fp
 8008af2:	e610      	b.n	8008716 <__ieee754_pow+0x31e>
 8008af4:	2401      	movs	r4, #1
 8008af6:	e6a1      	b.n	800883c <__ieee754_pow+0x444>
 8008af8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8008b48 <__ieee754_pow+0x750>
 8008afc:	e617      	b.n	800872e <__ieee754_pow+0x336>
 8008afe:	bf00      	nop
 8008b00:	4a454eef 	.word	0x4a454eef
 8008b04:	3fca7e28 	.word	0x3fca7e28
 8008b08:	93c9db65 	.word	0x93c9db65
 8008b0c:	3fcd864a 	.word	0x3fcd864a
 8008b10:	a91d4101 	.word	0xa91d4101
 8008b14:	3fd17460 	.word	0x3fd17460
 8008b18:	518f264d 	.word	0x518f264d
 8008b1c:	3fd55555 	.word	0x3fd55555
 8008b20:	db6fabff 	.word	0xdb6fabff
 8008b24:	3fdb6db6 	.word	0x3fdb6db6
 8008b28:	33333303 	.word	0x33333303
 8008b2c:	3fe33333 	.word	0x3fe33333
 8008b30:	e0000000 	.word	0xe0000000
 8008b34:	3feec709 	.word	0x3feec709
 8008b38:	dc3a03fd 	.word	0xdc3a03fd
 8008b3c:	3feec709 	.word	0x3feec709
 8008b40:	145b01f5 	.word	0x145b01f5
 8008b44:	be3e2fe0 	.word	0xbe3e2fe0
 8008b48:	00000000 	.word	0x00000000
 8008b4c:	3ff00000 	.word	0x3ff00000
 8008b50:	7ff00000 	.word	0x7ff00000
 8008b54:	43400000 	.word	0x43400000
 8008b58:	0003988e 	.word	0x0003988e
 8008b5c:	000bb679 	.word	0x000bb679
 8008b60:	08009d30 	.word	0x08009d30
 8008b64:	3ff00000 	.word	0x3ff00000
 8008b68:	40080000 	.word	0x40080000
 8008b6c:	08009d50 	.word	0x08009d50
 8008b70:	08009d40 	.word	0x08009d40
 8008b74:	a3b3      	add	r3, pc, #716	; (adr r3, 8008e44 <__ieee754_pow+0xa4c>)
 8008b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b7a:	4640      	mov	r0, r8
 8008b7c:	4649      	mov	r1, r9
 8008b7e:	f7f7 fb95 	bl	80002ac <__adddf3>
 8008b82:	4622      	mov	r2, r4
 8008b84:	ec41 0b1a 	vmov	d10, r0, r1
 8008b88:	462b      	mov	r3, r5
 8008b8a:	4630      	mov	r0, r6
 8008b8c:	4639      	mov	r1, r7
 8008b8e:	f7f7 fb8b 	bl	80002a8 <__aeabi_dsub>
 8008b92:	4602      	mov	r2, r0
 8008b94:	460b      	mov	r3, r1
 8008b96:	ec51 0b1a 	vmov	r0, r1, d10
 8008b9a:	f7f7 ffcd 	bl	8000b38 <__aeabi_dcmpgt>
 8008b9e:	2800      	cmp	r0, #0
 8008ba0:	f47f ae04 	bne.w	80087ac <__ieee754_pow+0x3b4>
 8008ba4:	4aa2      	ldr	r2, [pc, #648]	; (8008e30 <__ieee754_pow+0xa38>)
 8008ba6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008baa:	4293      	cmp	r3, r2
 8008bac:	f340 8107 	ble.w	8008dbe <__ieee754_pow+0x9c6>
 8008bb0:	151b      	asrs	r3, r3, #20
 8008bb2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8008bb6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8008bba:	fa4a fa03 	asr.w	sl, sl, r3
 8008bbe:	44da      	add	sl, fp
 8008bc0:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8008bc4:	489b      	ldr	r0, [pc, #620]	; (8008e34 <__ieee754_pow+0xa3c>)
 8008bc6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8008bca:	4108      	asrs	r0, r1
 8008bcc:	ea00 030a 	and.w	r3, r0, sl
 8008bd0:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8008bd4:	f1c1 0114 	rsb	r1, r1, #20
 8008bd8:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8008bdc:	fa4a fa01 	asr.w	sl, sl, r1
 8008be0:	f1bb 0f00 	cmp.w	fp, #0
 8008be4:	f04f 0200 	mov.w	r2, #0
 8008be8:	4620      	mov	r0, r4
 8008bea:	4629      	mov	r1, r5
 8008bec:	bfb8      	it	lt
 8008bee:	f1ca 0a00 	rsblt	sl, sl, #0
 8008bf2:	f7f7 fb59 	bl	80002a8 <__aeabi_dsub>
 8008bf6:	ec41 0b19 	vmov	d9, r0, r1
 8008bfa:	4642      	mov	r2, r8
 8008bfc:	464b      	mov	r3, r9
 8008bfe:	ec51 0b19 	vmov	r0, r1, d9
 8008c02:	f7f7 fb53 	bl	80002ac <__adddf3>
 8008c06:	a37a      	add	r3, pc, #488	; (adr r3, 8008df0 <__ieee754_pow+0x9f8>)
 8008c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c0c:	2000      	movs	r0, #0
 8008c0e:	4604      	mov	r4, r0
 8008c10:	460d      	mov	r5, r1
 8008c12:	f7f7 fd01 	bl	8000618 <__aeabi_dmul>
 8008c16:	ec53 2b19 	vmov	r2, r3, d9
 8008c1a:	4606      	mov	r6, r0
 8008c1c:	460f      	mov	r7, r1
 8008c1e:	4620      	mov	r0, r4
 8008c20:	4629      	mov	r1, r5
 8008c22:	f7f7 fb41 	bl	80002a8 <__aeabi_dsub>
 8008c26:	4602      	mov	r2, r0
 8008c28:	460b      	mov	r3, r1
 8008c2a:	4640      	mov	r0, r8
 8008c2c:	4649      	mov	r1, r9
 8008c2e:	f7f7 fb3b 	bl	80002a8 <__aeabi_dsub>
 8008c32:	a371      	add	r3, pc, #452	; (adr r3, 8008df8 <__ieee754_pow+0xa00>)
 8008c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c38:	f7f7 fcee 	bl	8000618 <__aeabi_dmul>
 8008c3c:	a370      	add	r3, pc, #448	; (adr r3, 8008e00 <__ieee754_pow+0xa08>)
 8008c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c42:	4680      	mov	r8, r0
 8008c44:	4689      	mov	r9, r1
 8008c46:	4620      	mov	r0, r4
 8008c48:	4629      	mov	r1, r5
 8008c4a:	f7f7 fce5 	bl	8000618 <__aeabi_dmul>
 8008c4e:	4602      	mov	r2, r0
 8008c50:	460b      	mov	r3, r1
 8008c52:	4640      	mov	r0, r8
 8008c54:	4649      	mov	r1, r9
 8008c56:	f7f7 fb29 	bl	80002ac <__adddf3>
 8008c5a:	4604      	mov	r4, r0
 8008c5c:	460d      	mov	r5, r1
 8008c5e:	4602      	mov	r2, r0
 8008c60:	460b      	mov	r3, r1
 8008c62:	4630      	mov	r0, r6
 8008c64:	4639      	mov	r1, r7
 8008c66:	f7f7 fb21 	bl	80002ac <__adddf3>
 8008c6a:	4632      	mov	r2, r6
 8008c6c:	463b      	mov	r3, r7
 8008c6e:	4680      	mov	r8, r0
 8008c70:	4689      	mov	r9, r1
 8008c72:	f7f7 fb19 	bl	80002a8 <__aeabi_dsub>
 8008c76:	4602      	mov	r2, r0
 8008c78:	460b      	mov	r3, r1
 8008c7a:	4620      	mov	r0, r4
 8008c7c:	4629      	mov	r1, r5
 8008c7e:	f7f7 fb13 	bl	80002a8 <__aeabi_dsub>
 8008c82:	4642      	mov	r2, r8
 8008c84:	4606      	mov	r6, r0
 8008c86:	460f      	mov	r7, r1
 8008c88:	464b      	mov	r3, r9
 8008c8a:	4640      	mov	r0, r8
 8008c8c:	4649      	mov	r1, r9
 8008c8e:	f7f7 fcc3 	bl	8000618 <__aeabi_dmul>
 8008c92:	a35d      	add	r3, pc, #372	; (adr r3, 8008e08 <__ieee754_pow+0xa10>)
 8008c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c98:	4604      	mov	r4, r0
 8008c9a:	460d      	mov	r5, r1
 8008c9c:	f7f7 fcbc 	bl	8000618 <__aeabi_dmul>
 8008ca0:	a35b      	add	r3, pc, #364	; (adr r3, 8008e10 <__ieee754_pow+0xa18>)
 8008ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ca6:	f7f7 faff 	bl	80002a8 <__aeabi_dsub>
 8008caa:	4622      	mov	r2, r4
 8008cac:	462b      	mov	r3, r5
 8008cae:	f7f7 fcb3 	bl	8000618 <__aeabi_dmul>
 8008cb2:	a359      	add	r3, pc, #356	; (adr r3, 8008e18 <__ieee754_pow+0xa20>)
 8008cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cb8:	f7f7 faf8 	bl	80002ac <__adddf3>
 8008cbc:	4622      	mov	r2, r4
 8008cbe:	462b      	mov	r3, r5
 8008cc0:	f7f7 fcaa 	bl	8000618 <__aeabi_dmul>
 8008cc4:	a356      	add	r3, pc, #344	; (adr r3, 8008e20 <__ieee754_pow+0xa28>)
 8008cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cca:	f7f7 faed 	bl	80002a8 <__aeabi_dsub>
 8008cce:	4622      	mov	r2, r4
 8008cd0:	462b      	mov	r3, r5
 8008cd2:	f7f7 fca1 	bl	8000618 <__aeabi_dmul>
 8008cd6:	a354      	add	r3, pc, #336	; (adr r3, 8008e28 <__ieee754_pow+0xa30>)
 8008cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cdc:	f7f7 fae6 	bl	80002ac <__adddf3>
 8008ce0:	4622      	mov	r2, r4
 8008ce2:	462b      	mov	r3, r5
 8008ce4:	f7f7 fc98 	bl	8000618 <__aeabi_dmul>
 8008ce8:	4602      	mov	r2, r0
 8008cea:	460b      	mov	r3, r1
 8008cec:	4640      	mov	r0, r8
 8008cee:	4649      	mov	r1, r9
 8008cf0:	f7f7 fada 	bl	80002a8 <__aeabi_dsub>
 8008cf4:	4604      	mov	r4, r0
 8008cf6:	460d      	mov	r5, r1
 8008cf8:	4602      	mov	r2, r0
 8008cfa:	460b      	mov	r3, r1
 8008cfc:	4640      	mov	r0, r8
 8008cfe:	4649      	mov	r1, r9
 8008d00:	f7f7 fc8a 	bl	8000618 <__aeabi_dmul>
 8008d04:	2200      	movs	r2, #0
 8008d06:	ec41 0b19 	vmov	d9, r0, r1
 8008d0a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008d0e:	4620      	mov	r0, r4
 8008d10:	4629      	mov	r1, r5
 8008d12:	f7f7 fac9 	bl	80002a8 <__aeabi_dsub>
 8008d16:	4602      	mov	r2, r0
 8008d18:	460b      	mov	r3, r1
 8008d1a:	ec51 0b19 	vmov	r0, r1, d9
 8008d1e:	f7f7 fda5 	bl	800086c <__aeabi_ddiv>
 8008d22:	4632      	mov	r2, r6
 8008d24:	4604      	mov	r4, r0
 8008d26:	460d      	mov	r5, r1
 8008d28:	463b      	mov	r3, r7
 8008d2a:	4640      	mov	r0, r8
 8008d2c:	4649      	mov	r1, r9
 8008d2e:	f7f7 fc73 	bl	8000618 <__aeabi_dmul>
 8008d32:	4632      	mov	r2, r6
 8008d34:	463b      	mov	r3, r7
 8008d36:	f7f7 fab9 	bl	80002ac <__adddf3>
 8008d3a:	4602      	mov	r2, r0
 8008d3c:	460b      	mov	r3, r1
 8008d3e:	4620      	mov	r0, r4
 8008d40:	4629      	mov	r1, r5
 8008d42:	f7f7 fab1 	bl	80002a8 <__aeabi_dsub>
 8008d46:	4642      	mov	r2, r8
 8008d48:	464b      	mov	r3, r9
 8008d4a:	f7f7 faad 	bl	80002a8 <__aeabi_dsub>
 8008d4e:	460b      	mov	r3, r1
 8008d50:	4602      	mov	r2, r0
 8008d52:	4939      	ldr	r1, [pc, #228]	; (8008e38 <__ieee754_pow+0xa40>)
 8008d54:	2000      	movs	r0, #0
 8008d56:	f7f7 faa7 	bl	80002a8 <__aeabi_dsub>
 8008d5a:	ec41 0b10 	vmov	d0, r0, r1
 8008d5e:	ee10 3a90 	vmov	r3, s1
 8008d62:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8008d66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d6a:	da2b      	bge.n	8008dc4 <__ieee754_pow+0x9cc>
 8008d6c:	4650      	mov	r0, sl
 8008d6e:	f000 fa77 	bl	8009260 <scalbn>
 8008d72:	ec51 0b10 	vmov	r0, r1, d0
 8008d76:	ec53 2b18 	vmov	r2, r3, d8
 8008d7a:	f7ff bbee 	b.w	800855a <__ieee754_pow+0x162>
 8008d7e:	4b2f      	ldr	r3, [pc, #188]	; (8008e3c <__ieee754_pow+0xa44>)
 8008d80:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008d84:	429e      	cmp	r6, r3
 8008d86:	f77f af0d 	ble.w	8008ba4 <__ieee754_pow+0x7ac>
 8008d8a:	4b2d      	ldr	r3, [pc, #180]	; (8008e40 <__ieee754_pow+0xa48>)
 8008d8c:	440b      	add	r3, r1
 8008d8e:	4303      	orrs	r3, r0
 8008d90:	d009      	beq.n	8008da6 <__ieee754_pow+0x9ae>
 8008d92:	ec51 0b18 	vmov	r0, r1, d8
 8008d96:	2200      	movs	r2, #0
 8008d98:	2300      	movs	r3, #0
 8008d9a:	f7f7 feaf 	bl	8000afc <__aeabi_dcmplt>
 8008d9e:	3800      	subs	r0, #0
 8008da0:	bf18      	it	ne
 8008da2:	2001      	movne	r0, #1
 8008da4:	e448      	b.n	8008638 <__ieee754_pow+0x240>
 8008da6:	4622      	mov	r2, r4
 8008da8:	462b      	mov	r3, r5
 8008daa:	f7f7 fa7d 	bl	80002a8 <__aeabi_dsub>
 8008dae:	4642      	mov	r2, r8
 8008db0:	464b      	mov	r3, r9
 8008db2:	f7f7 feb7 	bl	8000b24 <__aeabi_dcmpge>
 8008db6:	2800      	cmp	r0, #0
 8008db8:	f43f aef4 	beq.w	8008ba4 <__ieee754_pow+0x7ac>
 8008dbc:	e7e9      	b.n	8008d92 <__ieee754_pow+0x99a>
 8008dbe:	f04f 0a00 	mov.w	sl, #0
 8008dc2:	e71a      	b.n	8008bfa <__ieee754_pow+0x802>
 8008dc4:	ec51 0b10 	vmov	r0, r1, d0
 8008dc8:	4619      	mov	r1, r3
 8008dca:	e7d4      	b.n	8008d76 <__ieee754_pow+0x97e>
 8008dcc:	491a      	ldr	r1, [pc, #104]	; (8008e38 <__ieee754_pow+0xa40>)
 8008dce:	2000      	movs	r0, #0
 8008dd0:	f7ff bb31 	b.w	8008436 <__ieee754_pow+0x3e>
 8008dd4:	2000      	movs	r0, #0
 8008dd6:	2100      	movs	r1, #0
 8008dd8:	f7ff bb2d 	b.w	8008436 <__ieee754_pow+0x3e>
 8008ddc:	4630      	mov	r0, r6
 8008dde:	4639      	mov	r1, r7
 8008de0:	f7ff bb29 	b.w	8008436 <__ieee754_pow+0x3e>
 8008de4:	9204      	str	r2, [sp, #16]
 8008de6:	f7ff bb7b 	b.w	80084e0 <__ieee754_pow+0xe8>
 8008dea:	2300      	movs	r3, #0
 8008dec:	f7ff bb65 	b.w	80084ba <__ieee754_pow+0xc2>
 8008df0:	00000000 	.word	0x00000000
 8008df4:	3fe62e43 	.word	0x3fe62e43
 8008df8:	fefa39ef 	.word	0xfefa39ef
 8008dfc:	3fe62e42 	.word	0x3fe62e42
 8008e00:	0ca86c39 	.word	0x0ca86c39
 8008e04:	be205c61 	.word	0xbe205c61
 8008e08:	72bea4d0 	.word	0x72bea4d0
 8008e0c:	3e663769 	.word	0x3e663769
 8008e10:	c5d26bf1 	.word	0xc5d26bf1
 8008e14:	3ebbbd41 	.word	0x3ebbbd41
 8008e18:	af25de2c 	.word	0xaf25de2c
 8008e1c:	3f11566a 	.word	0x3f11566a
 8008e20:	16bebd93 	.word	0x16bebd93
 8008e24:	3f66c16c 	.word	0x3f66c16c
 8008e28:	5555553e 	.word	0x5555553e
 8008e2c:	3fc55555 	.word	0x3fc55555
 8008e30:	3fe00000 	.word	0x3fe00000
 8008e34:	fff00000 	.word	0xfff00000
 8008e38:	3ff00000 	.word	0x3ff00000
 8008e3c:	4090cbff 	.word	0x4090cbff
 8008e40:	3f6f3400 	.word	0x3f6f3400
 8008e44:	652b82fe 	.word	0x652b82fe
 8008e48:	3c971547 	.word	0x3c971547
 8008e4c:	00000000 	.word	0x00000000

08008e50 <__ieee754_rem_pio2>:
 8008e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e54:	ed2d 8b02 	vpush	{d8}
 8008e58:	ec55 4b10 	vmov	r4, r5, d0
 8008e5c:	4bca      	ldr	r3, [pc, #808]	; (8009188 <__ieee754_rem_pio2+0x338>)
 8008e5e:	b08b      	sub	sp, #44	; 0x2c
 8008e60:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8008e64:	4598      	cmp	r8, r3
 8008e66:	4682      	mov	sl, r0
 8008e68:	9502      	str	r5, [sp, #8]
 8008e6a:	dc08      	bgt.n	8008e7e <__ieee754_rem_pio2+0x2e>
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	2300      	movs	r3, #0
 8008e70:	ed80 0b00 	vstr	d0, [r0]
 8008e74:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8008e78:	f04f 0b00 	mov.w	fp, #0
 8008e7c:	e028      	b.n	8008ed0 <__ieee754_rem_pio2+0x80>
 8008e7e:	4bc3      	ldr	r3, [pc, #780]	; (800918c <__ieee754_rem_pio2+0x33c>)
 8008e80:	4598      	cmp	r8, r3
 8008e82:	dc78      	bgt.n	8008f76 <__ieee754_rem_pio2+0x126>
 8008e84:	9b02      	ldr	r3, [sp, #8]
 8008e86:	4ec2      	ldr	r6, [pc, #776]	; (8009190 <__ieee754_rem_pio2+0x340>)
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	ee10 0a10 	vmov	r0, s0
 8008e8e:	a3b0      	add	r3, pc, #704	; (adr r3, 8009150 <__ieee754_rem_pio2+0x300>)
 8008e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e94:	4629      	mov	r1, r5
 8008e96:	dd39      	ble.n	8008f0c <__ieee754_rem_pio2+0xbc>
 8008e98:	f7f7 fa06 	bl	80002a8 <__aeabi_dsub>
 8008e9c:	45b0      	cmp	r8, r6
 8008e9e:	4604      	mov	r4, r0
 8008ea0:	460d      	mov	r5, r1
 8008ea2:	d01b      	beq.n	8008edc <__ieee754_rem_pio2+0x8c>
 8008ea4:	a3ac      	add	r3, pc, #688	; (adr r3, 8009158 <__ieee754_rem_pio2+0x308>)
 8008ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eaa:	f7f7 f9fd 	bl	80002a8 <__aeabi_dsub>
 8008eae:	4602      	mov	r2, r0
 8008eb0:	460b      	mov	r3, r1
 8008eb2:	e9ca 2300 	strd	r2, r3, [sl]
 8008eb6:	4620      	mov	r0, r4
 8008eb8:	4629      	mov	r1, r5
 8008eba:	f7f7 f9f5 	bl	80002a8 <__aeabi_dsub>
 8008ebe:	a3a6      	add	r3, pc, #664	; (adr r3, 8009158 <__ieee754_rem_pio2+0x308>)
 8008ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ec4:	f7f7 f9f0 	bl	80002a8 <__aeabi_dsub>
 8008ec8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008ecc:	f04f 0b01 	mov.w	fp, #1
 8008ed0:	4658      	mov	r0, fp
 8008ed2:	b00b      	add	sp, #44	; 0x2c
 8008ed4:	ecbd 8b02 	vpop	{d8}
 8008ed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008edc:	a3a0      	add	r3, pc, #640	; (adr r3, 8009160 <__ieee754_rem_pio2+0x310>)
 8008ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ee2:	f7f7 f9e1 	bl	80002a8 <__aeabi_dsub>
 8008ee6:	a3a0      	add	r3, pc, #640	; (adr r3, 8009168 <__ieee754_rem_pio2+0x318>)
 8008ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eec:	4604      	mov	r4, r0
 8008eee:	460d      	mov	r5, r1
 8008ef0:	f7f7 f9da 	bl	80002a8 <__aeabi_dsub>
 8008ef4:	4602      	mov	r2, r0
 8008ef6:	460b      	mov	r3, r1
 8008ef8:	e9ca 2300 	strd	r2, r3, [sl]
 8008efc:	4620      	mov	r0, r4
 8008efe:	4629      	mov	r1, r5
 8008f00:	f7f7 f9d2 	bl	80002a8 <__aeabi_dsub>
 8008f04:	a398      	add	r3, pc, #608	; (adr r3, 8009168 <__ieee754_rem_pio2+0x318>)
 8008f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f0a:	e7db      	b.n	8008ec4 <__ieee754_rem_pio2+0x74>
 8008f0c:	f7f7 f9ce 	bl	80002ac <__adddf3>
 8008f10:	45b0      	cmp	r8, r6
 8008f12:	4604      	mov	r4, r0
 8008f14:	460d      	mov	r5, r1
 8008f16:	d016      	beq.n	8008f46 <__ieee754_rem_pio2+0xf6>
 8008f18:	a38f      	add	r3, pc, #572	; (adr r3, 8009158 <__ieee754_rem_pio2+0x308>)
 8008f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f1e:	f7f7 f9c5 	bl	80002ac <__adddf3>
 8008f22:	4602      	mov	r2, r0
 8008f24:	460b      	mov	r3, r1
 8008f26:	e9ca 2300 	strd	r2, r3, [sl]
 8008f2a:	4620      	mov	r0, r4
 8008f2c:	4629      	mov	r1, r5
 8008f2e:	f7f7 f9bb 	bl	80002a8 <__aeabi_dsub>
 8008f32:	a389      	add	r3, pc, #548	; (adr r3, 8009158 <__ieee754_rem_pio2+0x308>)
 8008f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f38:	f7f7 f9b8 	bl	80002ac <__adddf3>
 8008f3c:	f04f 3bff 	mov.w	fp, #4294967295
 8008f40:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008f44:	e7c4      	b.n	8008ed0 <__ieee754_rem_pio2+0x80>
 8008f46:	a386      	add	r3, pc, #536	; (adr r3, 8009160 <__ieee754_rem_pio2+0x310>)
 8008f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f4c:	f7f7 f9ae 	bl	80002ac <__adddf3>
 8008f50:	a385      	add	r3, pc, #532	; (adr r3, 8009168 <__ieee754_rem_pio2+0x318>)
 8008f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f56:	4604      	mov	r4, r0
 8008f58:	460d      	mov	r5, r1
 8008f5a:	f7f7 f9a7 	bl	80002ac <__adddf3>
 8008f5e:	4602      	mov	r2, r0
 8008f60:	460b      	mov	r3, r1
 8008f62:	e9ca 2300 	strd	r2, r3, [sl]
 8008f66:	4620      	mov	r0, r4
 8008f68:	4629      	mov	r1, r5
 8008f6a:	f7f7 f99d 	bl	80002a8 <__aeabi_dsub>
 8008f6e:	a37e      	add	r3, pc, #504	; (adr r3, 8009168 <__ieee754_rem_pio2+0x318>)
 8008f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f74:	e7e0      	b.n	8008f38 <__ieee754_rem_pio2+0xe8>
 8008f76:	4b87      	ldr	r3, [pc, #540]	; (8009194 <__ieee754_rem_pio2+0x344>)
 8008f78:	4598      	cmp	r8, r3
 8008f7a:	f300 80d8 	bgt.w	800912e <__ieee754_rem_pio2+0x2de>
 8008f7e:	f7fe fa1b 	bl	80073b8 <fabs>
 8008f82:	ec55 4b10 	vmov	r4, r5, d0
 8008f86:	ee10 0a10 	vmov	r0, s0
 8008f8a:	a379      	add	r3, pc, #484	; (adr r3, 8009170 <__ieee754_rem_pio2+0x320>)
 8008f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f90:	4629      	mov	r1, r5
 8008f92:	f7f7 fb41 	bl	8000618 <__aeabi_dmul>
 8008f96:	4b80      	ldr	r3, [pc, #512]	; (8009198 <__ieee754_rem_pio2+0x348>)
 8008f98:	2200      	movs	r2, #0
 8008f9a:	f7f7 f987 	bl	80002ac <__adddf3>
 8008f9e:	f7f7 fdeb 	bl	8000b78 <__aeabi_d2iz>
 8008fa2:	4683      	mov	fp, r0
 8008fa4:	f7f7 face 	bl	8000544 <__aeabi_i2d>
 8008fa8:	4602      	mov	r2, r0
 8008faa:	460b      	mov	r3, r1
 8008fac:	ec43 2b18 	vmov	d8, r2, r3
 8008fb0:	a367      	add	r3, pc, #412	; (adr r3, 8009150 <__ieee754_rem_pio2+0x300>)
 8008fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fb6:	f7f7 fb2f 	bl	8000618 <__aeabi_dmul>
 8008fba:	4602      	mov	r2, r0
 8008fbc:	460b      	mov	r3, r1
 8008fbe:	4620      	mov	r0, r4
 8008fc0:	4629      	mov	r1, r5
 8008fc2:	f7f7 f971 	bl	80002a8 <__aeabi_dsub>
 8008fc6:	a364      	add	r3, pc, #400	; (adr r3, 8009158 <__ieee754_rem_pio2+0x308>)
 8008fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fcc:	4606      	mov	r6, r0
 8008fce:	460f      	mov	r7, r1
 8008fd0:	ec51 0b18 	vmov	r0, r1, d8
 8008fd4:	f7f7 fb20 	bl	8000618 <__aeabi_dmul>
 8008fd8:	f1bb 0f1f 	cmp.w	fp, #31
 8008fdc:	4604      	mov	r4, r0
 8008fde:	460d      	mov	r5, r1
 8008fe0:	dc0d      	bgt.n	8008ffe <__ieee754_rem_pio2+0x1ae>
 8008fe2:	4b6e      	ldr	r3, [pc, #440]	; (800919c <__ieee754_rem_pio2+0x34c>)
 8008fe4:	f10b 32ff 	add.w	r2, fp, #4294967295
 8008fe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fec:	4543      	cmp	r3, r8
 8008fee:	d006      	beq.n	8008ffe <__ieee754_rem_pio2+0x1ae>
 8008ff0:	4622      	mov	r2, r4
 8008ff2:	462b      	mov	r3, r5
 8008ff4:	4630      	mov	r0, r6
 8008ff6:	4639      	mov	r1, r7
 8008ff8:	f7f7 f956 	bl	80002a8 <__aeabi_dsub>
 8008ffc:	e00e      	b.n	800901c <__ieee754_rem_pio2+0x1cc>
 8008ffe:	462b      	mov	r3, r5
 8009000:	4622      	mov	r2, r4
 8009002:	4630      	mov	r0, r6
 8009004:	4639      	mov	r1, r7
 8009006:	f7f7 f94f 	bl	80002a8 <__aeabi_dsub>
 800900a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800900e:	9303      	str	r3, [sp, #12]
 8009010:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009014:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8009018:	2b10      	cmp	r3, #16
 800901a:	dc02      	bgt.n	8009022 <__ieee754_rem_pio2+0x1d2>
 800901c:	e9ca 0100 	strd	r0, r1, [sl]
 8009020:	e039      	b.n	8009096 <__ieee754_rem_pio2+0x246>
 8009022:	a34f      	add	r3, pc, #316	; (adr r3, 8009160 <__ieee754_rem_pio2+0x310>)
 8009024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009028:	ec51 0b18 	vmov	r0, r1, d8
 800902c:	f7f7 faf4 	bl	8000618 <__aeabi_dmul>
 8009030:	4604      	mov	r4, r0
 8009032:	460d      	mov	r5, r1
 8009034:	4602      	mov	r2, r0
 8009036:	460b      	mov	r3, r1
 8009038:	4630      	mov	r0, r6
 800903a:	4639      	mov	r1, r7
 800903c:	f7f7 f934 	bl	80002a8 <__aeabi_dsub>
 8009040:	4602      	mov	r2, r0
 8009042:	460b      	mov	r3, r1
 8009044:	4680      	mov	r8, r0
 8009046:	4689      	mov	r9, r1
 8009048:	4630      	mov	r0, r6
 800904a:	4639      	mov	r1, r7
 800904c:	f7f7 f92c 	bl	80002a8 <__aeabi_dsub>
 8009050:	4622      	mov	r2, r4
 8009052:	462b      	mov	r3, r5
 8009054:	f7f7 f928 	bl	80002a8 <__aeabi_dsub>
 8009058:	a343      	add	r3, pc, #268	; (adr r3, 8009168 <__ieee754_rem_pio2+0x318>)
 800905a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800905e:	4604      	mov	r4, r0
 8009060:	460d      	mov	r5, r1
 8009062:	ec51 0b18 	vmov	r0, r1, d8
 8009066:	f7f7 fad7 	bl	8000618 <__aeabi_dmul>
 800906a:	4622      	mov	r2, r4
 800906c:	462b      	mov	r3, r5
 800906e:	f7f7 f91b 	bl	80002a8 <__aeabi_dsub>
 8009072:	4602      	mov	r2, r0
 8009074:	460b      	mov	r3, r1
 8009076:	4604      	mov	r4, r0
 8009078:	460d      	mov	r5, r1
 800907a:	4640      	mov	r0, r8
 800907c:	4649      	mov	r1, r9
 800907e:	f7f7 f913 	bl	80002a8 <__aeabi_dsub>
 8009082:	9a03      	ldr	r2, [sp, #12]
 8009084:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009088:	1ad3      	subs	r3, r2, r3
 800908a:	2b31      	cmp	r3, #49	; 0x31
 800908c:	dc24      	bgt.n	80090d8 <__ieee754_rem_pio2+0x288>
 800908e:	e9ca 0100 	strd	r0, r1, [sl]
 8009092:	4646      	mov	r6, r8
 8009094:	464f      	mov	r7, r9
 8009096:	e9da 8900 	ldrd	r8, r9, [sl]
 800909a:	4630      	mov	r0, r6
 800909c:	4642      	mov	r2, r8
 800909e:	464b      	mov	r3, r9
 80090a0:	4639      	mov	r1, r7
 80090a2:	f7f7 f901 	bl	80002a8 <__aeabi_dsub>
 80090a6:	462b      	mov	r3, r5
 80090a8:	4622      	mov	r2, r4
 80090aa:	f7f7 f8fd 	bl	80002a8 <__aeabi_dsub>
 80090ae:	9b02      	ldr	r3, [sp, #8]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80090b6:	f6bf af0b 	bge.w	8008ed0 <__ieee754_rem_pio2+0x80>
 80090ba:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80090be:	f8ca 3004 	str.w	r3, [sl, #4]
 80090c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80090c6:	f8ca 8000 	str.w	r8, [sl]
 80090ca:	f8ca 0008 	str.w	r0, [sl, #8]
 80090ce:	f8ca 300c 	str.w	r3, [sl, #12]
 80090d2:	f1cb 0b00 	rsb	fp, fp, #0
 80090d6:	e6fb      	b.n	8008ed0 <__ieee754_rem_pio2+0x80>
 80090d8:	a327      	add	r3, pc, #156	; (adr r3, 8009178 <__ieee754_rem_pio2+0x328>)
 80090da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090de:	ec51 0b18 	vmov	r0, r1, d8
 80090e2:	f7f7 fa99 	bl	8000618 <__aeabi_dmul>
 80090e6:	4604      	mov	r4, r0
 80090e8:	460d      	mov	r5, r1
 80090ea:	4602      	mov	r2, r0
 80090ec:	460b      	mov	r3, r1
 80090ee:	4640      	mov	r0, r8
 80090f0:	4649      	mov	r1, r9
 80090f2:	f7f7 f8d9 	bl	80002a8 <__aeabi_dsub>
 80090f6:	4602      	mov	r2, r0
 80090f8:	460b      	mov	r3, r1
 80090fa:	4606      	mov	r6, r0
 80090fc:	460f      	mov	r7, r1
 80090fe:	4640      	mov	r0, r8
 8009100:	4649      	mov	r1, r9
 8009102:	f7f7 f8d1 	bl	80002a8 <__aeabi_dsub>
 8009106:	4622      	mov	r2, r4
 8009108:	462b      	mov	r3, r5
 800910a:	f7f7 f8cd 	bl	80002a8 <__aeabi_dsub>
 800910e:	a31c      	add	r3, pc, #112	; (adr r3, 8009180 <__ieee754_rem_pio2+0x330>)
 8009110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009114:	4604      	mov	r4, r0
 8009116:	460d      	mov	r5, r1
 8009118:	ec51 0b18 	vmov	r0, r1, d8
 800911c:	f7f7 fa7c 	bl	8000618 <__aeabi_dmul>
 8009120:	4622      	mov	r2, r4
 8009122:	462b      	mov	r3, r5
 8009124:	f7f7 f8c0 	bl	80002a8 <__aeabi_dsub>
 8009128:	4604      	mov	r4, r0
 800912a:	460d      	mov	r5, r1
 800912c:	e760      	b.n	8008ff0 <__ieee754_rem_pio2+0x1a0>
 800912e:	4b1c      	ldr	r3, [pc, #112]	; (80091a0 <__ieee754_rem_pio2+0x350>)
 8009130:	4598      	cmp	r8, r3
 8009132:	dd37      	ble.n	80091a4 <__ieee754_rem_pio2+0x354>
 8009134:	ee10 2a10 	vmov	r2, s0
 8009138:	462b      	mov	r3, r5
 800913a:	4620      	mov	r0, r4
 800913c:	4629      	mov	r1, r5
 800913e:	f7f7 f8b3 	bl	80002a8 <__aeabi_dsub>
 8009142:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009146:	e9ca 0100 	strd	r0, r1, [sl]
 800914a:	e695      	b.n	8008e78 <__ieee754_rem_pio2+0x28>
 800914c:	f3af 8000 	nop.w
 8009150:	54400000 	.word	0x54400000
 8009154:	3ff921fb 	.word	0x3ff921fb
 8009158:	1a626331 	.word	0x1a626331
 800915c:	3dd0b461 	.word	0x3dd0b461
 8009160:	1a600000 	.word	0x1a600000
 8009164:	3dd0b461 	.word	0x3dd0b461
 8009168:	2e037073 	.word	0x2e037073
 800916c:	3ba3198a 	.word	0x3ba3198a
 8009170:	6dc9c883 	.word	0x6dc9c883
 8009174:	3fe45f30 	.word	0x3fe45f30
 8009178:	2e000000 	.word	0x2e000000
 800917c:	3ba3198a 	.word	0x3ba3198a
 8009180:	252049c1 	.word	0x252049c1
 8009184:	397b839a 	.word	0x397b839a
 8009188:	3fe921fb 	.word	0x3fe921fb
 800918c:	4002d97b 	.word	0x4002d97b
 8009190:	3ff921fb 	.word	0x3ff921fb
 8009194:	413921fb 	.word	0x413921fb
 8009198:	3fe00000 	.word	0x3fe00000
 800919c:	08009d60 	.word	0x08009d60
 80091a0:	7fefffff 	.word	0x7fefffff
 80091a4:	ea4f 5628 	mov.w	r6, r8, asr #20
 80091a8:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 80091ac:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 80091b0:	4620      	mov	r0, r4
 80091b2:	460d      	mov	r5, r1
 80091b4:	f7f7 fce0 	bl	8000b78 <__aeabi_d2iz>
 80091b8:	f7f7 f9c4 	bl	8000544 <__aeabi_i2d>
 80091bc:	4602      	mov	r2, r0
 80091be:	460b      	mov	r3, r1
 80091c0:	4620      	mov	r0, r4
 80091c2:	4629      	mov	r1, r5
 80091c4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80091c8:	f7f7 f86e 	bl	80002a8 <__aeabi_dsub>
 80091cc:	4b21      	ldr	r3, [pc, #132]	; (8009254 <__ieee754_rem_pio2+0x404>)
 80091ce:	2200      	movs	r2, #0
 80091d0:	f7f7 fa22 	bl	8000618 <__aeabi_dmul>
 80091d4:	460d      	mov	r5, r1
 80091d6:	4604      	mov	r4, r0
 80091d8:	f7f7 fcce 	bl	8000b78 <__aeabi_d2iz>
 80091dc:	f7f7 f9b2 	bl	8000544 <__aeabi_i2d>
 80091e0:	4602      	mov	r2, r0
 80091e2:	460b      	mov	r3, r1
 80091e4:	4620      	mov	r0, r4
 80091e6:	4629      	mov	r1, r5
 80091e8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80091ec:	f7f7 f85c 	bl	80002a8 <__aeabi_dsub>
 80091f0:	4b18      	ldr	r3, [pc, #96]	; (8009254 <__ieee754_rem_pio2+0x404>)
 80091f2:	2200      	movs	r2, #0
 80091f4:	f7f7 fa10 	bl	8000618 <__aeabi_dmul>
 80091f8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80091fc:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8009200:	2703      	movs	r7, #3
 8009202:	2400      	movs	r4, #0
 8009204:	2500      	movs	r5, #0
 8009206:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800920a:	4622      	mov	r2, r4
 800920c:	462b      	mov	r3, r5
 800920e:	46b9      	mov	r9, r7
 8009210:	3f01      	subs	r7, #1
 8009212:	f7f7 fc69 	bl	8000ae8 <__aeabi_dcmpeq>
 8009216:	2800      	cmp	r0, #0
 8009218:	d1f5      	bne.n	8009206 <__ieee754_rem_pio2+0x3b6>
 800921a:	4b0f      	ldr	r3, [pc, #60]	; (8009258 <__ieee754_rem_pio2+0x408>)
 800921c:	9301      	str	r3, [sp, #4]
 800921e:	2302      	movs	r3, #2
 8009220:	9300      	str	r3, [sp, #0]
 8009222:	4632      	mov	r2, r6
 8009224:	464b      	mov	r3, r9
 8009226:	4651      	mov	r1, sl
 8009228:	a804      	add	r0, sp, #16
 800922a:	f000 f8c9 	bl	80093c0 <__kernel_rem_pio2>
 800922e:	9b02      	ldr	r3, [sp, #8]
 8009230:	2b00      	cmp	r3, #0
 8009232:	4683      	mov	fp, r0
 8009234:	f6bf ae4c 	bge.w	8008ed0 <__ieee754_rem_pio2+0x80>
 8009238:	e9da 2100 	ldrd	r2, r1, [sl]
 800923c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009240:	e9ca 2300 	strd	r2, r3, [sl]
 8009244:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8009248:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800924c:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8009250:	e73f      	b.n	80090d2 <__ieee754_rem_pio2+0x282>
 8009252:	bf00      	nop
 8009254:	41700000 	.word	0x41700000
 8009258:	08009de0 	.word	0x08009de0
 800925c:	00000000 	.word	0x00000000

08009260 <scalbn>:
 8009260:	b570      	push	{r4, r5, r6, lr}
 8009262:	ec55 4b10 	vmov	r4, r5, d0
 8009266:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800926a:	4606      	mov	r6, r0
 800926c:	462b      	mov	r3, r5
 800926e:	b999      	cbnz	r1, 8009298 <scalbn+0x38>
 8009270:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009274:	4323      	orrs	r3, r4
 8009276:	d03f      	beq.n	80092f8 <scalbn+0x98>
 8009278:	4b35      	ldr	r3, [pc, #212]	; (8009350 <scalbn+0xf0>)
 800927a:	4629      	mov	r1, r5
 800927c:	ee10 0a10 	vmov	r0, s0
 8009280:	2200      	movs	r2, #0
 8009282:	f7f7 f9c9 	bl	8000618 <__aeabi_dmul>
 8009286:	4b33      	ldr	r3, [pc, #204]	; (8009354 <scalbn+0xf4>)
 8009288:	429e      	cmp	r6, r3
 800928a:	4604      	mov	r4, r0
 800928c:	460d      	mov	r5, r1
 800928e:	da10      	bge.n	80092b2 <scalbn+0x52>
 8009290:	a327      	add	r3, pc, #156	; (adr r3, 8009330 <scalbn+0xd0>)
 8009292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009296:	e01f      	b.n	80092d8 <scalbn+0x78>
 8009298:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800929c:	4291      	cmp	r1, r2
 800929e:	d10c      	bne.n	80092ba <scalbn+0x5a>
 80092a0:	ee10 2a10 	vmov	r2, s0
 80092a4:	4620      	mov	r0, r4
 80092a6:	4629      	mov	r1, r5
 80092a8:	f7f7 f800 	bl	80002ac <__adddf3>
 80092ac:	4604      	mov	r4, r0
 80092ae:	460d      	mov	r5, r1
 80092b0:	e022      	b.n	80092f8 <scalbn+0x98>
 80092b2:	460b      	mov	r3, r1
 80092b4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80092b8:	3936      	subs	r1, #54	; 0x36
 80092ba:	f24c 3250 	movw	r2, #50000	; 0xc350
 80092be:	4296      	cmp	r6, r2
 80092c0:	dd0d      	ble.n	80092de <scalbn+0x7e>
 80092c2:	2d00      	cmp	r5, #0
 80092c4:	a11c      	add	r1, pc, #112	; (adr r1, 8009338 <scalbn+0xd8>)
 80092c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80092ca:	da02      	bge.n	80092d2 <scalbn+0x72>
 80092cc:	a11c      	add	r1, pc, #112	; (adr r1, 8009340 <scalbn+0xe0>)
 80092ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80092d2:	a319      	add	r3, pc, #100	; (adr r3, 8009338 <scalbn+0xd8>)
 80092d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092d8:	f7f7 f99e 	bl	8000618 <__aeabi_dmul>
 80092dc:	e7e6      	b.n	80092ac <scalbn+0x4c>
 80092de:	1872      	adds	r2, r6, r1
 80092e0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80092e4:	428a      	cmp	r2, r1
 80092e6:	dcec      	bgt.n	80092c2 <scalbn+0x62>
 80092e8:	2a00      	cmp	r2, #0
 80092ea:	dd08      	ble.n	80092fe <scalbn+0x9e>
 80092ec:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80092f0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80092f4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80092f8:	ec45 4b10 	vmov	d0, r4, r5
 80092fc:	bd70      	pop	{r4, r5, r6, pc}
 80092fe:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009302:	da08      	bge.n	8009316 <scalbn+0xb6>
 8009304:	2d00      	cmp	r5, #0
 8009306:	a10a      	add	r1, pc, #40	; (adr r1, 8009330 <scalbn+0xd0>)
 8009308:	e9d1 0100 	ldrd	r0, r1, [r1]
 800930c:	dac0      	bge.n	8009290 <scalbn+0x30>
 800930e:	a10e      	add	r1, pc, #56	; (adr r1, 8009348 <scalbn+0xe8>)
 8009310:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009314:	e7bc      	b.n	8009290 <scalbn+0x30>
 8009316:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800931a:	3236      	adds	r2, #54	; 0x36
 800931c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009320:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8009324:	4620      	mov	r0, r4
 8009326:	4b0c      	ldr	r3, [pc, #48]	; (8009358 <scalbn+0xf8>)
 8009328:	2200      	movs	r2, #0
 800932a:	e7d5      	b.n	80092d8 <scalbn+0x78>
 800932c:	f3af 8000 	nop.w
 8009330:	c2f8f359 	.word	0xc2f8f359
 8009334:	01a56e1f 	.word	0x01a56e1f
 8009338:	8800759c 	.word	0x8800759c
 800933c:	7e37e43c 	.word	0x7e37e43c
 8009340:	8800759c 	.word	0x8800759c
 8009344:	fe37e43c 	.word	0xfe37e43c
 8009348:	c2f8f359 	.word	0xc2f8f359
 800934c:	81a56e1f 	.word	0x81a56e1f
 8009350:	43500000 	.word	0x43500000
 8009354:	ffff3cb0 	.word	0xffff3cb0
 8009358:	3c900000 	.word	0x3c900000

0800935c <with_errno>:
 800935c:	b570      	push	{r4, r5, r6, lr}
 800935e:	4604      	mov	r4, r0
 8009360:	460d      	mov	r5, r1
 8009362:	4616      	mov	r6, r2
 8009364:	f7fc ff82 	bl	800626c <__errno>
 8009368:	4629      	mov	r1, r5
 800936a:	6006      	str	r6, [r0, #0]
 800936c:	4620      	mov	r0, r4
 800936e:	bd70      	pop	{r4, r5, r6, pc}

08009370 <xflow>:
 8009370:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009372:	4614      	mov	r4, r2
 8009374:	461d      	mov	r5, r3
 8009376:	b108      	cbz	r0, 800937c <xflow+0xc>
 8009378:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800937c:	e9cd 2300 	strd	r2, r3, [sp]
 8009380:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009384:	4620      	mov	r0, r4
 8009386:	4629      	mov	r1, r5
 8009388:	f7f7 f946 	bl	8000618 <__aeabi_dmul>
 800938c:	2222      	movs	r2, #34	; 0x22
 800938e:	b003      	add	sp, #12
 8009390:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009394:	f7ff bfe2 	b.w	800935c <with_errno>

08009398 <__math_uflow>:
 8009398:	b508      	push	{r3, lr}
 800939a:	2200      	movs	r2, #0
 800939c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80093a0:	f7ff ffe6 	bl	8009370 <xflow>
 80093a4:	ec41 0b10 	vmov	d0, r0, r1
 80093a8:	bd08      	pop	{r3, pc}

080093aa <__math_oflow>:
 80093aa:	b508      	push	{r3, lr}
 80093ac:	2200      	movs	r2, #0
 80093ae:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80093b2:	f7ff ffdd 	bl	8009370 <xflow>
 80093b6:	ec41 0b10 	vmov	d0, r0, r1
 80093ba:	bd08      	pop	{r3, pc}
 80093bc:	0000      	movs	r0, r0
	...

080093c0 <__kernel_rem_pio2>:
 80093c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093c4:	ed2d 8b02 	vpush	{d8}
 80093c8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80093cc:	f112 0f14 	cmn.w	r2, #20
 80093d0:	9306      	str	r3, [sp, #24]
 80093d2:	9104      	str	r1, [sp, #16]
 80093d4:	4bc2      	ldr	r3, [pc, #776]	; (80096e0 <__kernel_rem_pio2+0x320>)
 80093d6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 80093d8:	9009      	str	r0, [sp, #36]	; 0x24
 80093da:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80093de:	9300      	str	r3, [sp, #0]
 80093e0:	9b06      	ldr	r3, [sp, #24]
 80093e2:	f103 33ff 	add.w	r3, r3, #4294967295
 80093e6:	bfa8      	it	ge
 80093e8:	1ed4      	subge	r4, r2, #3
 80093ea:	9305      	str	r3, [sp, #20]
 80093ec:	bfb2      	itee	lt
 80093ee:	2400      	movlt	r4, #0
 80093f0:	2318      	movge	r3, #24
 80093f2:	fb94 f4f3 	sdivge	r4, r4, r3
 80093f6:	f06f 0317 	mvn.w	r3, #23
 80093fa:	fb04 3303 	mla	r3, r4, r3, r3
 80093fe:	eb03 0a02 	add.w	sl, r3, r2
 8009402:	9b00      	ldr	r3, [sp, #0]
 8009404:	9a05      	ldr	r2, [sp, #20]
 8009406:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 80096d0 <__kernel_rem_pio2+0x310>
 800940a:	eb03 0802 	add.w	r8, r3, r2
 800940e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8009410:	1aa7      	subs	r7, r4, r2
 8009412:	ae20      	add	r6, sp, #128	; 0x80
 8009414:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8009418:	2500      	movs	r5, #0
 800941a:	4545      	cmp	r5, r8
 800941c:	dd13      	ble.n	8009446 <__kernel_rem_pio2+0x86>
 800941e:	9b06      	ldr	r3, [sp, #24]
 8009420:	aa20      	add	r2, sp, #128	; 0x80
 8009422:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8009426:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800942a:	f04f 0800 	mov.w	r8, #0
 800942e:	9b00      	ldr	r3, [sp, #0]
 8009430:	4598      	cmp	r8, r3
 8009432:	dc31      	bgt.n	8009498 <__kernel_rem_pio2+0xd8>
 8009434:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 80096d0 <__kernel_rem_pio2+0x310>
 8009438:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800943c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009440:	462f      	mov	r7, r5
 8009442:	2600      	movs	r6, #0
 8009444:	e01b      	b.n	800947e <__kernel_rem_pio2+0xbe>
 8009446:	42ef      	cmn	r7, r5
 8009448:	d407      	bmi.n	800945a <__kernel_rem_pio2+0x9a>
 800944a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800944e:	f7f7 f879 	bl	8000544 <__aeabi_i2d>
 8009452:	e8e6 0102 	strd	r0, r1, [r6], #8
 8009456:	3501      	adds	r5, #1
 8009458:	e7df      	b.n	800941a <__kernel_rem_pio2+0x5a>
 800945a:	ec51 0b18 	vmov	r0, r1, d8
 800945e:	e7f8      	b.n	8009452 <__kernel_rem_pio2+0x92>
 8009460:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009464:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8009468:	f7f7 f8d6 	bl	8000618 <__aeabi_dmul>
 800946c:	4602      	mov	r2, r0
 800946e:	460b      	mov	r3, r1
 8009470:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009474:	f7f6 ff1a 	bl	80002ac <__adddf3>
 8009478:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800947c:	3601      	adds	r6, #1
 800947e:	9b05      	ldr	r3, [sp, #20]
 8009480:	429e      	cmp	r6, r3
 8009482:	f1a7 0708 	sub.w	r7, r7, #8
 8009486:	ddeb      	ble.n	8009460 <__kernel_rem_pio2+0xa0>
 8009488:	ed9d 7b02 	vldr	d7, [sp, #8]
 800948c:	f108 0801 	add.w	r8, r8, #1
 8009490:	ecab 7b02 	vstmia	fp!, {d7}
 8009494:	3508      	adds	r5, #8
 8009496:	e7ca      	b.n	800942e <__kernel_rem_pio2+0x6e>
 8009498:	9b00      	ldr	r3, [sp, #0]
 800949a:	aa0c      	add	r2, sp, #48	; 0x30
 800949c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80094a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80094a2:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80094a4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80094a8:	9c00      	ldr	r4, [sp, #0]
 80094aa:	930a      	str	r3, [sp, #40]	; 0x28
 80094ac:	00e3      	lsls	r3, r4, #3
 80094ae:	9308      	str	r3, [sp, #32]
 80094b0:	ab98      	add	r3, sp, #608	; 0x260
 80094b2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80094b6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80094ba:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 80094be:	ab70      	add	r3, sp, #448	; 0x1c0
 80094c0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80094c4:	46c3      	mov	fp, r8
 80094c6:	46a1      	mov	r9, r4
 80094c8:	f1b9 0f00 	cmp.w	r9, #0
 80094cc:	f1a5 0508 	sub.w	r5, r5, #8
 80094d0:	dc77      	bgt.n	80095c2 <__kernel_rem_pio2+0x202>
 80094d2:	ec47 6b10 	vmov	d0, r6, r7
 80094d6:	4650      	mov	r0, sl
 80094d8:	f7ff fec2 	bl	8009260 <scalbn>
 80094dc:	ec57 6b10 	vmov	r6, r7, d0
 80094e0:	2200      	movs	r2, #0
 80094e2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80094e6:	ee10 0a10 	vmov	r0, s0
 80094ea:	4639      	mov	r1, r7
 80094ec:	f7f7 f894 	bl	8000618 <__aeabi_dmul>
 80094f0:	ec41 0b10 	vmov	d0, r0, r1
 80094f4:	f000 fab4 	bl	8009a60 <floor>
 80094f8:	4b7a      	ldr	r3, [pc, #488]	; (80096e4 <__kernel_rem_pio2+0x324>)
 80094fa:	ec51 0b10 	vmov	r0, r1, d0
 80094fe:	2200      	movs	r2, #0
 8009500:	f7f7 f88a 	bl	8000618 <__aeabi_dmul>
 8009504:	4602      	mov	r2, r0
 8009506:	460b      	mov	r3, r1
 8009508:	4630      	mov	r0, r6
 800950a:	4639      	mov	r1, r7
 800950c:	f7f6 fecc 	bl	80002a8 <__aeabi_dsub>
 8009510:	460f      	mov	r7, r1
 8009512:	4606      	mov	r6, r0
 8009514:	f7f7 fb30 	bl	8000b78 <__aeabi_d2iz>
 8009518:	9002      	str	r0, [sp, #8]
 800951a:	f7f7 f813 	bl	8000544 <__aeabi_i2d>
 800951e:	4602      	mov	r2, r0
 8009520:	460b      	mov	r3, r1
 8009522:	4630      	mov	r0, r6
 8009524:	4639      	mov	r1, r7
 8009526:	f7f6 febf 	bl	80002a8 <__aeabi_dsub>
 800952a:	f1ba 0f00 	cmp.w	sl, #0
 800952e:	4606      	mov	r6, r0
 8009530:	460f      	mov	r7, r1
 8009532:	dd6d      	ble.n	8009610 <__kernel_rem_pio2+0x250>
 8009534:	1e61      	subs	r1, r4, #1
 8009536:	ab0c      	add	r3, sp, #48	; 0x30
 8009538:	9d02      	ldr	r5, [sp, #8]
 800953a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800953e:	f1ca 0018 	rsb	r0, sl, #24
 8009542:	fa43 f200 	asr.w	r2, r3, r0
 8009546:	4415      	add	r5, r2
 8009548:	4082      	lsls	r2, r0
 800954a:	1a9b      	subs	r3, r3, r2
 800954c:	aa0c      	add	r2, sp, #48	; 0x30
 800954e:	9502      	str	r5, [sp, #8]
 8009550:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8009554:	f1ca 0217 	rsb	r2, sl, #23
 8009558:	fa43 fb02 	asr.w	fp, r3, r2
 800955c:	f1bb 0f00 	cmp.w	fp, #0
 8009560:	dd65      	ble.n	800962e <__kernel_rem_pio2+0x26e>
 8009562:	9b02      	ldr	r3, [sp, #8]
 8009564:	2200      	movs	r2, #0
 8009566:	3301      	adds	r3, #1
 8009568:	9302      	str	r3, [sp, #8]
 800956a:	4615      	mov	r5, r2
 800956c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8009570:	4294      	cmp	r4, r2
 8009572:	f300 809f 	bgt.w	80096b4 <__kernel_rem_pio2+0x2f4>
 8009576:	f1ba 0f00 	cmp.w	sl, #0
 800957a:	dd07      	ble.n	800958c <__kernel_rem_pio2+0x1cc>
 800957c:	f1ba 0f01 	cmp.w	sl, #1
 8009580:	f000 80c1 	beq.w	8009706 <__kernel_rem_pio2+0x346>
 8009584:	f1ba 0f02 	cmp.w	sl, #2
 8009588:	f000 80c7 	beq.w	800971a <__kernel_rem_pio2+0x35a>
 800958c:	f1bb 0f02 	cmp.w	fp, #2
 8009590:	d14d      	bne.n	800962e <__kernel_rem_pio2+0x26e>
 8009592:	4632      	mov	r2, r6
 8009594:	463b      	mov	r3, r7
 8009596:	4954      	ldr	r1, [pc, #336]	; (80096e8 <__kernel_rem_pio2+0x328>)
 8009598:	2000      	movs	r0, #0
 800959a:	f7f6 fe85 	bl	80002a8 <__aeabi_dsub>
 800959e:	4606      	mov	r6, r0
 80095a0:	460f      	mov	r7, r1
 80095a2:	2d00      	cmp	r5, #0
 80095a4:	d043      	beq.n	800962e <__kernel_rem_pio2+0x26e>
 80095a6:	4650      	mov	r0, sl
 80095a8:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 80096d8 <__kernel_rem_pio2+0x318>
 80095ac:	f7ff fe58 	bl	8009260 <scalbn>
 80095b0:	4630      	mov	r0, r6
 80095b2:	4639      	mov	r1, r7
 80095b4:	ec53 2b10 	vmov	r2, r3, d0
 80095b8:	f7f6 fe76 	bl	80002a8 <__aeabi_dsub>
 80095bc:	4606      	mov	r6, r0
 80095be:	460f      	mov	r7, r1
 80095c0:	e035      	b.n	800962e <__kernel_rem_pio2+0x26e>
 80095c2:	4b4a      	ldr	r3, [pc, #296]	; (80096ec <__kernel_rem_pio2+0x32c>)
 80095c4:	2200      	movs	r2, #0
 80095c6:	4630      	mov	r0, r6
 80095c8:	4639      	mov	r1, r7
 80095ca:	f7f7 f825 	bl	8000618 <__aeabi_dmul>
 80095ce:	f7f7 fad3 	bl	8000b78 <__aeabi_d2iz>
 80095d2:	f7f6 ffb7 	bl	8000544 <__aeabi_i2d>
 80095d6:	4602      	mov	r2, r0
 80095d8:	460b      	mov	r3, r1
 80095da:	ec43 2b18 	vmov	d8, r2, r3
 80095de:	4b44      	ldr	r3, [pc, #272]	; (80096f0 <__kernel_rem_pio2+0x330>)
 80095e0:	2200      	movs	r2, #0
 80095e2:	f7f7 f819 	bl	8000618 <__aeabi_dmul>
 80095e6:	4602      	mov	r2, r0
 80095e8:	460b      	mov	r3, r1
 80095ea:	4630      	mov	r0, r6
 80095ec:	4639      	mov	r1, r7
 80095ee:	f7f6 fe5b 	bl	80002a8 <__aeabi_dsub>
 80095f2:	f7f7 fac1 	bl	8000b78 <__aeabi_d2iz>
 80095f6:	e9d5 2300 	ldrd	r2, r3, [r5]
 80095fa:	f84b 0b04 	str.w	r0, [fp], #4
 80095fe:	ec51 0b18 	vmov	r0, r1, d8
 8009602:	f7f6 fe53 	bl	80002ac <__adddf3>
 8009606:	f109 39ff 	add.w	r9, r9, #4294967295
 800960a:	4606      	mov	r6, r0
 800960c:	460f      	mov	r7, r1
 800960e:	e75b      	b.n	80094c8 <__kernel_rem_pio2+0x108>
 8009610:	d106      	bne.n	8009620 <__kernel_rem_pio2+0x260>
 8009612:	1e63      	subs	r3, r4, #1
 8009614:	aa0c      	add	r2, sp, #48	; 0x30
 8009616:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800961a:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800961e:	e79d      	b.n	800955c <__kernel_rem_pio2+0x19c>
 8009620:	4b34      	ldr	r3, [pc, #208]	; (80096f4 <__kernel_rem_pio2+0x334>)
 8009622:	2200      	movs	r2, #0
 8009624:	f7f7 fa7e 	bl	8000b24 <__aeabi_dcmpge>
 8009628:	2800      	cmp	r0, #0
 800962a:	d140      	bne.n	80096ae <__kernel_rem_pio2+0x2ee>
 800962c:	4683      	mov	fp, r0
 800962e:	2200      	movs	r2, #0
 8009630:	2300      	movs	r3, #0
 8009632:	4630      	mov	r0, r6
 8009634:	4639      	mov	r1, r7
 8009636:	f7f7 fa57 	bl	8000ae8 <__aeabi_dcmpeq>
 800963a:	2800      	cmp	r0, #0
 800963c:	f000 80c1 	beq.w	80097c2 <__kernel_rem_pio2+0x402>
 8009640:	1e65      	subs	r5, r4, #1
 8009642:	462b      	mov	r3, r5
 8009644:	2200      	movs	r2, #0
 8009646:	9900      	ldr	r1, [sp, #0]
 8009648:	428b      	cmp	r3, r1
 800964a:	da6d      	bge.n	8009728 <__kernel_rem_pio2+0x368>
 800964c:	2a00      	cmp	r2, #0
 800964e:	f000 808a 	beq.w	8009766 <__kernel_rem_pio2+0x3a6>
 8009652:	ab0c      	add	r3, sp, #48	; 0x30
 8009654:	f1aa 0a18 	sub.w	sl, sl, #24
 8009658:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800965c:	2b00      	cmp	r3, #0
 800965e:	f000 80ae 	beq.w	80097be <__kernel_rem_pio2+0x3fe>
 8009662:	4650      	mov	r0, sl
 8009664:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 80096d8 <__kernel_rem_pio2+0x318>
 8009668:	f7ff fdfa 	bl	8009260 <scalbn>
 800966c:	1c6b      	adds	r3, r5, #1
 800966e:	00da      	lsls	r2, r3, #3
 8009670:	9205      	str	r2, [sp, #20]
 8009672:	ec57 6b10 	vmov	r6, r7, d0
 8009676:	aa70      	add	r2, sp, #448	; 0x1c0
 8009678:	f8df 9070 	ldr.w	r9, [pc, #112]	; 80096ec <__kernel_rem_pio2+0x32c>
 800967c:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8009680:	462c      	mov	r4, r5
 8009682:	f04f 0800 	mov.w	r8, #0
 8009686:	2c00      	cmp	r4, #0
 8009688:	f280 80d4 	bge.w	8009834 <__kernel_rem_pio2+0x474>
 800968c:	462c      	mov	r4, r5
 800968e:	2c00      	cmp	r4, #0
 8009690:	f2c0 8102 	blt.w	8009898 <__kernel_rem_pio2+0x4d8>
 8009694:	4b18      	ldr	r3, [pc, #96]	; (80096f8 <__kernel_rem_pio2+0x338>)
 8009696:	461e      	mov	r6, r3
 8009698:	ab70      	add	r3, sp, #448	; 0x1c0
 800969a:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800969e:	1b2b      	subs	r3, r5, r4
 80096a0:	f04f 0900 	mov.w	r9, #0
 80096a4:	f04f 0a00 	mov.w	sl, #0
 80096a8:	2700      	movs	r7, #0
 80096aa:	9306      	str	r3, [sp, #24]
 80096ac:	e0e6      	b.n	800987c <__kernel_rem_pio2+0x4bc>
 80096ae:	f04f 0b02 	mov.w	fp, #2
 80096b2:	e756      	b.n	8009562 <__kernel_rem_pio2+0x1a2>
 80096b4:	f8d8 3000 	ldr.w	r3, [r8]
 80096b8:	bb05      	cbnz	r5, 80096fc <__kernel_rem_pio2+0x33c>
 80096ba:	b123      	cbz	r3, 80096c6 <__kernel_rem_pio2+0x306>
 80096bc:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80096c0:	f8c8 3000 	str.w	r3, [r8]
 80096c4:	2301      	movs	r3, #1
 80096c6:	3201      	adds	r2, #1
 80096c8:	f108 0804 	add.w	r8, r8, #4
 80096cc:	461d      	mov	r5, r3
 80096ce:	e74f      	b.n	8009570 <__kernel_rem_pio2+0x1b0>
	...
 80096dc:	3ff00000 	.word	0x3ff00000
 80096e0:	08009f28 	.word	0x08009f28
 80096e4:	40200000 	.word	0x40200000
 80096e8:	3ff00000 	.word	0x3ff00000
 80096ec:	3e700000 	.word	0x3e700000
 80096f0:	41700000 	.word	0x41700000
 80096f4:	3fe00000 	.word	0x3fe00000
 80096f8:	08009ee8 	.word	0x08009ee8
 80096fc:	1acb      	subs	r3, r1, r3
 80096fe:	f8c8 3000 	str.w	r3, [r8]
 8009702:	462b      	mov	r3, r5
 8009704:	e7df      	b.n	80096c6 <__kernel_rem_pio2+0x306>
 8009706:	1e62      	subs	r2, r4, #1
 8009708:	ab0c      	add	r3, sp, #48	; 0x30
 800970a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800970e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009712:	a90c      	add	r1, sp, #48	; 0x30
 8009714:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8009718:	e738      	b.n	800958c <__kernel_rem_pio2+0x1cc>
 800971a:	1e62      	subs	r2, r4, #1
 800971c:	ab0c      	add	r3, sp, #48	; 0x30
 800971e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009722:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009726:	e7f4      	b.n	8009712 <__kernel_rem_pio2+0x352>
 8009728:	a90c      	add	r1, sp, #48	; 0x30
 800972a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800972e:	3b01      	subs	r3, #1
 8009730:	430a      	orrs	r2, r1
 8009732:	e788      	b.n	8009646 <__kernel_rem_pio2+0x286>
 8009734:	3301      	adds	r3, #1
 8009736:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800973a:	2900      	cmp	r1, #0
 800973c:	d0fa      	beq.n	8009734 <__kernel_rem_pio2+0x374>
 800973e:	9a08      	ldr	r2, [sp, #32]
 8009740:	f502 7218 	add.w	r2, r2, #608	; 0x260
 8009744:	446a      	add	r2, sp
 8009746:	3a98      	subs	r2, #152	; 0x98
 8009748:	9208      	str	r2, [sp, #32]
 800974a:	9a06      	ldr	r2, [sp, #24]
 800974c:	a920      	add	r1, sp, #128	; 0x80
 800974e:	18a2      	adds	r2, r4, r2
 8009750:	18e3      	adds	r3, r4, r3
 8009752:	f104 0801 	add.w	r8, r4, #1
 8009756:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800975a:	9302      	str	r3, [sp, #8]
 800975c:	9b02      	ldr	r3, [sp, #8]
 800975e:	4543      	cmp	r3, r8
 8009760:	da04      	bge.n	800976c <__kernel_rem_pio2+0x3ac>
 8009762:	461c      	mov	r4, r3
 8009764:	e6a2      	b.n	80094ac <__kernel_rem_pio2+0xec>
 8009766:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009768:	2301      	movs	r3, #1
 800976a:	e7e4      	b.n	8009736 <__kernel_rem_pio2+0x376>
 800976c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800976e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8009772:	f7f6 fee7 	bl	8000544 <__aeabi_i2d>
 8009776:	e8e5 0102 	strd	r0, r1, [r5], #8
 800977a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800977c:	46ab      	mov	fp, r5
 800977e:	461c      	mov	r4, r3
 8009780:	f04f 0900 	mov.w	r9, #0
 8009784:	2600      	movs	r6, #0
 8009786:	2700      	movs	r7, #0
 8009788:	9b05      	ldr	r3, [sp, #20]
 800978a:	4599      	cmp	r9, r3
 800978c:	dd06      	ble.n	800979c <__kernel_rem_pio2+0x3dc>
 800978e:	9b08      	ldr	r3, [sp, #32]
 8009790:	e8e3 6702 	strd	r6, r7, [r3], #8
 8009794:	f108 0801 	add.w	r8, r8, #1
 8009798:	9308      	str	r3, [sp, #32]
 800979a:	e7df      	b.n	800975c <__kernel_rem_pio2+0x39c>
 800979c:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80097a0:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80097a4:	f7f6 ff38 	bl	8000618 <__aeabi_dmul>
 80097a8:	4602      	mov	r2, r0
 80097aa:	460b      	mov	r3, r1
 80097ac:	4630      	mov	r0, r6
 80097ae:	4639      	mov	r1, r7
 80097b0:	f7f6 fd7c 	bl	80002ac <__adddf3>
 80097b4:	f109 0901 	add.w	r9, r9, #1
 80097b8:	4606      	mov	r6, r0
 80097ba:	460f      	mov	r7, r1
 80097bc:	e7e4      	b.n	8009788 <__kernel_rem_pio2+0x3c8>
 80097be:	3d01      	subs	r5, #1
 80097c0:	e747      	b.n	8009652 <__kernel_rem_pio2+0x292>
 80097c2:	ec47 6b10 	vmov	d0, r6, r7
 80097c6:	f1ca 0000 	rsb	r0, sl, #0
 80097ca:	f7ff fd49 	bl	8009260 <scalbn>
 80097ce:	ec57 6b10 	vmov	r6, r7, d0
 80097d2:	4ba0      	ldr	r3, [pc, #640]	; (8009a54 <__kernel_rem_pio2+0x694>)
 80097d4:	ee10 0a10 	vmov	r0, s0
 80097d8:	2200      	movs	r2, #0
 80097da:	4639      	mov	r1, r7
 80097dc:	f7f7 f9a2 	bl	8000b24 <__aeabi_dcmpge>
 80097e0:	b1f8      	cbz	r0, 8009822 <__kernel_rem_pio2+0x462>
 80097e2:	4b9d      	ldr	r3, [pc, #628]	; (8009a58 <__kernel_rem_pio2+0x698>)
 80097e4:	2200      	movs	r2, #0
 80097e6:	4630      	mov	r0, r6
 80097e8:	4639      	mov	r1, r7
 80097ea:	f7f6 ff15 	bl	8000618 <__aeabi_dmul>
 80097ee:	f7f7 f9c3 	bl	8000b78 <__aeabi_d2iz>
 80097f2:	4680      	mov	r8, r0
 80097f4:	f7f6 fea6 	bl	8000544 <__aeabi_i2d>
 80097f8:	4b96      	ldr	r3, [pc, #600]	; (8009a54 <__kernel_rem_pio2+0x694>)
 80097fa:	2200      	movs	r2, #0
 80097fc:	f7f6 ff0c 	bl	8000618 <__aeabi_dmul>
 8009800:	460b      	mov	r3, r1
 8009802:	4602      	mov	r2, r0
 8009804:	4639      	mov	r1, r7
 8009806:	4630      	mov	r0, r6
 8009808:	f7f6 fd4e 	bl	80002a8 <__aeabi_dsub>
 800980c:	f7f7 f9b4 	bl	8000b78 <__aeabi_d2iz>
 8009810:	1c65      	adds	r5, r4, #1
 8009812:	ab0c      	add	r3, sp, #48	; 0x30
 8009814:	f10a 0a18 	add.w	sl, sl, #24
 8009818:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800981c:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8009820:	e71f      	b.n	8009662 <__kernel_rem_pio2+0x2a2>
 8009822:	4630      	mov	r0, r6
 8009824:	4639      	mov	r1, r7
 8009826:	f7f7 f9a7 	bl	8000b78 <__aeabi_d2iz>
 800982a:	ab0c      	add	r3, sp, #48	; 0x30
 800982c:	4625      	mov	r5, r4
 800982e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009832:	e716      	b.n	8009662 <__kernel_rem_pio2+0x2a2>
 8009834:	ab0c      	add	r3, sp, #48	; 0x30
 8009836:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800983a:	f7f6 fe83 	bl	8000544 <__aeabi_i2d>
 800983e:	4632      	mov	r2, r6
 8009840:	463b      	mov	r3, r7
 8009842:	f7f6 fee9 	bl	8000618 <__aeabi_dmul>
 8009846:	4642      	mov	r2, r8
 8009848:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800984c:	464b      	mov	r3, r9
 800984e:	4630      	mov	r0, r6
 8009850:	4639      	mov	r1, r7
 8009852:	f7f6 fee1 	bl	8000618 <__aeabi_dmul>
 8009856:	3c01      	subs	r4, #1
 8009858:	4606      	mov	r6, r0
 800985a:	460f      	mov	r7, r1
 800985c:	e713      	b.n	8009686 <__kernel_rem_pio2+0x2c6>
 800985e:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8009862:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8009866:	f7f6 fed7 	bl	8000618 <__aeabi_dmul>
 800986a:	4602      	mov	r2, r0
 800986c:	460b      	mov	r3, r1
 800986e:	4648      	mov	r0, r9
 8009870:	4651      	mov	r1, sl
 8009872:	f7f6 fd1b 	bl	80002ac <__adddf3>
 8009876:	3701      	adds	r7, #1
 8009878:	4681      	mov	r9, r0
 800987a:	468a      	mov	sl, r1
 800987c:	9b00      	ldr	r3, [sp, #0]
 800987e:	429f      	cmp	r7, r3
 8009880:	dc02      	bgt.n	8009888 <__kernel_rem_pio2+0x4c8>
 8009882:	9b06      	ldr	r3, [sp, #24]
 8009884:	429f      	cmp	r7, r3
 8009886:	ddea      	ble.n	800985e <__kernel_rem_pio2+0x49e>
 8009888:	9a06      	ldr	r2, [sp, #24]
 800988a:	ab48      	add	r3, sp, #288	; 0x120
 800988c:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8009890:	e9c6 9a00 	strd	r9, sl, [r6]
 8009894:	3c01      	subs	r4, #1
 8009896:	e6fa      	b.n	800968e <__kernel_rem_pio2+0x2ce>
 8009898:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800989a:	2b02      	cmp	r3, #2
 800989c:	dc0b      	bgt.n	80098b6 <__kernel_rem_pio2+0x4f6>
 800989e:	2b00      	cmp	r3, #0
 80098a0:	dc39      	bgt.n	8009916 <__kernel_rem_pio2+0x556>
 80098a2:	d05d      	beq.n	8009960 <__kernel_rem_pio2+0x5a0>
 80098a4:	9b02      	ldr	r3, [sp, #8]
 80098a6:	f003 0007 	and.w	r0, r3, #7
 80098aa:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80098ae:	ecbd 8b02 	vpop	{d8}
 80098b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098b6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80098b8:	2b03      	cmp	r3, #3
 80098ba:	d1f3      	bne.n	80098a4 <__kernel_rem_pio2+0x4e4>
 80098bc:	9b05      	ldr	r3, [sp, #20]
 80098be:	9500      	str	r5, [sp, #0]
 80098c0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80098c4:	eb0d 0403 	add.w	r4, sp, r3
 80098c8:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 80098cc:	46a2      	mov	sl, r4
 80098ce:	9b00      	ldr	r3, [sp, #0]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	f1aa 0a08 	sub.w	sl, sl, #8
 80098d6:	dc69      	bgt.n	80099ac <__kernel_rem_pio2+0x5ec>
 80098d8:	46aa      	mov	sl, r5
 80098da:	f1ba 0f01 	cmp.w	sl, #1
 80098de:	f1a4 0408 	sub.w	r4, r4, #8
 80098e2:	f300 8083 	bgt.w	80099ec <__kernel_rem_pio2+0x62c>
 80098e6:	9c05      	ldr	r4, [sp, #20]
 80098e8:	ab48      	add	r3, sp, #288	; 0x120
 80098ea:	441c      	add	r4, r3
 80098ec:	2000      	movs	r0, #0
 80098ee:	2100      	movs	r1, #0
 80098f0:	2d01      	cmp	r5, #1
 80098f2:	f300 809a 	bgt.w	8009a2a <__kernel_rem_pio2+0x66a>
 80098f6:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 80098fa:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 80098fe:	f1bb 0f00 	cmp.w	fp, #0
 8009902:	f040 8098 	bne.w	8009a36 <__kernel_rem_pio2+0x676>
 8009906:	9b04      	ldr	r3, [sp, #16]
 8009908:	e9c3 7800 	strd	r7, r8, [r3]
 800990c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8009910:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8009914:	e7c6      	b.n	80098a4 <__kernel_rem_pio2+0x4e4>
 8009916:	9e05      	ldr	r6, [sp, #20]
 8009918:	ab48      	add	r3, sp, #288	; 0x120
 800991a:	441e      	add	r6, r3
 800991c:	462c      	mov	r4, r5
 800991e:	2000      	movs	r0, #0
 8009920:	2100      	movs	r1, #0
 8009922:	2c00      	cmp	r4, #0
 8009924:	da33      	bge.n	800998e <__kernel_rem_pio2+0x5ce>
 8009926:	f1bb 0f00 	cmp.w	fp, #0
 800992a:	d036      	beq.n	800999a <__kernel_rem_pio2+0x5da>
 800992c:	4602      	mov	r2, r0
 800992e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009932:	9c04      	ldr	r4, [sp, #16]
 8009934:	e9c4 2300 	strd	r2, r3, [r4]
 8009938:	4602      	mov	r2, r0
 800993a:	460b      	mov	r3, r1
 800993c:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8009940:	f7f6 fcb2 	bl	80002a8 <__aeabi_dsub>
 8009944:	ae4a      	add	r6, sp, #296	; 0x128
 8009946:	2401      	movs	r4, #1
 8009948:	42a5      	cmp	r5, r4
 800994a:	da29      	bge.n	80099a0 <__kernel_rem_pio2+0x5e0>
 800994c:	f1bb 0f00 	cmp.w	fp, #0
 8009950:	d002      	beq.n	8009958 <__kernel_rem_pio2+0x598>
 8009952:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009956:	4619      	mov	r1, r3
 8009958:	9b04      	ldr	r3, [sp, #16]
 800995a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800995e:	e7a1      	b.n	80098a4 <__kernel_rem_pio2+0x4e4>
 8009960:	9c05      	ldr	r4, [sp, #20]
 8009962:	ab48      	add	r3, sp, #288	; 0x120
 8009964:	441c      	add	r4, r3
 8009966:	2000      	movs	r0, #0
 8009968:	2100      	movs	r1, #0
 800996a:	2d00      	cmp	r5, #0
 800996c:	da09      	bge.n	8009982 <__kernel_rem_pio2+0x5c2>
 800996e:	f1bb 0f00 	cmp.w	fp, #0
 8009972:	d002      	beq.n	800997a <__kernel_rem_pio2+0x5ba>
 8009974:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009978:	4619      	mov	r1, r3
 800997a:	9b04      	ldr	r3, [sp, #16]
 800997c:	e9c3 0100 	strd	r0, r1, [r3]
 8009980:	e790      	b.n	80098a4 <__kernel_rem_pio2+0x4e4>
 8009982:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009986:	f7f6 fc91 	bl	80002ac <__adddf3>
 800998a:	3d01      	subs	r5, #1
 800998c:	e7ed      	b.n	800996a <__kernel_rem_pio2+0x5aa>
 800998e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8009992:	f7f6 fc8b 	bl	80002ac <__adddf3>
 8009996:	3c01      	subs	r4, #1
 8009998:	e7c3      	b.n	8009922 <__kernel_rem_pio2+0x562>
 800999a:	4602      	mov	r2, r0
 800999c:	460b      	mov	r3, r1
 800999e:	e7c8      	b.n	8009932 <__kernel_rem_pio2+0x572>
 80099a0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80099a4:	f7f6 fc82 	bl	80002ac <__adddf3>
 80099a8:	3401      	adds	r4, #1
 80099aa:	e7cd      	b.n	8009948 <__kernel_rem_pio2+0x588>
 80099ac:	e9da 8900 	ldrd	r8, r9, [sl]
 80099b0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80099b4:	9b00      	ldr	r3, [sp, #0]
 80099b6:	3b01      	subs	r3, #1
 80099b8:	9300      	str	r3, [sp, #0]
 80099ba:	4632      	mov	r2, r6
 80099bc:	463b      	mov	r3, r7
 80099be:	4640      	mov	r0, r8
 80099c0:	4649      	mov	r1, r9
 80099c2:	f7f6 fc73 	bl	80002ac <__adddf3>
 80099c6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80099ca:	4602      	mov	r2, r0
 80099cc:	460b      	mov	r3, r1
 80099ce:	4640      	mov	r0, r8
 80099d0:	4649      	mov	r1, r9
 80099d2:	f7f6 fc69 	bl	80002a8 <__aeabi_dsub>
 80099d6:	4632      	mov	r2, r6
 80099d8:	463b      	mov	r3, r7
 80099da:	f7f6 fc67 	bl	80002ac <__adddf3>
 80099de:	ed9d 7b06 	vldr	d7, [sp, #24]
 80099e2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80099e6:	ed8a 7b00 	vstr	d7, [sl]
 80099ea:	e770      	b.n	80098ce <__kernel_rem_pio2+0x50e>
 80099ec:	e9d4 8900 	ldrd	r8, r9, [r4]
 80099f0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 80099f4:	4640      	mov	r0, r8
 80099f6:	4632      	mov	r2, r6
 80099f8:	463b      	mov	r3, r7
 80099fa:	4649      	mov	r1, r9
 80099fc:	f7f6 fc56 	bl	80002ac <__adddf3>
 8009a00:	e9cd 0100 	strd	r0, r1, [sp]
 8009a04:	4602      	mov	r2, r0
 8009a06:	460b      	mov	r3, r1
 8009a08:	4640      	mov	r0, r8
 8009a0a:	4649      	mov	r1, r9
 8009a0c:	f7f6 fc4c 	bl	80002a8 <__aeabi_dsub>
 8009a10:	4632      	mov	r2, r6
 8009a12:	463b      	mov	r3, r7
 8009a14:	f7f6 fc4a 	bl	80002ac <__adddf3>
 8009a18:	ed9d 7b00 	vldr	d7, [sp]
 8009a1c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009a20:	ed84 7b00 	vstr	d7, [r4]
 8009a24:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009a28:	e757      	b.n	80098da <__kernel_rem_pio2+0x51a>
 8009a2a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009a2e:	f7f6 fc3d 	bl	80002ac <__adddf3>
 8009a32:	3d01      	subs	r5, #1
 8009a34:	e75c      	b.n	80098f0 <__kernel_rem_pio2+0x530>
 8009a36:	9b04      	ldr	r3, [sp, #16]
 8009a38:	9a04      	ldr	r2, [sp, #16]
 8009a3a:	601f      	str	r7, [r3, #0]
 8009a3c:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8009a40:	605c      	str	r4, [r3, #4]
 8009a42:	609d      	str	r5, [r3, #8]
 8009a44:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009a48:	60d3      	str	r3, [r2, #12]
 8009a4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009a4e:	6110      	str	r0, [r2, #16]
 8009a50:	6153      	str	r3, [r2, #20]
 8009a52:	e727      	b.n	80098a4 <__kernel_rem_pio2+0x4e4>
 8009a54:	41700000 	.word	0x41700000
 8009a58:	3e700000 	.word	0x3e700000
 8009a5c:	00000000 	.word	0x00000000

08009a60 <floor>:
 8009a60:	ec51 0b10 	vmov	r0, r1, d0
 8009a64:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009a68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a6c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8009a70:	2e13      	cmp	r6, #19
 8009a72:	ee10 5a10 	vmov	r5, s0
 8009a76:	ee10 8a10 	vmov	r8, s0
 8009a7a:	460c      	mov	r4, r1
 8009a7c:	dc31      	bgt.n	8009ae2 <floor+0x82>
 8009a7e:	2e00      	cmp	r6, #0
 8009a80:	da14      	bge.n	8009aac <floor+0x4c>
 8009a82:	a333      	add	r3, pc, #204	; (adr r3, 8009b50 <floor+0xf0>)
 8009a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a88:	f7f6 fc10 	bl	80002ac <__adddf3>
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	2300      	movs	r3, #0
 8009a90:	f7f7 f852 	bl	8000b38 <__aeabi_dcmpgt>
 8009a94:	b138      	cbz	r0, 8009aa6 <floor+0x46>
 8009a96:	2c00      	cmp	r4, #0
 8009a98:	da53      	bge.n	8009b42 <floor+0xe2>
 8009a9a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8009a9e:	4325      	orrs	r5, r4
 8009aa0:	d052      	beq.n	8009b48 <floor+0xe8>
 8009aa2:	4c2d      	ldr	r4, [pc, #180]	; (8009b58 <floor+0xf8>)
 8009aa4:	2500      	movs	r5, #0
 8009aa6:	4621      	mov	r1, r4
 8009aa8:	4628      	mov	r0, r5
 8009aaa:	e024      	b.n	8009af6 <floor+0x96>
 8009aac:	4f2b      	ldr	r7, [pc, #172]	; (8009b5c <floor+0xfc>)
 8009aae:	4137      	asrs	r7, r6
 8009ab0:	ea01 0307 	and.w	r3, r1, r7
 8009ab4:	4303      	orrs	r3, r0
 8009ab6:	d01e      	beq.n	8009af6 <floor+0x96>
 8009ab8:	a325      	add	r3, pc, #148	; (adr r3, 8009b50 <floor+0xf0>)
 8009aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009abe:	f7f6 fbf5 	bl	80002ac <__adddf3>
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	f7f7 f837 	bl	8000b38 <__aeabi_dcmpgt>
 8009aca:	2800      	cmp	r0, #0
 8009acc:	d0eb      	beq.n	8009aa6 <floor+0x46>
 8009ace:	2c00      	cmp	r4, #0
 8009ad0:	bfbe      	ittt	lt
 8009ad2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8009ad6:	4133      	asrlt	r3, r6
 8009ad8:	18e4      	addlt	r4, r4, r3
 8009ada:	ea24 0407 	bic.w	r4, r4, r7
 8009ade:	2500      	movs	r5, #0
 8009ae0:	e7e1      	b.n	8009aa6 <floor+0x46>
 8009ae2:	2e33      	cmp	r6, #51	; 0x33
 8009ae4:	dd0b      	ble.n	8009afe <floor+0x9e>
 8009ae6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8009aea:	d104      	bne.n	8009af6 <floor+0x96>
 8009aec:	ee10 2a10 	vmov	r2, s0
 8009af0:	460b      	mov	r3, r1
 8009af2:	f7f6 fbdb 	bl	80002ac <__adddf3>
 8009af6:	ec41 0b10 	vmov	d0, r0, r1
 8009afa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009afe:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8009b02:	f04f 37ff 	mov.w	r7, #4294967295
 8009b06:	40df      	lsrs	r7, r3
 8009b08:	4238      	tst	r0, r7
 8009b0a:	d0f4      	beq.n	8009af6 <floor+0x96>
 8009b0c:	a310      	add	r3, pc, #64	; (adr r3, 8009b50 <floor+0xf0>)
 8009b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b12:	f7f6 fbcb 	bl	80002ac <__adddf3>
 8009b16:	2200      	movs	r2, #0
 8009b18:	2300      	movs	r3, #0
 8009b1a:	f7f7 f80d 	bl	8000b38 <__aeabi_dcmpgt>
 8009b1e:	2800      	cmp	r0, #0
 8009b20:	d0c1      	beq.n	8009aa6 <floor+0x46>
 8009b22:	2c00      	cmp	r4, #0
 8009b24:	da0a      	bge.n	8009b3c <floor+0xdc>
 8009b26:	2e14      	cmp	r6, #20
 8009b28:	d101      	bne.n	8009b2e <floor+0xce>
 8009b2a:	3401      	adds	r4, #1
 8009b2c:	e006      	b.n	8009b3c <floor+0xdc>
 8009b2e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8009b32:	2301      	movs	r3, #1
 8009b34:	40b3      	lsls	r3, r6
 8009b36:	441d      	add	r5, r3
 8009b38:	45a8      	cmp	r8, r5
 8009b3a:	d8f6      	bhi.n	8009b2a <floor+0xca>
 8009b3c:	ea25 0507 	bic.w	r5, r5, r7
 8009b40:	e7b1      	b.n	8009aa6 <floor+0x46>
 8009b42:	2500      	movs	r5, #0
 8009b44:	462c      	mov	r4, r5
 8009b46:	e7ae      	b.n	8009aa6 <floor+0x46>
 8009b48:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8009b4c:	e7ab      	b.n	8009aa6 <floor+0x46>
 8009b4e:	bf00      	nop
 8009b50:	8800759c 	.word	0x8800759c
 8009b54:	7e37e43c 	.word	0x7e37e43c
 8009b58:	bff00000 	.word	0xbff00000
 8009b5c:	000fffff 	.word	0x000fffff

08009b60 <_init>:
 8009b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b62:	bf00      	nop
 8009b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b66:	bc08      	pop	{r3}
 8009b68:	469e      	mov	lr, r3
 8009b6a:	4770      	bx	lr

08009b6c <_fini>:
 8009b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b6e:	bf00      	nop
 8009b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b72:	bc08      	pop	{r3}
 8009b74:	469e      	mov	lr, r3
 8009b76:	4770      	bx	lr
